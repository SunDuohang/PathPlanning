std::vector<Node<T1> > Astar<T1, T2>::get_neighbors(T1** map, int map_xsize, int map_ysize, Node<T1> cur, int method){
    std::vector<Node<T1> > neighbors;
    T1 cur_x = cur.x;
    T1 cur_y = cur.y;
    T1 neighbor_x = (T1)0;
    T1 neighbor_y = (T1)0;
    if (method == 4 || method == 8){
        for (int i = 0; i < method; i++){
            neighbor_x = cur_x + offsets[i][0];
            neighbor_y = cur_y + offsets[i][1];
            if (is_valid_neighbor(neighbor_x, neighbor_y, map_xsize, map_ysize, map))
                neighbors.push_back(Node<T1>(neighbor_x, neighbor_y));
        }
    }
    else if(method == 16 || method == 32){
        for (int i = 0; i < 8; i++){
            neighbor_x = cur_x + offsets[i][0];
            neighbor_y = cur_y + offsets[i][1];
            if (is_valid_neighbor(neighbor_x, neighbor_y, map_xsize, map_ysize, map))
                neighbors.push_back(Node<T1>(neighbor_x, neighbor_y));
        }
        for (int i = 8; i < method; i++){
            neighbor_x = cur_x + offsets[i][0];
            neighbor_y = cur_y + offsets[i][1];
            if (is_valid_neighbor(neighbor_x, neighbor_y, map_xsize, map_ysize, map) && is_valid_move(map, cur, Node<int>(neighbor_x, neighbor_y)))
                neighbors.push_back(Node<T1>(neighbor_x, neighbor_y));
        }
    }
    return neighbors;
};
