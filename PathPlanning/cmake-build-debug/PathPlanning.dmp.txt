
./PathPlanning：     文件格式 elf64-x86-64
./PathPlanning
体系结构：i386:x86-64， 标志 0x00000150：
HAS_SYMS, DYNAMIC, D_PAGED
起始地址 0x0000000000003490

程序头：
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r--
  INTERP off    0x0000000000000238 vaddr 0x0000000000000238 paddr 0x0000000000000238 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**21
         filesz 0x0000000000008b23 memsz 0x0000000000008b23 flags r-x
    LOAD off    0x0000000000009808 vaddr 0x0000000000209808 paddr 0x0000000000209808 align 2**21
         filesz 0x0000000000000810 memsz 0x0000000000000958 flags rw-
 DYNAMIC off    0x0000000000009bf0 vaddr 0x0000000000209bf0 paddr 0x0000000000209bf0 align 2**3
         filesz 0x0000000000000220 memsz 0x0000000000000220 flags rw-
    NOTE off    0x0000000000000254 vaddr 0x0000000000000254 paddr 0x0000000000000254 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
EH_FRAME off    0x0000000000008148 vaddr 0x0000000000008148 paddr 0x0000000000008148 align 2**2
         filesz 0x00000000000000ec memsz 0x00000000000000ec flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000009808 vaddr 0x0000000000209808 paddr 0x0000000000209808 align 2**0
         filesz 0x00000000000007f8 memsz 0x00000000000007f8 flags r--

动态节：
  NEEDED               libstdc++.so.6
  NEEDED               libm.so.6
  NEEDED               libgcc_s.so.1
  NEEDED               libc.so.6
  INIT                 0x0000000000001e80
  FINI                 0x0000000000007e44
  INIT_ARRAY           0x0000000000209808
  INIT_ARRAYSZ         0x0000000000000010
  FINI_ARRAY           0x0000000000209818
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x0000000000000298
  STRTAB               0x0000000000000a48
  SYMTAB               0x0000000000000340
  STRSZ                0x0000000000000b85
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000209e10
  PLTRELSZ             0x00000000000004b0
  PLTREL               0x0000000000000007
  JMPREL               0x00000000000019d0
  RELA                 0x0000000000001778
  RELASZ               0x0000000000000258
  RELAENT              0x0000000000000018
  FLAGS                0x0000000000000008
  FLAGS_1              0x0000000008000001
  VERNEED              0x0000000000001668
  VERNEEDNUM           0x0000000000000004
  VERSYM               0x00000000000015ce
  RELACOUNT            0x0000000000000004

版本引用：
  required from libgcc_s.so.1:
    0x0b792650 0x00 14 GCC_3.0
  required from libm.so.6:
    0x09691a75 0x00 08 GLIBC_2.2.5
  required from libc.so.6:
    0x0d696914 0x00 11 GLIBC_2.4
    0x06969194 0x00 09 GLIBC_2.14
    0x09691a75 0x00 06 GLIBC_2.2.5
  required from libstdc++.so.6:
    0x0297f868 0x00 13 GLIBCXX_3.4.18
    0x0297f861 0x00 12 GLIBCXX_3.4.11
    0x0bafd179 0x00 10 CXXABI_1.3.9
    0x02297f89 0x00 07 GLIBCXX_3.4.9
    0x056bafd3 0x00 05 CXXABI_1.3
    0x0297f871 0x00 04 GLIBCXX_3.4.21
    0x0297f869 0x00 03 GLIBCXX_3.4.19
    0x08922974 0x00 02 GLIBCXX_3.4

节：
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000238  0000000000000238  00000238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  0000000000000254  0000000000000254  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000274  0000000000000274  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     000000a8  0000000000000298  0000000000000298  00000298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000708  0000000000000340  0000000000000340  00000340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000b85  0000000000000a48  0000000000000a48  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000096  00000000000015ce  00000000000015ce  000015ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000110  0000000000001668  0000000000001668  00001668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     00000258  0000000000001778  0000000000001778  00001778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     000004b0  00000000000019d0  00000000000019d0  000019d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         00000017  0000000000001e80  0000000000001e80  00001e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000330  0000000000001ea0  0000000000001ea0  00001ea0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt.got      00000008  00000000000021d0  00000000000021d0  000021d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00005c62  00000000000021e0  00000000000021e0  000021e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini         00000009  0000000000007e44  0000000000007e44  00007e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       000002e8  0000000000007e60  0000000000007e60  00007e60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr 000000ec  0000000000008148  0000000000008148  00008148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame     000006a0  0000000000008238  0000000000008238  00008238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .gcc_except_table 0000024b  00000000000088d8  00000000000088d8  000088d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .init_array   00000010  0000000000209808  0000000000209808  00009808  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .fini_array   00000008  0000000000209818  0000000000209818  00009818  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.rel.ro  000003d0  0000000000209820  0000000000209820  00009820  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      00000220  0000000000209bf0  0000000000209bf0  00009bf0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          000001d8  0000000000209e10  0000000000209e10  00009e10  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000018  000000000020a000  000000000020a000  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000140  000000000020a020  000000000020a020  0000a018  2**5
                  ALLOC
 26 .comment      00000029  0000000000000000  0000000000000000  0000a018  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0000000000000238 l    d  .interp	0000000000000000              .interp
0000000000000254 l    d  .note.ABI-tag	0000000000000000              .note.ABI-tag
0000000000000274 l    d  .note.gnu.build-id	0000000000000000              .note.gnu.build-id
0000000000000298 l    d  .gnu.hash	0000000000000000              .gnu.hash
0000000000000340 l    d  .dynsym	0000000000000000              .dynsym
0000000000000a48 l    d  .dynstr	0000000000000000              .dynstr
00000000000015ce l    d  .gnu.version	0000000000000000              .gnu.version
0000000000001668 l    d  .gnu.version_r	0000000000000000              .gnu.version_r
0000000000001778 l    d  .rela.dyn	0000000000000000              .rela.dyn
00000000000019d0 l    d  .rela.plt	0000000000000000              .rela.plt
0000000000001e80 l    d  .init	0000000000000000              .init
0000000000001ea0 l    d  .plt	0000000000000000              .plt
00000000000021d0 l    d  .plt.got	0000000000000000              .plt.got
00000000000021e0 l    d  .text	0000000000000000              .text
0000000000007e44 l    d  .fini	0000000000000000              .fini
0000000000007e60 l    d  .rodata	0000000000000000              .rodata
0000000000008148 l    d  .eh_frame_hdr	0000000000000000              .eh_frame_hdr
0000000000008238 l    d  .eh_frame	0000000000000000              .eh_frame
00000000000088d8 l    d  .gcc_except_table	0000000000000000              .gcc_except_table
0000000000209808 l    d  .init_array	0000000000000000              .init_array
0000000000209818 l    d  .fini_array	0000000000000000              .fini_array
0000000000209820 l    d  .data.rel.ro	0000000000000000              .data.rel.ro
0000000000209bf0 l    d  .dynamic	0000000000000000              .dynamic
0000000000209e10 l    d  .got	0000000000000000              .got
000000000020a000 l    d  .data	0000000000000000              .data
000000000020a020 l    d  .bss	0000000000000000              .bss
0000000000000000 l    d  .comment	0000000000000000              .comment
0000000000000000 l    df *ABS*	0000000000000000              main.cpp
0000000000004060 l     F .text	000000000000005e              JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]
000000000020a140 l     O .bss	0000000000000018              directions
00000000000033c0 l     F .text	00000000000000c6              _GLOBAL__sub_I_main
000000000020a158 l     O .bss	0000000000000001              std::__ioinit
0000000000007fe0 l     O .rodata	0000000000000040              ._96
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
00000000000034c0 l     F .text	0000000000000000              deregister_tm_clones
0000000000003500 l     F .text	0000000000000000              register_tm_clones
0000000000003550 l     F .text	0000000000000000              __do_global_dtors_aux
000000000020a130 l     O .bss	0000000000000001              completed.7698
0000000000209818 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
0000000000003590 l     F .text	0000000000000000              frame_dummy
0000000000209808 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
00000000000088d4 l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000              
0000000000008148 l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000209bf0 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000209818 l       .init_array	0000000000000000              __init_array_end
0000000000209808 l       .init_array	0000000000000000              __init_array_start
0000000000209e10 l     O .got	0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000000000       F *UND*	0000000000000000              std::ostream::put(char)@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::chrono::_V2::system_clock::now()@@GLIBCXX_3.4.19
00000000000035a0 g     F .text	0000000000000a81              load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)
0000000000004a10  w    F .text	000000000000030e              void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)
0000000000209820  w    O .data.rel.ro	0000000000000020              vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4
00000000000040d0  w    F .text	000000000000049b              JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)
0000000000000000       F *UND*	0000000000000000              std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::basic_filebuf<char, std::char_traits<char> >::close()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::__basic_file<char>::is_open() const@@GLIBCXX_3.4
000000000020a018 g       .data	0000000000000000              _edata
0000000000000000       F *UND*	0000000000000000              std::ios_base::ios_base()@@GLIBCXX_3.4
0000000000209840  w    O .data.rel.ro	0000000000000050              vtable for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
000000000020a000  w      .data	0000000000000000              data_start
0000000000000000       F *UND*	0000000000000000              std::ios_base::~ios_base()@@GLIBCXX_3.4
0000000000007e60 g     O .rodata	0000000000000004              _IO_stdin_used
0000000000209890  w    O .data.rel.ro	0000000000000050              VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::__throw_bad_alloc()@@GLIBCXX_3.4
00000000000048e0  w    F .text	0000000000000126              void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)
0000000000000000       F *UND*	0000000000000000              __cxa_begin_catch@@CXXABI_1.3
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@@GLIBC_2.2.5
0000000000000000       F *UND*	0000000000000000              strlen@@GLIBC_2.2.5
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@@GLIBCXX_3.4.21
00000000000021e0 g     F .text	00000000000011d6              main
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@@GLIBCXX_3.4
0000000000005750  w    F .text	000000000000010a              std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)
0000000000000000       F *UND*	0000000000000000              std::__throw_length_error(char const*)@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              memset@@GLIBC_2.2.5
000000000020a008 g     O .data	0000000000000000              .hidden __dso_handle
00000000002098e0  w    O .data.rel.ro	0000000000000078              vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::istream::operator>>(int&)@@GLIBCXX_3.4
0000000000209958  w    O .data.rel.ro	0000000000000080              vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4
000000000020a010  w    O .data	0000000000000008              .hidden DW.ref.__gxx_personality_v0
0000000000000000       F *UND*	0000000000000000              std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@@GLIBCXX_3.4.9
0000000000000000       F *UND*	0000000000000000              std::ostream::flush()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::__throw_logic_error(char const*)@@GLIBCXX_3.4
0000000000007e44 g     F .fini	0000000000000000              _fini
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@@GLIBCXX_3.4.21
00000000002099e0  w    O .data.rel.ro	0000000000000050              VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              sqrt@@GLIBC_2.2.5
0000000000004e50  w    F .text	000000000000043d              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
0000000000000000       F *UND*	0000000000000000              memcpy@@GLIBC_2.14
0000000000004030  w    F .text	0000000000000003              std::ctype<char>::do_widen(char) const
0000000000000000       F *UND*	0000000000000000              __cxa_atexit@@GLIBC_2.2.5
0000000000000000       F *UND*	0000000000000000              std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@@GLIBCXX_3.4
0000000000209a30  w    O .data.rel.ro	0000000000000020              VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              operator delete(void*)@@GLIBCXX_3.4
0000000000003490 g     F .text	000000000000002b              _start
0000000000005520  w    F .text	00000000000000fd              std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
0000000000000000       F *UND*	0000000000000000              operator new(unsigned long)@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              operator delete(void*, unsigned long)@@CXXABI_1.3.9
0000000000209a60  w    O .data.rel.ro	0000000000000078              vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@@GLIBCXX_3.4
0000000000005860  w    F .text	0000000000002561              JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)
0000000000000000       F *UND*	0000000000000000              __stack_chk_fail@@GLIBC_2.4
0000000000001e80 g     F .init	0000000000000000              _init
000000000020a018 g     O .data	0000000000000000              .hidden __TMC_END__
0000000000000000       F *UND*	0000000000000000              std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9
0000000000000000       F *UND*	0000000000000000              std::ctype<char>::_M_widen_init() const@@GLIBCXX_3.4.11
00000000000053c0  w    F .text	000000000000015b              void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)
00000000000047f0  w    F .text	00000000000000eb              std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()
0000000000005620  w    F .text	000000000000012e              std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)
0000000000000000       F *UND*	0000000000000000              std::__throw_bad_cast()@@GLIBCXX_3.4
000000000020a020 g     O .bss	0000000000000110              std::cout@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18
0000000000000000       F *UND*	0000000000000000              std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@@GLIBCXX_3.4
000000000020a000 g       .data	0000000000000000              __data_start
000000000020a160 g       .bss	0000000000000000              _end
0000000000004570  w    F .text	0000000000000034              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()
0000000000000000       F *UND*	0000000000000000              std::locale::~locale()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              __cxa_rethrow@@CXXABI_1.3
0000000000004040  w    F .text	0000000000000012              std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
000000000020a018 g       .bss	0000000000000000              __bss_start
0000000000209ad8  w    O .data.rel.ro	0000000000000080              vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4
0000000000005290  w    F .text	0000000000000126              void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)
0000000000004600  w    F .text	000000000000007a              std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()
0000000000000000       F *UND*	0000000000000000              std::ios_base::Init::Init()@@GLIBCXX_3.4
0000000000007dd0 g     F .text	0000000000000065              __libc_csu_init
0000000000000000       F *UND*	0000000000000000              std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9
0000000000000000       F *UND*	0000000000000000              memmove@@GLIBC_2.2.5
0000000000004570  w    F .text	0000000000000034              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()
0000000000000000       F *UND*	0000000000000000              __cxa_end_catch@@CXXABI_1.3
0000000000000000       F *UND*	0000000000000000              __gxx_personality_v0@@CXXABI_1.3
0000000000004600  w    F .text	000000000000007a              std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()
0000000000000000       F *UND*	0000000000000000              std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@@GLIBCXX_3.4.21
0000000000004680  w    F .text	0000000000000168              void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)
0000000000000000       F *UND*	0000000000000000              std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::ostream::operator<<(int)@@GLIBCXX_3.4
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000000000       F *UND*	0000000000000000              _Unwind_Resume@@GCC_3.0
0000000000004040  w    F .text	0000000000000012              std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
0000000000007e40 g     F .text	0000000000000002              __libc_csu_fini
0000000000000000       F *UND*	0000000000000000              std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@@GLIBCXX_3.4.21
0000000000000000       F *UND*	0000000000000000              std::__basic_file<char>::~__basic_file()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              __libc_start_main@@GLIBC_2.2.5
00000000000040c0  w    F .text	0000000000000005              std::char_traits<char>::length(char const*)
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
0000000000209b58  w    O .data.rel.ro	0000000000000080              vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
0000000000004d20  w    F .text	0000000000000126              void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)
00000000000045b0  w    F .text	0000000000000041              std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()
0000000000000000       F *UND*	0000000000000000              std::locale::locale()@@GLIBCXX_3.4
0000000000000000       F *UND*	0000000000000000              std::ios_base::Init::~Init()@@GLIBCXX_3.4



Disassembly of section .init:

0000000000001e80 <_init>:
    1e80:	48 83 ec 08          	sub    $0x8,%rsp
    1e84:	48 8b 05 45 81 20 00 	mov    0x208145(%rip),%rax        # 209fd0 <__gmon_start__>
    1e8b:	48 85 c0             	test   %rax,%rax
    1e8e:	74 02                	je     1e92 <_init+0x12>
    1e90:	ff d0                	callq  *%rax
    1e92:	48 83 c4 08          	add    $0x8,%rsp
    1e96:	c3                   	retq   

Disassembly of section .plt:

0000000000001ea0 <.plt>:
    1ea0:	ff 35 72 7f 20 00    	pushq  0x207f72(%rip)        # 209e18 <_GLOBAL_OFFSET_TABLE_+0x8>
    1ea6:	ff 25 74 7f 20 00    	jmpq   *0x207f74(%rip)        # 209e20 <_GLOBAL_OFFSET_TABLE_+0x10>
    1eac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001eb0 <std::ostream::put(char)@plt>:
    1eb0:	ff 25 72 7f 20 00    	jmpq   *0x207f72(%rip)        # 209e28 <std::ostream::put(char)@GLIBCXX_3.4>
    1eb6:	68 00 00 00 00       	pushq  $0x0
    1ebb:	e9 e0 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001ec0 <std::chrono::_V2::system_clock::now()@plt>:
    1ec0:	ff 25 6a 7f 20 00    	jmpq   *0x207f6a(%rip)        # 209e30 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    1ec6:	68 01 00 00 00       	pushq  $0x1
    1ecb:	e9 d0 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001ed0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>:
    1ed0:	ff 25 62 7f 20 00    	jmpq   *0x207f62(%rip)        # 209e38 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@GLIBCXX_3.4>
    1ed6:	68 02 00 00 00       	pushq  $0x2
    1edb:	e9 c0 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>:
    1ee0:	ff 25 5a 7f 20 00    	jmpq   *0x207f5a(%rip)        # 209e40 <std::basic_filebuf<char, std::char_traits<char> >::close()@GLIBCXX_3.4>
    1ee6:	68 03 00 00 00       	pushq  $0x3
    1eeb:	e9 b0 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001ef0 <std::__basic_file<char>::is_open() const@plt>:
    1ef0:	ff 25 52 7f 20 00    	jmpq   *0x207f52(%rip)        # 209e48 <std::__basic_file<char>::is_open() const@GLIBCXX_3.4>
    1ef6:	68 04 00 00 00       	pushq  $0x4
    1efb:	e9 a0 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f00 <std::ios_base::ios_base()@plt>:
    1f00:	ff 25 4a 7f 20 00    	jmpq   *0x207f4a(%rip)        # 209e50 <std::ios_base::ios_base()@GLIBCXX_3.4>
    1f06:	68 05 00 00 00       	pushq  $0x5
    1f0b:	e9 90 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f10 <std::ios_base::~ios_base()@plt>:
    1f10:	ff 25 42 7f 20 00    	jmpq   *0x207f42(%rip)        # 209e58 <std::ios_base::~ios_base()@GLIBCXX_3.4>
    1f16:	68 06 00 00 00       	pushq  $0x6
    1f1b:	e9 80 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f20 <std::__throw_bad_alloc()@plt>:
    1f20:	ff 25 3a 7f 20 00    	jmpq   *0x207f3a(%rip)        # 209e60 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    1f26:	68 07 00 00 00       	pushq  $0x7
    1f2b:	e9 70 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f30 <__cxa_begin_catch@plt>:
    1f30:	ff 25 32 7f 20 00    	jmpq   *0x207f32(%rip)        # 209e68 <__cxa_begin_catch@CXXABI_1.3>
    1f36:	68 08 00 00 00       	pushq  $0x8
    1f3b:	e9 60 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f40 <strlen@plt>:
    1f40:	ff 25 2a 7f 20 00    	jmpq   *0x207f2a(%rip)        # 209e70 <strlen@GLIBC_2.2.5>
    1f46:	68 09 00 00 00       	pushq  $0x9
    1f4b:	e9 50 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f50 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@plt>:
    1f50:	ff 25 22 7f 20 00    	jmpq   *0x207f22(%rip)        # 209e78 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@GLIBCXX_3.4.21>
    1f56:	68 0a 00 00 00       	pushq  $0xa
    1f5b:	e9 40 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f60 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
    1f60:	ff 25 1a 7f 20 00    	jmpq   *0x207f1a(%rip)        # 209e80 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    1f66:	68 0b 00 00 00       	pushq  $0xb
    1f6b:	e9 30 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f70 <std::__throw_length_error(char const*)@plt>:
    1f70:	ff 25 12 7f 20 00    	jmpq   *0x207f12(%rip)        # 209e88 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    1f76:	68 0c 00 00 00       	pushq  $0xc
    1f7b:	e9 20 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f80 <memset@plt>:
    1f80:	ff 25 0a 7f 20 00    	jmpq   *0x207f0a(%rip)        # 209e90 <memset@GLIBC_2.2.5>
    1f86:	68 0d 00 00 00       	pushq  $0xd
    1f8b:	e9 10 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001f90 <std::istream::operator>>(int&)@plt>:
    1f90:	ff 25 02 7f 20 00    	jmpq   *0x207f02(%rip)        # 209e98 <std::istream::operator>>(int&)@GLIBCXX_3.4>
    1f96:	68 0e 00 00 00       	pushq  $0xe
    1f9b:	e9 00 ff ff ff       	jmpq   1ea0 <.plt>

0000000000001fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
    1fa0:	ff 25 fa 7e 20 00    	jmpq   *0x207efa(%rip)        # 209ea0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@GLIBCXX_3.4.9>
    1fa6:	68 0f 00 00 00       	pushq  $0xf
    1fab:	e9 f0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000001fb0 <std::ostream::flush()@plt>:
    1fb0:	ff 25 f2 7e 20 00    	jmpq   *0x207ef2(%rip)        # 209ea8 <std::ostream::flush()@GLIBCXX_3.4>
    1fb6:	68 10 00 00 00       	pushq  $0x10
    1fbb:	e9 e0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000001fc0 <std::__throw_logic_error(char const*)@plt>:
    1fc0:	ff 25 ea 7e 20 00    	jmpq   *0x207eea(%rip)        # 209eb0 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    1fc6:	68 11 00 00 00       	pushq  $0x11
    1fcb:	e9 d0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000001fd0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>:
    1fd0:	ff 25 e2 7e 20 00    	jmpq   *0x207ee2(%rip)        # 209eb8 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@GLIBCXX_3.4.21>
    1fd6:	68 12 00 00 00       	pushq  $0x12
    1fdb:	e9 c0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000001fe0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@plt>:
    1fe0:	ff 25 da 7e 20 00    	jmpq   *0x207eda(%rip)        # 209ec0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@GLIBCXX_3.4.21>
    1fe6:	68 13 00 00 00       	pushq  $0x13
    1feb:	e9 b0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000001ff0 <sqrt@plt>:
    1ff0:	ff 25 d2 7e 20 00    	jmpq   *0x207ed2(%rip)        # 209ec8 <sqrt@GLIBC_2.2.5>
    1ff6:	68 14 00 00 00       	pushq  $0x14
    1ffb:	e9 a0 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002000 <memcpy@plt>:
    2000:	ff 25 ca 7e 20 00    	jmpq   *0x207eca(%rip)        # 209ed0 <memcpy@GLIBC_2.14>
    2006:	68 15 00 00 00       	pushq  $0x15
    200b:	e9 90 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002010 <__cxa_atexit@plt>:
    2010:	ff 25 c2 7e 20 00    	jmpq   *0x207ec2(%rip)        # 209ed8 <__cxa_atexit@GLIBC_2.2.5>
    2016:	68 16 00 00 00       	pushq  $0x16
    201b:	e9 80 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002020 <std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@plt>:
    2020:	ff 25 ba 7e 20 00    	jmpq   *0x207eba(%rip)        # 209ee0 <std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@GLIBCXX_3.4>
    2026:	68 17 00 00 00       	pushq  $0x17
    202b:	e9 70 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002030 <operator delete(void*)@plt>:
    2030:	ff 25 b2 7e 20 00    	jmpq   *0x207eb2(%rip)        # 209ee8 <operator delete(void*)@GLIBCXX_3.4>
    2036:	68 18 00 00 00       	pushq  $0x18
    203b:	e9 60 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002040 <operator new(unsigned long)@plt>:
    2040:	ff 25 aa 7e 20 00    	jmpq   *0x207eaa(%rip)        # 209ef0 <operator new(unsigned long)@GLIBCXX_3.4>
    2046:	68 19 00 00 00       	pushq  $0x19
    204b:	e9 50 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002050 <operator delete(void*, unsigned long)@plt>:
    2050:	ff 25 a2 7e 20 00    	jmpq   *0x207ea2(%rip)        # 209ef8 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    2056:	68 1a 00 00 00       	pushq  $0x1a
    205b:	e9 40 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002060 <std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@plt>:
    2060:	ff 25 9a 7e 20 00    	jmpq   *0x207e9a(%rip)        # 209f00 <std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@GLIBCXX_3.4>
    2066:	68 1b 00 00 00       	pushq  $0x1b
    206b:	e9 30 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002070 <__stack_chk_fail@plt>:
    2070:	ff 25 92 7e 20 00    	jmpq   *0x207e92(%rip)        # 209f08 <__stack_chk_fail@GLIBC_2.4>
    2076:	68 1c 00 00 00       	pushq  $0x1c
    207b:	e9 20 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
    2080:	ff 25 8a 7e 20 00    	jmpq   *0x207e8a(%rip)        # 209f10 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
    2086:	68 1d 00 00 00       	pushq  $0x1d
    208b:	e9 10 fe ff ff       	jmpq   1ea0 <.plt>

0000000000002090 <std::ctype<char>::_M_widen_init() const@plt>:
    2090:	ff 25 82 7e 20 00    	jmpq   *0x207e82(%rip)        # 209f18 <std::ctype<char>::_M_widen_init() const@GLIBCXX_3.4.11>
    2096:	68 1e 00 00 00       	pushq  $0x1e
    209b:	e9 00 fe ff ff       	jmpq   1ea0 <.plt>

00000000000020a0 <std::__throw_bad_cast()@plt>:
    20a0:	ff 25 7a 7e 20 00    	jmpq   *0x207e7a(%rip)        # 209f20 <std::__throw_bad_cast()@GLIBCXX_3.4>
    20a6:	68 1f 00 00 00       	pushq  $0x1f
    20ab:	e9 f0 fd ff ff       	jmpq   1ea0 <.plt>

00000000000020b0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>:
    20b0:	ff 25 72 7e 20 00    	jmpq   *0x207e72(%rip)        # 209f28 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@GLIBCXX_3.4.21>
    20b6:	68 20 00 00 00       	pushq  $0x20
    20bb:	e9 e0 fd ff ff       	jmpq   1ea0 <.plt>

00000000000020c0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
    20c0:	ff 25 6a 7e 20 00    	jmpq   *0x207e6a(%rip)        # 209f30 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
    20c6:	68 21 00 00 00       	pushq  $0x21
    20cb:	e9 d0 fd ff ff       	jmpq   1ea0 <.plt>

00000000000020d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>:
    20d0:	ff 25 62 7e 20 00    	jmpq   *0x207e62(%rip)        # 209f38 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@GLIBCXX_3.4>
    20d6:	68 22 00 00 00       	pushq  $0x22
    20db:	e9 c0 fd ff ff       	jmpq   1ea0 <.plt>

00000000000020e0 <std::locale::~locale()@plt>:
    20e0:	ff 25 5a 7e 20 00    	jmpq   *0x207e5a(%rip)        # 209f40 <std::locale::~locale()@GLIBCXX_3.4>
    20e6:	68 23 00 00 00       	pushq  $0x23
    20eb:	e9 b0 fd ff ff       	jmpq   1ea0 <.plt>

00000000000020f0 <__cxa_rethrow@plt>:
    20f0:	ff 25 52 7e 20 00    	jmpq   *0x207e52(%rip)        # 209f48 <__cxa_rethrow@CXXABI_1.3>
    20f6:	68 24 00 00 00       	pushq  $0x24
    20fb:	e9 a0 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002100 <std::ios_base::Init::Init()@plt>:
    2100:	ff 25 4a 7e 20 00    	jmpq   *0x207e4a(%rip)        # 209f50 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    2106:	68 25 00 00 00       	pushq  $0x25
    210b:	e9 90 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002110 <std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@plt>:
    2110:	ff 25 42 7e 20 00    	jmpq   *0x207e42(%rip)        # 209f58 <std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@GLIBCXX_3.4>
    2116:	68 26 00 00 00       	pushq  $0x26
    211b:	e9 80 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002120 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>:
    2120:	ff 25 3a 7e 20 00    	jmpq   *0x207e3a(%rip)        # 209f60 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@GLIBCXX_3.4.21>
    2126:	68 27 00 00 00       	pushq  $0x27
    212b:	e9 70 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002130 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
    2130:	ff 25 32 7e 20 00    	jmpq   *0x207e32(%rip)        # 209f68 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
    2136:	68 28 00 00 00       	pushq  $0x28
    213b:	e9 60 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002140 <memmove@plt>:
    2140:	ff 25 2a 7e 20 00    	jmpq   *0x207e2a(%rip)        # 209f70 <memmove@GLIBC_2.2.5>
    2146:	68 29 00 00 00       	pushq  $0x29
    214b:	e9 50 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002150 <__cxa_end_catch@plt>:
    2150:	ff 25 22 7e 20 00    	jmpq   *0x207e22(%rip)        # 209f78 <__cxa_end_catch@CXXABI_1.3>
    2156:	68 2a 00 00 00       	pushq  $0x2a
    215b:	e9 40 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002160 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>:
    2160:	ff 25 1a 7e 20 00    	jmpq   *0x207e1a(%rip)        # 209f80 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@GLIBCXX_3.4.21>
    2166:	68 2b 00 00 00       	pushq  $0x2b
    216b:	e9 30 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
    2170:	ff 25 12 7e 20 00    	jmpq   *0x207e12(%rip)        # 209f88 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@GLIBCXX_3.4>
    2176:	68 2c 00 00 00       	pushq  $0x2c
    217b:	e9 20 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002180 <std::ostream::operator<<(int)@plt>:
    2180:	ff 25 0a 7e 20 00    	jmpq   *0x207e0a(%rip)        # 209f90 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    2186:	68 2d 00 00 00       	pushq  $0x2d
    218b:	e9 10 fd ff ff       	jmpq   1ea0 <.plt>

0000000000002190 <_Unwind_Resume@plt>:
    2190:	ff 25 02 7e 20 00    	jmpq   *0x207e02(%rip)        # 209f98 <_Unwind_Resume@GCC_3.0>
    2196:	68 2e 00 00 00       	pushq  $0x2e
    219b:	e9 00 fd ff ff       	jmpq   1ea0 <.plt>

00000000000021a0 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@plt>:
    21a0:	ff 25 fa 7d 20 00    	jmpq   *0x207dfa(%rip)        # 209fa0 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@GLIBCXX_3.4.21>
    21a6:	68 2f 00 00 00       	pushq  $0x2f
    21ab:	e9 f0 fc ff ff       	jmpq   1ea0 <.plt>

00000000000021b0 <std::__basic_file<char>::~__basic_file()@plt>:
    21b0:	ff 25 f2 7d 20 00    	jmpq   *0x207df2(%rip)        # 209fa8 <std::__basic_file<char>::~__basic_file()@GLIBCXX_3.4>
    21b6:	68 30 00 00 00       	pushq  $0x30
    21bb:	e9 e0 fc ff ff       	jmpq   1ea0 <.plt>

00000000000021c0 <std::locale::locale()@plt>:
    21c0:	ff 25 ea 7d 20 00    	jmpq   *0x207dea(%rip)        # 209fb0 <std::locale::locale()@GLIBCXX_3.4>
    21c6:	68 31 00 00 00       	pushq  $0x31
    21cb:	e9 d0 fc ff ff       	jmpq   1ea0 <.plt>

Disassembly of section .plt.got:

00000000000021d0 <__cxa_finalize@plt>:
    21d0:	ff 25 e2 7d 20 00    	jmpq   *0x207de2(%rip)        # 209fb8 <__cxa_finalize@GLIBC_2.2.5>
    21d6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000021e0 <main>:
    21e0:	41 57                	push   %r15
    21e2:	41 56                	push   %r14
    21e4:	48 8d 3d f5 5c 00 00 	lea    0x5cf5(%rip),%rdi        # 7ee0 <_IO_stdin_used+0x80>
    21eb:	41 55                	push   %r13
    21ed:	41 54                	push   %r12
    21ef:	b9 64 00 00 00       	mov    $0x64,%ecx
    21f4:	55                   	push   %rbp
    21f5:	53                   	push   %rbx
    21f6:	ba 64 00 00 00       	mov    $0x64,%edx
    21fb:	66 0f ef c0          	pxor   %xmm0,%xmm0
    21ff:	48 81 ec b8 07 00 00 	sub    $0x7b8,%rsp
    2206:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    220d:	00 00 
    220f:	48 89 84 24 a8 07 00 	mov    %rax,0x7a8(%rsp)
    2216:	00 
    2217:	31 c0                	xor    %eax,%eax
    2219:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
    221e:	48 c7 84 24 80 00 00 	movq   $0x0,0x80(%rsp)
    2225:	00 00 00 00 00 
    222a:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
    222f:	48 89 c6             	mov    %rax,%rsi
    2232:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    2237:	e8 64 13 00 00       	callq  35a0 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)>
    223c:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    2241:	48 3b 54 24 78       	cmp    0x78(%rsp),%rdx
    2246:	0f 84 d1 00 00 00    	je     231d <main+0x13d>
    224c:	48 8d 2d cd 7d 20 00 	lea    0x207dcd(%rip),%rbp        # 20a020 <std::cout@@GLIBCXX_3.4>
    2253:	4c 8d 3d d6 1d 00 00 	lea    0x1dd6(%rip),%r15        # 4030 <std::ctype<char>::do_widen(char) const>
    225a:	45 31 ed             	xor    %r13d,%r13d
    225d:	49 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r14
    2264:	aa aa aa 
    2267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    226e:	00 00 
    2270:	48 8b 42 08          	mov    0x8(%rdx),%rax
    2274:	48 39 02             	cmp    %rax,(%rdx)
    2277:	74 4b                	je     22c4 <main+0xe4>
    2279:	4f 8d 64 6d 00       	lea    0x0(%r13,%r13,2),%r12
    227e:	31 db                	xor    %ebx,%ebx
    2280:	49 c1 e4 03          	shl    $0x3,%r12
    2284:	0f 1f 40 00          	nopl   0x0(%rax)
    2288:	4a 8b 04 22          	mov    (%rdx,%r12,1),%rax
    228c:	48 89 ef             	mov    %rbp,%rdi
    228f:	8b 34 98             	mov    (%rax,%rbx,4),%esi
    2292:	e8 e9 fe ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    2297:	48 8d 35 9c 5c 00 00 	lea    0x5c9c(%rip),%rsi        # 7f3a <_IO_stdin_used+0xda>
    229e:	ba 01 00 00 00       	mov    $0x1,%edx
    22a3:	48 89 c7             	mov    %rax,%rdi
    22a6:	e8 d5 fd ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    22ab:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    22b0:	48 83 c3 01          	add    $0x1,%rbx
    22b4:	48 8b 42 08          	mov    0x8(%rdx),%rax
    22b8:	48 2b 02             	sub    (%rdx),%rax
    22bb:	48 c1 f8 02          	sar    $0x2,%rax
    22bf:	48 39 d8             	cmp    %rbx,%rax
    22c2:	77 c4                	ja     2288 <main+0xa8>
    22c4:	48 8b 45 00          	mov    0x0(%rbp),%rax
    22c8:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    22cc:	48 8b 9c 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbx
    22d3:	00 
    22d4:	48 85 db             	test   %rbx,%rbx
    22d7:	0f 84 2c 0f 00 00    	je     3209 <main+0x1029>
    22dd:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    22e1:	0f 84 99 0e 00 00    	je     3180 <main+0xfa0>
    22e7:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    22eb:	48 89 ef             	mov    %rbp,%rdi
    22ee:	e8 bd fb ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    22f3:	48 89 c7             	mov    %rax,%rdi
    22f6:	e8 b5 fc ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    22fb:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
    2300:	48 8b 44 24 78       	mov    0x78(%rsp),%rax
    2305:	49 83 c5 01          	add    $0x1,%r13
    2309:	48 29 d0             	sub    %rdx,%rax
    230c:	48 c1 f8 03          	sar    $0x3,%rax
    2310:	49 0f af c6          	imul   %r14,%rax
    2314:	49 39 c5             	cmp    %rax,%r13
    2317:	0f 82 53 ff ff ff    	jb     2270 <main+0x90>
    231d:	66 0f 6f 05 0b 5d 00 	movdqa 0x5d0b(%rip),%xmm0        # 8030 <._96+0x50>
    2324:	00 
    2325:	48 8d 3d cf 5b 00 00 	lea    0x5bcf(%rip),%rdi        # 7efb <_IO_stdin_used+0x9b>
    232c:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    2333:	00 00 00 00 00 
    2338:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
    233f:	00 00 00 00 00 
    2344:	0f 29 84 24 70 01 00 	movaps %xmm0,0x170(%rsp)
    234b:	00 
    234c:	c7 84 24 a0 00 00 00 	movl   $0x0,0xa0(%rsp)
    2353:	00 00 00 00 
    2357:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
    235e:	00 00 00 00 00 
    2363:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8040 <._96+0x60>
    236a:	00 
    236b:	0f 29 84 24 80 01 00 	movaps %xmm0,0x180(%rsp)
    2372:	00 
    2373:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8050 <._96+0x70>
    237a:	00 
    237b:	0f 29 84 24 90 01 00 	movaps %xmm0,0x190(%rsp)
    2382:	00 
    2383:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8060 <._96+0x80>
    238a:	00 
    238b:	0f 29 84 24 a0 01 00 	movaps %xmm0,0x1a0(%rsp)
    2392:	00 
    2393:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8070 <._96+0x90>
    239a:	00 
    239b:	0f 29 84 24 b0 01 00 	movaps %xmm0,0x1b0(%rsp)
    23a2:	00 
    23a3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8080 <._96+0xa0>
    23aa:	00 
    23ab:	0f 29 84 24 c0 01 00 	movaps %xmm0,0x1c0(%rsp)
    23b2:	00 
    23b3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8090 <._96+0xb0>
    23ba:	00 
    23bb:	0f 29 84 24 d0 01 00 	movaps %xmm0,0x1d0(%rsp)
    23c2:	00 
    23c3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80a0 <._96+0xc0>
    23ca:	00 
    23cb:	0f 29 84 24 e0 01 00 	movaps %xmm0,0x1e0(%rsp)
    23d2:	00 
    23d3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80b0 <._96+0xd0>
    23da:	00 
    23db:	0f 29 84 24 f0 01 00 	movaps %xmm0,0x1f0(%rsp)
    23e2:	00 
    23e3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80c0 <._96+0xe0>
    23ea:	00 
    23eb:	0f 29 84 24 00 02 00 	movaps %xmm0,0x200(%rsp)
    23f2:	00 
    23f3:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80d0 <._96+0xf0>
    23fa:	00 
    23fb:	0f 29 84 24 10 02 00 	movaps %xmm0,0x210(%rsp)
    2402:	00 
    2403:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80e0 <._96+0x100>
    240a:	00 
    240b:	0f 29 84 24 20 02 00 	movaps %xmm0,0x220(%rsp)
    2412:	00 
    2413:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 80f0 <._96+0x110>
    241a:	00 
    241b:	0f 29 84 24 30 02 00 	movaps %xmm0,0x230(%rsp)
    2422:	00 
    2423:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8100 <._96+0x120>
    242a:	00 
    242b:	0f 29 84 24 40 02 00 	movaps %xmm0,0x240(%rsp)
    2432:	00 
    2433:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8110 <._96+0x130>
    243a:	00 
    243b:	0f 29 84 24 50 02 00 	movaps %xmm0,0x250(%rsp)
    2442:	00 
    2443:	66 0f 6f 05 d5 5c 00 	movdqa 0x5cd5(%rip),%xmm0        # 8120 <._96+0x140>
    244a:	00 
    244b:	0f 29 84 24 60 02 00 	movaps %xmm0,0x260(%rsp)
    2452:	00 
    2453:	e8 68 1c 00 00       	callq  40c0 <std::char_traits<char>::length(char const*)>
    2458:	48 8d 35 9c 5a 00 00 	lea    0x5a9c(%rip),%rsi        # 7efb <_IO_stdin_used+0x9b>
    245f:	48 8d 3d ba 7b 20 00 	lea    0x207bba(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    2466:	48 89 c2             	mov    %rax,%rdx
    2469:	e8 12 fc ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    246e:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    2473:	48 2b 74 24 70       	sub    0x70(%rsp),%rsi
    2478:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    247f:	aa aa aa 
    2482:	48 8d 3d 97 7b 20 00 	lea    0x207b97(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    2489:	48 c1 fe 03          	sar    $0x3,%rsi
    248d:	48 0f af f0          	imul   %rax,%rsi
    2491:	e8 0a fb ff ff       	callq  1fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    2496:	48 8d 3d 66 5a 00 00 	lea    0x5a66(%rip),%rdi        # 7f03 <_IO_stdin_used+0xa3>
    249d:	48 89 c3             	mov    %rax,%rbx
    24a0:	e8 1b 1c 00 00       	callq  40c0 <std::char_traits<char>::length(char const*)>
    24a5:	48 8d 35 57 5a 00 00 	lea    0x5a57(%rip),%rsi        # 7f03 <_IO_stdin_used+0xa3>
    24ac:	48 89 c2             	mov    %rax,%rdx
    24af:	48 89 df             	mov    %rbx,%rdi
    24b2:	e8 c9 fb ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    24b7:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
    24bc:	48 89 df             	mov    %rbx,%rdi
    24bf:	48 8b 70 08          	mov    0x8(%rax),%rsi
    24c3:	48 2b 30             	sub    (%rax),%rsi
    24c6:	48 c1 fe 02          	sar    $0x2,%rsi
    24ca:	e8 d1 fa ff ff       	callq  1fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    24cf:	48 89 c7             	mov    %rax,%rdi
    24d2:	e8 89 fa ff ff       	callq  1f60 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    24d7:	48 8d 9c 24 f0 00 00 	lea    0xf0(%rsp),%rbx
    24de:	00 
    24df:	bf 17 00 00 00       	mov    $0x17,%edi
    24e4:	48 8d 43 10          	lea    0x10(%rbx),%rax
    24e8:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
    24ed:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
    24f4:	00 
    24f5:	e8 46 fb ff ff       	callq  2040 <operator new(unsigned long)@plt>
    24fa:	66 0f 6f 05 2e 5c 00 	movdqa 0x5c2e(%rip),%xmm0        # 8130 <._96+0x150>
    2501:	00 
    2502:	ba 78 74 00 00       	mov    $0x7478,%edx
    2507:	66 89 50 14          	mov    %dx,0x14(%rax)
    250b:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
    2512:	00 
    2513:	ba 11 00 00 00       	mov    $0x11,%edx
    2518:	0f 11 00             	movups %xmm0,(%rax)
    251b:	c7 40 10 6f 67 2e 74 	movl   $0x742e676f,0x10(%rax)
    2522:	c6 40 16 00          	movb   $0x0,0x16(%rax)
    2526:	48 8d 84 24 90 05 00 	lea    0x590(%rsp),%rax
    252d:	00 
    252e:	48 89 de             	mov    %rbx,%rsi
    2531:	48 89 c7             	mov    %rax,%rdi
    2534:	48 c7 84 24 00 01 00 	movq   $0x16,0x100(%rsp)
    253b:	00 16 00 00 00 
    2540:	48 c7 84 24 f8 00 00 	movq   $0x16,0xf8(%rsp)
    2547:	00 16 00 00 00 
    254c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2551:	e8 0a fc ff ff       	callq  2160 <std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    2556:	48 8d 84 24 70 02 00 	lea    0x270(%rsp),%rax
    255d:	00 
    255e:	be 18 00 00 00       	mov    $0x18,%esi
    2563:	48 89 c7             	mov    %rax,%rdi
    2566:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    256b:	e8 70 fa ff ff       	callq  1fe0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)@plt>
    2570:	4c 8d bc 24 70 01 00 	lea    0x170(%rsp),%r15
    2577:	00 
    2578:	f3 0f 7e 2d 60 76 20 	movq   0x207660(%rip),%xmm5        # 209be0 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x180>
    257f:	00 
    2580:	0f 16 2d 61 76 20 00 	movhps 0x207661(%rip),%xmm5        # 209be8 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x90>
    2587:	49 8d 87 00 01 00 00 	lea    0x100(%r15),%rax
    258e:	0f 29 6c 24 40       	movaps %xmm5,0x40(%rsp)
    2593:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    2598:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
    259f:	00 
    25a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    25a5:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
    25ac:	00 
    25ad:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    25b2:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
    25b9:	00 
    25ba:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    25bf:	48 8d 44 24 6f       	lea    0x6f(%rsp),%rax
    25c4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    25c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    25d0:	41 8b 17             	mov    (%r15),%edx
    25d3:	41 8b 47 04          	mov    0x4(%r15),%eax
    25d7:	48 c7 84 24 b8 00 00 	movq   $0x0,0xb8(%rsp)
    25de:	00 00 00 00 00 
    25e3:	c7 84 24 c0 00 00 00 	movl   $0x0,0xc0(%rsp)
    25ea:	00 00 00 00 
    25ee:	48 c7 84 24 c8 00 00 	movq   $0x0,0xc8(%rsp)
    25f5:	00 00 00 00 00 
    25fa:	89 94 24 b0 00 00 00 	mov    %edx,0xb0(%rsp)
    2601:	89 84 24 b4 00 00 00 	mov    %eax,0xb4(%rsp)
    2608:	e8 b3 f8 ff ff       	callq  1ec0 <std::chrono::_V2::system_clock::now()@plt>
    260d:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
    2612:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    2617:	48 89 c3             	mov    %rax,%rbx
    261a:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
    261f:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    2624:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    2629:	e8 32 32 00 00       	callq  5860 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    262e:	e8 8d f8 ff ff       	callq  1ec0 <std::chrono::_V2::system_clock::now()@plt>
    2633:	66 0f ef c0          	pxor   %xmm0,%xmm0
    2637:	48 29 d8             	sub    %rbx,%rax
    263a:	48 8d ac 24 00 04 00 	lea    0x400(%rsp),%rbp
    2641:	00 
    2642:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    2647:	48 8d bd 80 00 00 00 	lea    0x80(%rbp),%rdi
    264e:	f2 0f 5e 05 ea 5a 00 	divsd  0x5aea(%rip),%xmm0        # 8140 <._96+0x160>
    2655:	00 
    2656:	f2 0f 11 04 24       	movsd  %xmm0,(%rsp)
    265b:	e8 a0 f8 ff ff       	callq  1f00 <std::ios_base::ios_base()@plt>
    2660:	48 8d 05 c9 71 20 00 	lea    0x2071c9(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    2667:	c6 84 24 60 05 00 00 	movb   $0x0,0x560(%rsp)
    266e:	00 
    266f:	31 f6                	xor    %esi,%esi
    2671:	48 8b 0d 30 72 20 00 	mov    0x207230(%rip),%rcx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    2678:	48 c7 84 24 58 05 00 	movq   $0x0,0x558(%rsp)
    267f:	00 00 00 00 00 
    2684:	48 89 84 24 80 04 00 	mov    %rax,0x480(%rsp)
    268b:	00 
    268c:	48 8b 05 0d 72 20 00 	mov    0x20720d(%rip),%rax        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    2693:	c6 84 24 61 05 00 00 	movb   $0x0,0x561(%rsp)
    269a:	00 
    269b:	48 c7 84 24 68 05 00 	movq   $0x0,0x568(%rsp)
    26a2:	00 00 00 00 00 
    26a7:	48 c7 84 24 70 05 00 	movq   $0x0,0x570(%rsp)
    26ae:	00 00 00 00 00 
    26b3:	48 c7 84 24 78 05 00 	movq   $0x0,0x578(%rsp)
    26ba:	00 00 00 00 00 
    26bf:	48 89 84 24 00 04 00 	mov    %rax,0x400(%rsp)
    26c6:	00 
    26c7:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    26cb:	48 c7 84 24 80 05 00 	movq   $0x0,0x580(%rsp)
    26d2:	00 00 00 00 00 
    26d7:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    26de:	00 
    26df:	48 8b 05 ba 71 20 00 	mov    0x2071ba(%rip),%rax        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    26e6:	48 c7 84 24 08 04 00 	movq   $0x0,0x408(%rsp)
    26ed:	00 00 00 00 00 
    26f2:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    26f6:	48 01 ef             	add    %rbp,%rdi
    26f9:	e8 d2 f9 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    26fe:	48 8b 05 ab 71 20 00 	mov    0x2071ab(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    2705:	31 f6                	xor    %esi,%esi
    2707:	48 89 84 24 10 04 00 	mov    %rax,0x410(%rsp)
    270e:	00 
    270f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2713:	48 8d 7c 05 10       	lea    0x10(%rbp,%rax,1),%rdi
    2718:	48 8b 05 99 71 20 00 	mov    0x207199(%rip),%rax        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    271f:	48 89 07             	mov    %rax,(%rdi)
    2722:	e8 a9 f9 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    2727:	48 8b 05 6a 71 20 00 	mov    0x20716a(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    272e:	48 8b 0d 8b 71 20 00 	mov    0x20718b(%rip),%rcx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    2735:	48 8d 7d 50          	lea    0x50(%rbp),%rdi
    2739:	66 0f ef c0          	pxor   %xmm0,%xmm0
    273d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2741:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    2748:	00 
    2749:	48 8d 05 28 73 20 00 	lea    0x207328(%rip),%rax        # 209a78 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    2750:	0f 29 84 24 20 04 00 	movaps %xmm0,0x420(%rsp)
    2757:	00 
    2758:	48 89 84 24 00 04 00 	mov    %rax,0x400(%rsp)
    275f:	00 
    2760:	48 83 c0 50          	add    $0x50,%rax
    2764:	0f 29 84 24 30 04 00 	movaps %xmm0,0x430(%rsp)
    276b:	00 
    276c:	0f 29 84 24 40 04 00 	movaps %xmm0,0x440(%rsp)
    2773:	00 
    2774:	48 89 84 24 80 04 00 	mov    %rax,0x480(%rsp)
    277b:	00 
    277c:	48 83 e8 28          	sub    $0x28,%rax
    2780:	48 89 84 24 10 04 00 	mov    %rax,0x410(%rsp)
    2787:	00 
    2788:	48 8d 05 d9 71 20 00 	lea    0x2071d9(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    278f:	48 89 84 24 18 04 00 	mov    %rax,0x418(%rsp)
    2796:	00 
    2797:	e8 24 fa ff ff       	callq  21c0 <std::locale::locale()@plt>
    279c:	48 8d 05 c5 73 20 00 	lea    0x2073c5(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    27a3:	48 8d 75 18          	lea    0x18(%rbp),%rsi
    27a7:	48 8d bd 80 00 00 00 	lea    0x80(%rbp),%rdi
    27ae:	c7 84 24 58 04 00 00 	movl   $0x18,0x458(%rsp)
    27b5:	18 00 00 00 
    27b9:	48 c7 84 24 68 04 00 	movq   $0x0,0x468(%rsp)
    27c0:	00 00 00 00 00 
    27c5:	48 89 84 24 18 04 00 	mov    %rax,0x418(%rsp)
    27cc:	00 
    27cd:	48 8d 45 70          	lea    0x70(%rbp),%rax
    27d1:	c6 84 24 70 04 00 00 	movb   $0x0,0x470(%rsp)
    27d8:	00 
    27d9:	48 89 84 24 60 04 00 	mov    %rax,0x460(%rsp)
    27e0:	00 
    27e1:	e8 ea f8 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    27e6:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    27ea:	48 8d 35 18 57 00 00 	lea    0x5718(%rip),%rsi        # 7f09 <_IO_stdin_used+0xa9>
    27f1:	ba 13 00 00 00       	mov    $0x13,%edx
    27f6:	e8 85 f8 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    27fb:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    27ff:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
    2804:	e8 27 f9 ff ff       	callq  2130 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    2809:	48 8d 35 0d 57 00 00 	lea    0x570d(%rip),%rsi        # 7f1d <_IO_stdin_used+0xbd>
    2810:	ba 05 00 00 00       	mov    $0x5,%edx
    2815:	48 89 c7             	mov    %rax,%rdi
    2818:	48 89 c3             	mov    %rax,%rbx
    281b:	e8 60 f8 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2820:	48 8d 35 fc 56 00 00 	lea    0x56fc(%rip),%rsi        # 7f23 <_IO_stdin_used+0xc3>
    2827:	ba 0d 00 00 00       	mov    $0xd,%edx
    282c:	48 89 df             	mov    %rbx,%rdi
    282f:	e8 4c f8 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2834:	f2 0f 10 84 24 e8 00 	movsd  0xe8(%rsp),%xmm0
    283b:	00 00 
    283d:	48 89 df             	mov    %rbx,%rdi
    2840:	e8 eb f8 ff ff       	callq  2130 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    2845:	49 89 c4             	mov    %rax,%r12
    2848:	48 8b 00             	mov    (%rax),%rax
    284b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    284f:	49 8b 9c 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbx
    2856:	00 
    2857:	48 85 db             	test   %rbx,%rbx
    285a:	0f 84 dc 0a 00 00    	je     333c <main+0x115c>
    2860:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    2864:	0f 84 36 07 00 00    	je     2fa0 <main+0xdc0>
    286a:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    286e:	4c 89 e7             	mov    %r12,%rdi
    2871:	e8 3a f6 ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    2876:	48 89 c7             	mov    %rax,%rdi
    2879:	e8 32 f7 ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    287e:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    2883:	48 8d 35 7f 56 00 00 	lea    0x567f(%rip),%rsi        # 7f09 <_IO_stdin_used+0xa9>
    288a:	ba 13 00 00 00       	mov    $0x13,%edx
    288f:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    2893:	e8 e8 f7 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2898:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    289c:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
    28a1:	e8 8a f8 ff ff       	callq  2130 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    28a6:	48 8d 35 70 56 00 00 	lea    0x5670(%rip),%rsi        # 7f1d <_IO_stdin_used+0xbd>
    28ad:	ba 05 00 00 00       	mov    $0x5,%edx
    28b2:	48 89 c7             	mov    %rax,%rdi
    28b5:	48 89 c3             	mov    %rax,%rbx
    28b8:	e8 c3 f7 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    28bd:	48 8d 35 5f 56 00 00 	lea    0x565f(%rip),%rsi        # 7f23 <_IO_stdin_used+0xc3>
    28c4:	ba 0d 00 00 00       	mov    $0xd,%edx
    28c9:	48 89 df             	mov    %rbx,%rdi
    28cc:	e8 af f7 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    28d1:	f2 0f 10 84 24 e8 00 	movsd  0xe8(%rsp),%xmm0
    28d8:	00 00 
    28da:	48 89 df             	mov    %rbx,%rdi
    28dd:	e8 4e f8 ff ff       	callq  2130 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
    28e2:	49 89 c4             	mov    %rax,%r12
    28e5:	48 8b 00             	mov    (%rax),%rax
    28e8:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    28ec:	49 8b 9c 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbx
    28f3:	00 
    28f4:	48 85 db             	test   %rbx,%rbx
    28f7:	0f 84 44 0a 00 00    	je     3341 <main+0x1161>
    28fd:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    2901:	0f 84 61 06 00 00    	je     2f68 <main+0xd88>
    2907:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    290b:	4c 89 e7             	mov    %r12,%rdi
    290e:	e8 9d f5 ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    2913:	48 89 c7             	mov    %rax,%rdi
    2916:	e8 95 f6 ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    291b:	48 8b 84 24 d8 00 00 	mov    0xd8(%rsp),%rax
    2922:	00 
    2923:	48 8b 94 24 d0 00 00 	mov    0xd0(%rsp),%rdx
    292a:	00 
    292b:	48 39 c2             	cmp    %rax,%rdx
    292e:	74 60                	je     2990 <main+0x7b0>
    2930:	48 83 e8 20          	sub    $0x20,%rax
    2934:	48 39 c2             	cmp    %rax,%rdx
    2937:	73 57                	jae    2990 <main+0x7b0>
    2939:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2940:	f3 0f 6f 18          	movdqu (%rax),%xmm3
    2944:	48 83 c2 20          	add    $0x20,%rdx
    2948:	48 83 e8 20          	sub    $0x20,%rax
    294c:	8b 7a e0             	mov    -0x20(%rdx),%edi
    294f:	8b 72 e4             	mov    -0x1c(%rdx),%esi
    2952:	f3 0f 10 52 e8       	movss  -0x18(%rdx),%xmm2
    2957:	48 8b 4a f8          	mov    -0x8(%rdx),%rcx
    295b:	f3 0f 10 4a ec       	movss  -0x14(%rdx),%xmm1
    2960:	0f 11 5a e0          	movups %xmm3,-0x20(%rdx)
    2964:	f3 0f 6f 58 30       	movdqu 0x30(%rax),%xmm3
    2969:	f3 0f 10 42 f0       	movss  -0x10(%rdx),%xmm0
    296e:	0f 11 5a f0          	movups %xmm3,-0x10(%rdx)
    2972:	89 78 20             	mov    %edi,0x20(%rax)
    2975:	89 70 24             	mov    %esi,0x24(%rax)
    2978:	f3 0f 11 50 28       	movss  %xmm2,0x28(%rax)
    297d:	f3 0f 11 48 2c       	movss  %xmm1,0x2c(%rax)
    2982:	f3 0f 11 40 30       	movss  %xmm0,0x30(%rax)
    2987:	48 89 48 38          	mov    %rcx,0x38(%rax)
    298b:	48 39 c2             	cmp    %rax,%rdx
    298e:	72 b0                	jb     2940 <main+0x760>
    2990:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    2994:	48 8d 35 96 55 00 00 	lea    0x5596(%rip),%rsi        # 7f31 <_IO_stdin_used+0xd1>
    299b:	ba 06 00 00 00       	mov    $0x6,%edx
    29a0:	e8 db f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    29a5:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    29a9:	48 8d 35 8a 55 00 00 	lea    0x558a(%rip),%rsi        # 7f3a <_IO_stdin_used+0xda>
    29b0:	ba 01 00 00 00       	mov    $0x1,%edx
    29b5:	e8 c6 f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    29ba:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    29be:	48 8d 35 ac 55 00 00 	lea    0x55ac(%rip),%rsi        # 7f71 <_IO_stdin_used+0x111>
    29c5:	ba 01 00 00 00       	mov    $0x1,%edx
    29ca:	e8 b1 f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    29cf:	8b b4 24 b0 00 00 00 	mov    0xb0(%rsp),%esi
    29d6:	48 8d 7d 10          	lea    0x10(%rbp),%rdi
    29da:	e8 a1 f7 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    29df:	48 8d 35 53 55 00 00 	lea    0x5553(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    29e6:	ba 02 00 00 00       	mov    $0x2,%edx
    29eb:	48 89 c7             	mov    %rax,%rdi
    29ee:	48 89 c3             	mov    %rax,%rbx
    29f1:	e8 8a f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    29f6:	8b b4 24 b4 00 00 00 	mov    0xb4(%rsp),%esi
    29fd:	48 89 df             	mov    %rbx,%rdi
    2a00:	e8 7b f7 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    2a05:	48 8d 35 2c 55 00 00 	lea    0x552c(%rip),%rsi        # 7f38 <_IO_stdin_used+0xd8>
    2a0c:	ba 03 00 00 00       	mov    $0x3,%edx
    2a11:	48 89 c7             	mov    %rax,%rdi
    2a14:	e8 67 f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2a19:	48 8b 9c 24 d0 00 00 	mov    0xd0(%rsp),%rbx
    2a20:	00 
    2a21:	4c 8b b4 24 d8 00 00 	mov    0xd8(%rsp),%r14
    2a28:	00 
    2a29:	49 39 de             	cmp    %rbx,%r14
    2a2c:	74 67                	je     2a95 <main+0x8b5>
    2a2e:	4c 8d 6d 10          	lea    0x10(%rbp),%r13
    2a32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2a38:	48 8d 35 32 55 00 00 	lea    0x5532(%rip),%rsi        # 7f71 <_IO_stdin_used+0x111>
    2a3f:	ba 01 00 00 00       	mov    $0x1,%edx
    2a44:	4c 89 ef             	mov    %r13,%rdi
    2a47:	e8 34 f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2a4c:	8b 33                	mov    (%rbx),%esi
    2a4e:	4c 89 ef             	mov    %r13,%rdi
    2a51:	e8 2a f7 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    2a56:	48 8d 35 dc 54 00 00 	lea    0x54dc(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    2a5d:	ba 02 00 00 00       	mov    $0x2,%edx
    2a62:	48 89 c7             	mov    %rax,%rdi
    2a65:	49 89 c4             	mov    %rax,%r12
    2a68:	e8 13 f6 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2a6d:	8b 73 04             	mov    0x4(%rbx),%esi
    2a70:	4c 89 e7             	mov    %r12,%rdi
    2a73:	e8 08 f7 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    2a78:	48 8d 35 b9 54 00 00 	lea    0x54b9(%rip),%rsi        # 7f38 <_IO_stdin_used+0xd8>
    2a7f:	ba 03 00 00 00       	mov    $0x3,%edx
    2a84:	48 89 c7             	mov    %rax,%rdi
    2a87:	e8 f4 f5 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2a8c:	48 83 c3 20          	add    $0x20,%rbx
    2a90:	49 39 de             	cmp    %rbx,%r14
    2a93:	75 a3                	jne    2a38 <main+0x858>
    2a95:	4c 8d ac 24 10 01 00 	lea    0x110(%rsp),%r13
    2a9c:	00 
    2a9d:	48 c7 84 24 18 01 00 	movq   $0x0,0x118(%rsp)
    2aa4:	00 00 00 00 00 
    2aa9:	c6 84 24 20 01 00 00 	movb   $0x0,0x120(%rsp)
    2ab0:	00 
    2ab1:	49 8d 45 10          	lea    0x10(%r13),%rax
    2ab5:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
    2abc:	00 
    2abd:	48 8b 84 24 40 04 00 	mov    0x440(%rsp),%rax
    2ac4:	00 
    2ac5:	48 85 c0             	test   %rax,%rax
    2ac8:	0f 84 0a 05 00 00    	je     2fd8 <main+0xdf8>
    2ace:	48 8b 9c 24 30 04 00 	mov    0x430(%rsp),%rbx
    2ad5:	00 
    2ad6:	4c 8b a4 24 38 04 00 	mov    0x438(%rsp),%r12
    2add:	00 
    2ade:	48 39 d8             	cmp    %rbx,%rax
    2ae1:	0f 86 59 03 00 00    	jbe    2e40 <main+0xc60>
    2ae7:	4c 8d b4 24 50 01 00 	lea    0x150(%rsp),%r14
    2aee:	00 
    2aef:	4d 85 e4             	test   %r12,%r12
    2af2:	49 8d 56 10          	lea    0x10(%r14),%rdx
    2af6:	48 89 94 24 50 01 00 	mov    %rdx,0x150(%rsp)
    2afd:	00 
    2afe:	0f 84 42 08 00 00    	je     3346 <main+0x1166>
    2b04:	4c 29 e0             	sub    %r12,%rax
    2b07:	48 83 f8 0f          	cmp    $0xf,%rax
    2b0b:	48 89 c3             	mov    %rax,%rbx
    2b0e:	0f 87 dc 04 00 00    	ja     2ff0 <main+0xe10>
    2b14:	48 83 f8 01          	cmp    $0x1,%rax
    2b18:	0f 84 ea 05 00 00    	je     3108 <main+0xf28>
    2b1e:	48 85 c0             	test   %rax,%rax
    2b21:	0f 85 2b 08 00 00    	jne    3352 <main+0x1172>
    2b27:	48 89 9c 24 58 01 00 	mov    %rbx,0x158(%rsp)
    2b2e:	00 
    2b2f:	c6 04 1a 00          	movb   $0x0,(%rdx,%rbx,1)
    2b33:	49 8d 46 10          	lea    0x10(%r14),%rax
    2b37:	48 8b b4 24 50 01 00 	mov    0x150(%rsp),%rsi
    2b3e:	00 
    2b3f:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    2b46:	00 
    2b47:	48 8b 94 24 58 01 00 	mov    0x158(%rsp),%rdx
    2b4e:	00 
    2b4f:	48 39 c6             	cmp    %rax,%rsi
    2b52:	0f 84 70 05 00 00    	je     30c8 <main+0xee8>
    2b58:	49 8d 4d 10          	lea    0x10(%r13),%rcx
    2b5c:	48 8b 84 24 60 01 00 	mov    0x160(%rsp),%rax
    2b63:	00 
    2b64:	48 39 cf             	cmp    %rcx,%rdi
    2b67:	0f 84 e3 05 00 00    	je     3150 <main+0xf70>
    2b6d:	48 85 ff             	test   %rdi,%rdi
    2b70:	48 8b 8c 24 20 01 00 	mov    0x120(%rsp),%rcx
    2b77:	00 
    2b78:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
    2b7f:	00 
    2b80:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    2b87:	00 
    2b88:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
    2b8f:	00 
    2b90:	0f 84 d2 05 00 00    	je     3168 <main+0xf88>
    2b96:	48 89 bc 24 50 01 00 	mov    %rdi,0x150(%rsp)
    2b9d:	00 
    2b9e:	48 89 8c 24 60 01 00 	mov    %rcx,0x160(%rsp)
    2ba5:	00 
    2ba6:	48 c7 84 24 58 01 00 	movq   $0x0,0x158(%rsp)
    2bad:	00 00 00 00 00 
    2bb2:	c6 07 00             	movb   $0x0,(%rdi)
    2bb5:	49 83 c6 10          	add    $0x10,%r14
    2bb9:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
    2bc0:	00 
    2bc1:	4c 39 f7             	cmp    %r14,%rdi
    2bc4:	74 05                	je     2bcb <main+0x9eb>
    2bc6:	e8 65 f4 ff ff       	callq  2030 <operator delete(void*)@plt>
    2bcb:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2bd0:	48 8b 94 24 18 01 00 	mov    0x118(%rsp),%rdx
    2bd7:	00 
    2bd8:	48 8b b4 24 10 01 00 	mov    0x110(%rsp),%rsi
    2bdf:	00 
    2be0:	48 8d 78 10          	lea    0x10(%rax),%rdi
    2be4:	e8 97 f4 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2be9:	49 89 c4             	mov    %rax,%r12
    2bec:	48 8b 00             	mov    (%rax),%rax
    2bef:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2bf3:	49 8b 9c 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbx
    2bfa:	00 
    2bfb:	48 85 db             	test   %rbx,%rbx
    2bfe:	0f 84 71 07 00 00    	je     3375 <main+0x1195>
    2c04:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    2c08:	0f 84 22 03 00 00    	je     2f30 <main+0xd50>
    2c0e:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    2c12:	4c 89 e7             	mov    %r12,%rdi
    2c15:	e8 96 f2 ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    2c1a:	48 89 c7             	mov    %rax,%rdi
    2c1d:	e8 8e f3 ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    2c22:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    2c29:	00 
    2c2a:	49 83 c5 10          	add    $0x10,%r13
    2c2e:	4c 39 ef             	cmp    %r13,%rdi
    2c31:	74 05                	je     2c38 <main+0xa58>
    2c33:	e8 f8 f3 ff ff       	callq  2030 <operator delete(void*)@plt>
    2c38:	48 8b 84 24 d0 00 00 	mov    0xd0(%rsp),%rax
    2c3f:	00 
    2c40:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    2c45:	48 89 84 24 d8 00 00 	mov    %rax,0xd8(%rsp)
    2c4c:	00 
    2c4d:	e8 9e 1b 00 00       	callq  47f0 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()>
    2c52:	48 8d 05 1f 6e 20 00 	lea    0x206e1f(%rip),%rax        # 209a78 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    2c59:	48 8b bc 24 60 04 00 	mov    0x460(%rsp),%rdi
    2c60:	00 
    2c61:	66 0f 6f 64 24 40    	movdqa 0x40(%rsp),%xmm4
    2c67:	48 89 84 24 00 04 00 	mov    %rax,0x400(%rsp)
    2c6e:	00 
    2c6f:	48 83 c0 50          	add    $0x50,%rax
    2c73:	48 89 84 24 80 04 00 	mov    %rax,0x480(%rsp)
    2c7a:	00 
    2c7b:	48 8d 45 70          	lea    0x70(%rbp),%rax
    2c7f:	0f 29 a4 24 10 04 00 	movaps %xmm4,0x410(%rsp)
    2c86:	00 
    2c87:	48 39 c7             	cmp    %rax,%rdi
    2c8a:	74 05                	je     2c91 <main+0xab1>
    2c8c:	e8 9f f3 ff ff       	callq  2030 <operator delete(void*)@plt>
    2c91:	48 8d 05 d0 6c 20 00 	lea    0x206cd0(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    2c98:	48 8d 7d 50          	lea    0x50(%rbp),%rdi
    2c9c:	48 89 84 24 18 04 00 	mov    %rax,0x418(%rsp)
    2ca3:	00 
    2ca4:	e8 37 f4 ff ff       	callq  20e0 <std::locale::~locale()@plt>
    2ca9:	48 8b 05 e8 6b 20 00 	mov    0x206be8(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    2cb0:	48 8b 0d 09 6c 20 00 	mov    0x206c09(%rip),%rcx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    2cb7:	48 8d bd 80 00 00 00 	lea    0x80(%rbp),%rdi
    2cbe:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2cc2:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    2cc9:	00 
    2cca:	48 8b 05 df 6b 20 00 	mov    0x206bdf(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    2cd1:	48 8b 0d e0 6b 20 00 	mov    0x206be0(%rip),%rcx        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    2cd8:	48 89 84 24 10 04 00 	mov    %rax,0x410(%rsp)
    2cdf:	00 
    2ce0:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2ce4:	48 89 8c 04 10 04 00 	mov    %rcx,0x410(%rsp,%rax,1)
    2ceb:	00 
    2cec:	48 8b 05 ad 6b 20 00 	mov    0x206bad(%rip),%rax        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    2cf3:	48 8b 0d ae 6b 20 00 	mov    0x206bae(%rip),%rcx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    2cfa:	48 89 84 24 00 04 00 	mov    %rax,0x400(%rsp)
    2d01:	00 
    2d02:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    2d06:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    2d0d:	00 
    2d0e:	48 8d 05 1b 6b 20 00 	lea    0x206b1b(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    2d15:	48 c7 84 24 08 04 00 	movq   $0x0,0x408(%rsp)
    2d1c:	00 00 00 00 00 
    2d21:	48 89 84 24 80 04 00 	mov    %rax,0x480(%rsp)
    2d28:	00 
    2d29:	e8 e2 f1 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    2d2e:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
    2d35:	00 
    2d36:	48 85 ff             	test   %rdi,%rdi
    2d39:	0f 84 e9 00 00 00    	je     2e28 <main+0xc48>
    2d3f:	e8 ec f2 ff ff       	callq  2030 <operator delete(void*)@plt>
    2d44:	49 83 c7 08          	add    $0x8,%r15
    2d48:	4c 39 7c 24 50       	cmp    %r15,0x50(%rsp)
    2d4d:	0f 85 7d f8 ff ff    	jne    25d0 <main+0x3f0>
    2d53:	48 8d 3d e2 51 00 00 	lea    0x51e2(%rip),%rdi        # 7f3c <_IO_stdin_used+0xdc>
    2d5a:	e8 61 13 00 00       	callq  40c0 <std::char_traits<char>::length(char const*)>
    2d5f:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
    2d64:	48 8d 35 d1 51 00 00 	lea    0x51d1(%rip),%rsi        # 7f3c <_IO_stdin_used+0xdc>
    2d6b:	48 89 c2             	mov    %rax,%rdx
    2d6e:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    2d72:	e8 09 f3 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2d77:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    2d7c:	48 89 ef             	mov    %rbp,%rdi
    2d7f:	48 8d 70 18          	lea    0x18(%rax),%rsi
    2d83:	e8 98 f3 ff ff       	callq  2120 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const@plt>
    2d88:	48 8b 94 24 08 04 00 	mov    0x408(%rsp),%rdx
    2d8f:	00 
    2d90:	48 8b b4 24 00 04 00 	mov    0x400(%rsp),%rsi
    2d97:	00 
    2d98:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    2d9c:	e8 df f2 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    2da1:	48 89 c7             	mov    %rax,%rdi
    2da4:	e8 b7 f1 ff ff       	callq  1f60 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
    2da9:	48 8b bc 24 00 04 00 	mov    0x400(%rsp),%rdi
    2db0:	00 
    2db1:	48 83 c5 10          	add    $0x10,%rbp
    2db5:	48 39 ef             	cmp    %rbp,%rdi
    2db8:	74 05                	je     2dbf <main+0xbdf>
    2dba:	e8 71 f2 ff ff       	callq  2030 <operator delete(void*)@plt>
    2dbf:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    2dc4:	e8 07 f2 ff ff       	callq  1fd0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>
    2dc9:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    2dce:	e8 fd f0 ff ff       	callq  1ed0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
    2dd3:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    2dd8:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
    2ddf:	00 
    2de0:	48 83 c0 10          	add    $0x10,%rax
    2de4:	48 39 c7             	cmp    %rax,%rdi
    2de7:	74 05                	je     2dee <main+0xc0e>
    2de9:	e8 42 f2 ff ff       	callq  2030 <operator delete(void*)@plt>
    2dee:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    2df3:	e8 08 18 00 00       	callq  4600 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>
    2df8:	31 c0                	xor    %eax,%eax
    2dfa:	48 8b 8c 24 a8 07 00 	mov    0x7a8(%rsp),%rcx
    2e01:	00 
    2e02:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    2e09:	00 00 
    2e0b:	0f 85 86 05 00 00    	jne    3397 <main+0x11b7>
    2e11:	48 81 c4 b8 07 00 00 	add    $0x7b8,%rsp
    2e18:	5b                   	pop    %rbx
    2e19:	5d                   	pop    %rbp
    2e1a:	41 5c                	pop    %r12
    2e1c:	41 5d                	pop    %r13
    2e1e:	41 5e                	pop    %r14
    2e20:	41 5f                	pop    %r15
    2e22:	c3                   	retq   
    2e23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2e28:	49 83 c7 08          	add    $0x8,%r15
    2e2c:	4c 39 7c 24 50       	cmp    %r15,0x50(%rsp)
    2e31:	0f 85 99 f7 ff ff    	jne    25d0 <main+0x3f0>
    2e37:	e9 17 ff ff ff       	jmpq   2d53 <main+0xb73>
    2e3c:	0f 1f 40 00          	nopl   0x0(%rax)
    2e40:	4c 8d b4 24 30 01 00 	lea    0x130(%rsp),%r14
    2e47:	00 
    2e48:	48 85 db             	test   %rbx,%rbx
    2e4b:	49 8d 46 10          	lea    0x10(%r14),%rax
    2e4f:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
    2e56:	00 
    2e57:	74 09                	je     2e62 <main+0xc82>
    2e59:	4d 85 e4             	test   %r12,%r12
    2e5c:	0f 84 3a 05 00 00    	je     339c <main+0x11bc>
    2e62:	4c 29 e3             	sub    %r12,%rbx
    2e65:	48 83 fb 0f          	cmp    $0xf,%rbx
    2e69:	0f 87 c1 01 00 00    	ja     3030 <main+0xe50>
    2e6f:	48 83 fb 01          	cmp    $0x1,%rbx
    2e73:	0f 84 f7 01 00 00    	je     3070 <main+0xe90>
    2e79:	48 85 db             	test   %rbx,%rbx
    2e7c:	49 8d 46 10          	lea    0x10(%r14),%rax
    2e80:	0f 85 cc 01 00 00    	jne    3052 <main+0xe72>
    2e86:	48 89 9c 24 38 01 00 	mov    %rbx,0x138(%rsp)
    2e8d:	00 
    2e8e:	c6 04 18 00          	movb   $0x0,(%rax,%rbx,1)
    2e92:	49 8d 46 10          	lea    0x10(%r14),%rax
    2e96:	48 8b b4 24 30 01 00 	mov    0x130(%rsp),%rsi
    2e9d:	00 
    2e9e:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    2ea5:	00 
    2ea6:	48 8b 94 24 38 01 00 	mov    0x138(%rsp),%rdx
    2ead:	00 
    2eae:	48 39 c6             	cmp    %rax,%rsi
    2eb1:	0f 84 d1 01 00 00    	je     3088 <main+0xea8>
    2eb7:	49 8d 4d 10          	lea    0x10(%r13),%rcx
    2ebb:	48 8b 84 24 40 01 00 	mov    0x140(%rsp),%rax
    2ec2:	00 
    2ec3:	48 39 cf             	cmp    %rcx,%rdi
    2ec6:	0f 84 54 02 00 00    	je     3120 <main+0xf40>
    2ecc:	48 85 ff             	test   %rdi,%rdi
    2ecf:	48 8b 8c 24 20 01 00 	mov    0x120(%rsp),%rcx
    2ed6:	00 
    2ed7:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
    2ede:	00 
    2edf:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    2ee6:	00 
    2ee7:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
    2eee:	00 
    2eef:	0f 84 43 02 00 00    	je     3138 <main+0xf58>
    2ef5:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
    2efc:	00 
    2efd:	48 89 8c 24 40 01 00 	mov    %rcx,0x140(%rsp)
    2f04:	00 
    2f05:	48 c7 84 24 38 01 00 	movq   $0x0,0x138(%rsp)
    2f0c:	00 00 00 00 00 
    2f11:	c6 07 00             	movb   $0x0,(%rdi)
    2f14:	49 83 c6 10          	add    $0x10,%r14
    2f18:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
    2f1f:	00 
    2f20:	4c 39 f7             	cmp    %r14,%rdi
    2f23:	0f 85 9d fc ff ff    	jne    2bc6 <main+0x9e6>
    2f29:	e9 9d fc ff ff       	jmpq   2bcb <main+0x9eb>
    2f2e:	66 90                	xchg   %ax,%ax
    2f30:	48 89 df             	mov    %rbx,%rdi
    2f33:	e8 58 f1 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    2f38:	48 8b 03             	mov    (%rbx),%rax
    2f3b:	48 8d 15 ee 10 00 00 	lea    0x10ee(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    2f42:	be 0a 00 00 00       	mov    $0xa,%esi
    2f47:	48 8b 40 30          	mov    0x30(%rax),%rax
    2f4b:	48 39 d0             	cmp    %rdx,%rax
    2f4e:	0f 84 be fc ff ff    	je     2c12 <main+0xa32>
    2f54:	48 89 df             	mov    %rbx,%rdi
    2f57:	ff d0                	callq  *%rax
    2f59:	0f be f0             	movsbl %al,%esi
    2f5c:	e9 b1 fc ff ff       	jmpq   2c12 <main+0xa32>
    2f61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2f68:	48 89 df             	mov    %rbx,%rdi
    2f6b:	e8 20 f1 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    2f70:	48 8b 03             	mov    (%rbx),%rax
    2f73:	48 8d 15 b6 10 00 00 	lea    0x10b6(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    2f7a:	be 0a 00 00 00       	mov    $0xa,%esi
    2f7f:	48 8b 40 30          	mov    0x30(%rax),%rax
    2f83:	48 39 d0             	cmp    %rdx,%rax
    2f86:	0f 84 7f f9 ff ff    	je     290b <main+0x72b>
    2f8c:	48 89 df             	mov    %rbx,%rdi
    2f8f:	ff d0                	callq  *%rax
    2f91:	0f be f0             	movsbl %al,%esi
    2f94:	e9 72 f9 ff ff       	jmpq   290b <main+0x72b>
    2f99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2fa0:	48 89 df             	mov    %rbx,%rdi
    2fa3:	e8 e8 f0 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    2fa8:	48 8b 03             	mov    (%rbx),%rax
    2fab:	48 8d 15 7e 10 00 00 	lea    0x107e(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    2fb2:	be 0a 00 00 00       	mov    $0xa,%esi
    2fb7:	48 8b 40 30          	mov    0x30(%rax),%rax
    2fbb:	48 39 d0             	cmp    %rdx,%rax
    2fbe:	0f 84 aa f8 ff ff    	je     286e <main+0x68e>
    2fc4:	48 89 df             	mov    %rbx,%rdi
    2fc7:	ff d0                	callq  *%rax
    2fc9:	0f be f0             	movsbl %al,%esi
    2fcc:	e9 9d f8 ff ff       	jmpq   286e <main+0x68e>
    2fd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2fd8:	48 8d 75 60          	lea    0x60(%rbp),%rsi
    2fdc:	4c 89 ef             	mov    %r13,%rdi
    2fdf:	e8 3c 25 00 00       	callq  5520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    2fe4:	e9 e2 fb ff ff       	jmpq   2bcb <main+0x9eb>
    2fe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2ff0:	48 85 c0             	test   %rax,%rax
    2ff3:	0f 88 b1 03 00 00    	js     33aa <main+0x11ca>
    2ff9:	48 8d 78 01          	lea    0x1(%rax),%rdi
    2ffd:	e8 3e f0 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    3002:	48 89 84 24 50 01 00 	mov    %rax,0x150(%rsp)
    3009:	00 
    300a:	48 89 9c 24 60 01 00 	mov    %rbx,0x160(%rsp)
    3011:	00 
    3012:	48 89 da             	mov    %rbx,%rdx
    3015:	4c 89 e6             	mov    %r12,%rsi
    3018:	48 89 c7             	mov    %rax,%rdi
    301b:	e8 e0 ef ff ff       	callq  2000 <memcpy@plt>
    3020:	48 8b 94 24 50 01 00 	mov    0x150(%rsp),%rdx
    3027:	00 
    3028:	e9 fa fa ff ff       	jmpq   2b27 <main+0x947>
    302d:	0f 1f 00             	nopl   (%rax)
    3030:	48 85 db             	test   %rbx,%rbx
    3033:	0f 88 af 01 00 00    	js     31e8 <main+0x1008>
    3039:	48 8d 7b 01          	lea    0x1(%rbx),%rdi
    303d:	e8 fe ef ff ff       	callq  2040 <operator new(unsigned long)@plt>
    3042:	48 89 84 24 30 01 00 	mov    %rax,0x130(%rsp)
    3049:	00 
    304a:	48 89 9c 24 40 01 00 	mov    %rbx,0x140(%rsp)
    3051:	00 
    3052:	48 89 da             	mov    %rbx,%rdx
    3055:	4c 89 e6             	mov    %r12,%rsi
    3058:	48 89 c7             	mov    %rax,%rdi
    305b:	e8 a0 ef ff ff       	callq  2000 <memcpy@plt>
    3060:	48 8b 84 24 30 01 00 	mov    0x130(%rsp),%rax
    3067:	00 
    3068:	e9 19 fe ff ff       	jmpq   2e86 <main+0xca6>
    306d:	0f 1f 00             	nopl   (%rax)
    3070:	41 0f b6 04 24       	movzbl (%r12),%eax
    3075:	88 84 24 40 01 00 00 	mov    %al,0x140(%rsp)
    307c:	49 8d 46 10          	lea    0x10(%r14),%rax
    3080:	e9 01 fe ff ff       	jmpq   2e86 <main+0xca6>
    3085:	0f 1f 00             	nopl   (%rax)
    3088:	48 85 d2             	test   %rdx,%rdx
    308b:	74 1f                	je     30ac <main+0xecc>
    308d:	48 83 fa 01          	cmp    $0x1,%rdx
    3091:	0f 84 32 01 00 00    	je     31c9 <main+0xfe9>
    3097:	e8 64 ef ff ff       	callq  2000 <memcpy@plt>
    309c:	48 8b 94 24 38 01 00 	mov    0x138(%rsp),%rdx
    30a3:	00 
    30a4:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    30ab:	00 
    30ac:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    30b3:	00 
    30b4:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
    30b8:	48 8b bc 24 30 01 00 	mov    0x130(%rsp),%rdi
    30bf:	00 
    30c0:	e9 40 fe ff ff       	jmpq   2f05 <main+0xd25>
    30c5:	0f 1f 00             	nopl   (%rax)
    30c8:	48 85 d2             	test   %rdx,%rdx
    30cb:	74 1f                	je     30ec <main+0xf0c>
    30cd:	48 83 fa 01          	cmp    $0x1,%rdx
    30d1:	0f 84 d3 00 00 00    	je     31aa <main+0xfca>
    30d7:	e8 24 ef ff ff       	callq  2000 <memcpy@plt>
    30dc:	48 8b 94 24 58 01 00 	mov    0x158(%rsp),%rdx
    30e3:	00 
    30e4:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    30eb:	00 
    30ec:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    30f3:	00 
    30f4:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
    30f8:	48 8b bc 24 50 01 00 	mov    0x150(%rsp),%rdi
    30ff:	00 
    3100:	e9 a1 fa ff ff       	jmpq   2ba6 <main+0x9c6>
    3105:	0f 1f 00             	nopl   (%rax)
    3108:	41 0f b6 04 24       	movzbl (%r12),%eax
    310d:	88 84 24 60 01 00 00 	mov    %al,0x160(%rsp)
    3114:	e9 0e fa ff ff       	jmpq   2b27 <main+0x947>
    3119:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3120:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
    3127:	00 
    3128:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    312f:	00 
    3130:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
    3137:	00 
    3138:	49 8d 7e 10          	lea    0x10(%r14),%rdi
    313c:	48 89 bc 24 30 01 00 	mov    %rdi,0x130(%rsp)
    3143:	00 
    3144:	e9 bc fd ff ff       	jmpq   2f05 <main+0xd25>
    3149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3150:	48 89 b4 24 10 01 00 	mov    %rsi,0x110(%rsp)
    3157:	00 
    3158:	48 89 94 24 18 01 00 	mov    %rdx,0x118(%rsp)
    315f:	00 
    3160:	48 89 84 24 20 01 00 	mov    %rax,0x120(%rsp)
    3167:	00 
    3168:	49 8d 7e 10          	lea    0x10(%r14),%rdi
    316c:	48 89 bc 24 50 01 00 	mov    %rdi,0x150(%rsp)
    3173:	00 
    3174:	e9 2d fa ff ff       	jmpq   2ba6 <main+0x9c6>
    3179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3180:	48 89 df             	mov    %rbx,%rdi
    3183:	e8 08 ef ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    3188:	48 8b 03             	mov    (%rbx),%rax
    318b:	be 0a 00 00 00       	mov    $0xa,%esi
    3190:	48 8b 40 30          	mov    0x30(%rax),%rax
    3194:	4c 39 f8             	cmp    %r15,%rax
    3197:	0f 84 4e f1 ff ff    	je     22eb <main+0x10b>
    319d:	48 89 df             	mov    %rbx,%rdi
    31a0:	ff d0                	callq  *%rax
    31a2:	0f be f0             	movsbl %al,%esi
    31a5:	e9 41 f1 ff ff       	jmpq   22eb <main+0x10b>
    31aa:	0f b6 84 24 60 01 00 	movzbl 0x160(%rsp),%eax
    31b1:	00 
    31b2:	88 07                	mov    %al,(%rdi)
    31b4:	48 8b 94 24 58 01 00 	mov    0x158(%rsp),%rdx
    31bb:	00 
    31bc:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    31c3:	00 
    31c4:	e9 23 ff ff ff       	jmpq   30ec <main+0xf0c>
    31c9:	0f b6 84 24 40 01 00 	movzbl 0x140(%rsp),%eax
    31d0:	00 
    31d1:	88 07                	mov    %al,(%rdi)
    31d3:	48 8b 94 24 38 01 00 	mov    0x138(%rsp),%rdx
    31da:	00 
    31db:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    31e2:	00 
    31e3:	e9 c4 fe ff ff       	jmpq   30ac <main+0xecc>
    31e8:	48 8d 3d d9 4c 00 00 	lea    0x4cd9(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    31ef:	e8 7c ed ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    31f4:	48 89 c3             	mov    %rax,%rbx
    31f7:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    31fc:	e8 ff 13 00 00       	callq  4600 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>
    3201:	48 89 df             	mov    %rbx,%rdi
    3204:	e8 87 ef ff ff       	callq  2190 <_Unwind_Resume@plt>
    3209:	e8 92 ee ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    320e:	48 89 c3             	mov    %rax,%rbx
    3211:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    3216:	48 8b bc 24 f0 00 00 	mov    0xf0(%rsp),%rdi
    321d:	00 
    321e:	48 83 c0 10          	add    $0x10,%rax
    3222:	48 39 c7             	cmp    %rax,%rdi
    3225:	74 d0                	je     31f7 <main+0x1017>
    3227:	e8 04 ee ff ff       	callq  2030 <operator delete(void*)@plt>
    322c:	eb c9                	jmp    31f7 <main+0x1017>
    322e:	48 89 c3             	mov    %rax,%rbx
    3231:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    3236:	e8 95 ec ff ff       	callq  1ed0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
    323b:	eb d4                	jmp    3211 <main+0x1031>
    323d:	48 89 c3             	mov    %rax,%rbx
    3240:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    3245:	e8 86 ed ff ff       	callq  1fd0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>
    324a:	eb e5                	jmp    3231 <main+0x1051>
    324c:	48 89 c3             	mov    %rax,%rbx
    324f:	48 8d 05 da 65 20 00 	lea    0x2065da(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3256:	48 8d bd 80 00 00 00 	lea    0x80(%rbp),%rdi
    325d:	48 89 84 24 80 04 00 	mov    %rax,0x480(%rsp)
    3264:	00 
    3265:	e8 a6 ec ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    326a:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
    3271:	00 
    3272:	48 85 ff             	test   %rdi,%rdi
    3275:	74 c9                	je     3240 <main+0x1060>
    3277:	e8 b4 ed ff ff       	callq  2030 <operator delete(void*)@plt>
    327c:	eb c2                	jmp    3240 <main+0x1060>
    327e:	48 8b 0d 1b 66 20 00 	mov    0x20661b(%rip),%rcx        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    3285:	48 89 c3             	mov    %rax,%rbx
    3288:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    328c:	48 89 8c 24 00 04 00 	mov    %rcx,0x400(%rsp)
    3293:	00 
    3294:	48 8b 0d 0d 66 20 00 	mov    0x20660d(%rip),%rcx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    329b:	48 89 8c 14 00 04 00 	mov    %rcx,0x400(%rsp,%rdx,1)
    32a2:	00 
    32a3:	48 c7 84 24 08 04 00 	movq   $0x0,0x408(%rsp)
    32aa:	00 00 00 00 00 
    32af:	eb 9e                	jmp    324f <main+0x106f>
    32b1:	48 8d 7d 18          	lea    0x18(%rbp),%rdi
    32b5:	48 89 c3             	mov    %rax,%rbx
    32b8:	e8 b3 12 00 00       	callq  4570 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    32bd:	48 8b 05 d4 65 20 00 	mov    0x2065d4(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    32c4:	48 8b 0d f5 65 20 00 	mov    0x2065f5(%rip),%rcx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    32cb:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    32cf:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    32d6:	00 
    32d7:	48 8b 05 d2 65 20 00 	mov    0x2065d2(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    32de:	48 8b 0d d3 65 20 00 	mov    0x2065d3(%rip),%rcx        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    32e5:	48 89 84 24 10 04 00 	mov    %rax,0x410(%rsp)
    32ec:	00 
    32ed:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    32f1:	48 89 8c 04 10 04 00 	mov    %rcx,0x410(%rsp,%rax,1)
    32f8:	00 
    32f9:	48 8b 05 a0 65 20 00 	mov    0x2065a0(%rip),%rax        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    3300:	48 8b 0d a1 65 20 00 	mov    0x2065a1(%rip),%rcx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    3307:	48 89 84 24 00 04 00 	mov    %rax,0x400(%rsp)
    330e:	00 
    330f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3313:	48 89 8c 04 00 04 00 	mov    %rcx,0x400(%rsp,%rax,1)
    331a:	00 
    331b:	48 c7 84 24 08 04 00 	movq   $0x0,0x408(%rsp)
    3322:	00 00 00 00 00 
    3327:	e9 23 ff ff ff       	jmpq   324f <main+0x106f>
    332c:	48 89 c3             	mov    %rax,%rbx
    332f:	48 89 ef             	mov    %rbp,%rdi
    3332:	e8 99 ec ff ff       	callq  1fd0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>
    3337:	e9 2e ff ff ff       	jmpq   326a <main+0x108a>
    333c:	e8 5f ed ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    3341:	e8 5a ed ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    3346:	48 8d 3d 4b 4b 00 00 	lea    0x4b4b(%rip),%rdi        # 7e98 <_IO_stdin_used+0x38>
    334d:	e8 6e ec ff ff       	callq  1fc0 <std::__throw_logic_error(char const*)@plt>
    3352:	48 89 d0             	mov    %rdx,%rax
    3355:	e9 b8 fc ff ff       	jmpq   3012 <main+0xe32>
    335a:	48 8b bc 24 10 01 00 	mov    0x110(%rsp),%rdi
    3361:	00 
    3362:	49 83 c5 10          	add    $0x10,%r13
    3366:	48 89 c3             	mov    %rax,%rbx
    3369:	4c 39 ef             	cmp    %r13,%rdi
    336c:	74 c1                	je     332f <main+0x114f>
    336e:	e8 bd ec ff ff       	callq  2030 <operator delete(void*)@plt>
    3373:	eb ba                	jmp    332f <main+0x114f>
    3375:	e8 26 ed ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    337a:	48 8b bc 24 00 04 00 	mov    0x400(%rsp),%rdi
    3381:	00 
    3382:	48 83 c5 10          	add    $0x10,%rbp
    3386:	48 89 c3             	mov    %rax,%rbx
    3389:	48 39 ef             	cmp    %rbp,%rdi
    338c:	0f 85 e5 fe ff ff    	jne    3277 <main+0x1097>
    3392:	e9 a9 fe ff ff       	jmpq   3240 <main+0x1060>
    3397:	e8 d4 ec ff ff       	callq  2070 <__stack_chk_fail@plt>
    339c:	48 8d 3d f5 4a 00 00 	lea    0x4af5(%rip),%rdi        # 7e98 <_IO_stdin_used+0x38>
    33a3:	e8 18 ec ff ff       	callq  1fc0 <std::__throw_logic_error(char const*)@plt>
    33a8:	eb b0                	jmp    335a <main+0x117a>
    33aa:	48 8d 3d 17 4b 00 00 	lea    0x4b17(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    33b1:	e8 ba eb ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    33b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    33bd:	00 00 00 

00000000000033c0 <_GLOBAL__sub_I_main>:
    33c0:	53                   	push   %rbx
    33c1:	48 8d 3d 90 6d 20 00 	lea    0x206d90(%rip),%rdi        # 20a158 <std::__ioinit>
    33c8:	e8 33 ed ff ff       	callq  2100 <std::ios_base::Init::Init()@plt>
    33cd:	48 8b 3d 0c 6c 20 00 	mov    0x206c0c(%rip),%rdi        # 209fe0 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    33d4:	48 8d 15 2d 6c 20 00 	lea    0x206c2d(%rip),%rdx        # 20a008 <__dso_handle>
    33db:	48 8d 35 76 6d 20 00 	lea    0x206d76(%rip),%rsi        # 20a158 <std::__ioinit>
    33e2:	e8 29 ec ff ff       	callq  2010 <__cxa_atexit@plt>
    33e7:	66 0f ef c0          	pxor   %xmm0,%xmm0
    33eb:	bf 40 00 00 00       	mov    $0x40,%edi
    33f0:	48 c7 05 55 6d 20 00 	movq   $0x0,0x206d55(%rip)        # 20a150 <directions+0x10>
    33f7:	00 00 00 00 
    33fb:	0f 29 05 3e 6d 20 00 	movaps %xmm0,0x206d3e(%rip)        # 20a140 <directions>
    3402:	e8 39 ec ff ff       	callq  2040 <operator new(unsigned long)@plt>
    3407:	48 8d 50 40          	lea    0x40(%rax),%rdx
    340b:	48 8d 35 2e 6d 20 00 	lea    0x206d2e(%rip),%rsi        # 20a140 <directions>
    3412:	48 8d 3d 27 0c 00 00 	lea    0xc27(%rip),%rdi        # 4040 <std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()>
    3419:	66 0f 6f 05 bf 4b 00 	movdqa 0x4bbf(%rip),%xmm0        # 7fe0 <._96>
    3420:	00 
    3421:	48 89 15 28 6d 20 00 	mov    %rdx,0x206d28(%rip)        # 20a150 <directions+0x10>
    3428:	48 89 15 19 6d 20 00 	mov    %rdx,0x206d19(%rip)        # 20a148 <directions+0x8>
    342f:	48 8d 15 d2 6b 20 00 	lea    0x206bd2(%rip),%rdx        # 20a008 <__dso_handle>
    3436:	0f 11 00             	movups %xmm0,(%rax)
    3439:	48 89 05 00 6d 20 00 	mov    %rax,0x206d00(%rip)        # 20a140 <directions>
    3440:	66 0f 6f 05 a8 4b 00 	movdqa 0x4ba8(%rip),%xmm0        # 7ff0 <._96+0x10>
    3447:	00 
    3448:	0f 11 40 10          	movups %xmm0,0x10(%rax)
    344c:	66 0f 6f 05 ac 4b 00 	movdqa 0x4bac(%rip),%xmm0        # 8000 <._96+0x20>
    3453:	00 
    3454:	0f 11 40 20          	movups %xmm0,0x20(%rax)
    3458:	66 0f 6f 05 b0 4b 00 	movdqa 0x4bb0(%rip),%xmm0        # 8010 <._96+0x30>
    345f:	00 
    3460:	0f 11 40 30          	movups %xmm0,0x30(%rax)
    3464:	5b                   	pop    %rbx
    3465:	e9 a6 eb ff ff       	jmpq   2010 <__cxa_atexit@plt>
    346a:	48 8b 3d cf 6c 20 00 	mov    0x206ccf(%rip),%rdi        # 20a140 <directions>
    3471:	48 89 c3             	mov    %rax,%rbx
    3474:	48 85 ff             	test   %rdi,%rdi
    3477:	74 05                	je     347e <_GLOBAL__sub_I_main+0xbe>
    3479:	e8 b2 eb ff ff       	callq  2030 <operator delete(void*)@plt>
    347e:	48 89 df             	mov    %rbx,%rdi
    3481:	e8 0a ed ff ff       	callq  2190 <_Unwind_Resume@plt>
    3486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    348d:	00 00 00 

0000000000003490 <_start>:
    3490:	31 ed                	xor    %ebp,%ebp
    3492:	49 89 d1             	mov    %rdx,%r9
    3495:	5e                   	pop    %rsi
    3496:	48 89 e2             	mov    %rsp,%rdx
    3499:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    349d:	50                   	push   %rax
    349e:	54                   	push   %rsp
    349f:	4c 8d 05 9a 49 00 00 	lea    0x499a(%rip),%r8        # 7e40 <__libc_csu_fini>
    34a6:	48 8d 0d 23 49 00 00 	lea    0x4923(%rip),%rcx        # 7dd0 <__libc_csu_init>
    34ad:	48 8d 3d 2c ed ff ff 	lea    -0x12d4(%rip),%rdi        # 21e0 <main>
    34b4:	ff 15 0e 6b 20 00    	callq  *0x206b0e(%rip)        # 209fc8 <__libc_start_main@GLIBC_2.2.5>
    34ba:	f4                   	hlt    
    34bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000034c0 <deregister_tm_clones>:
    34c0:	48 8d 3d 51 6b 20 00 	lea    0x206b51(%rip),%rdi        # 20a018 <__TMC_END__>
    34c7:	55                   	push   %rbp
    34c8:	48 8d 05 49 6b 20 00 	lea    0x206b49(%rip),%rax        # 20a018 <__TMC_END__>
    34cf:	48 39 f8             	cmp    %rdi,%rax
    34d2:	48 89 e5             	mov    %rsp,%rbp
    34d5:	74 19                	je     34f0 <deregister_tm_clones+0x30>
    34d7:	48 8b 05 e2 6a 20 00 	mov    0x206ae2(%rip),%rax        # 209fc0 <_ITM_deregisterTMCloneTable>
    34de:	48 85 c0             	test   %rax,%rax
    34e1:	74 0d                	je     34f0 <deregister_tm_clones+0x30>
    34e3:	5d                   	pop    %rbp
    34e4:	ff e0                	jmpq   *%rax
    34e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34ed:	00 00 00 
    34f0:	5d                   	pop    %rbp
    34f1:	c3                   	retq   
    34f2:	0f 1f 40 00          	nopl   0x0(%rax)
    34f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    34fd:	00 00 00 

0000000000003500 <register_tm_clones>:
    3500:	48 8d 3d 11 6b 20 00 	lea    0x206b11(%rip),%rdi        # 20a018 <__TMC_END__>
    3507:	48 8d 35 0a 6b 20 00 	lea    0x206b0a(%rip),%rsi        # 20a018 <__TMC_END__>
    350e:	55                   	push   %rbp
    350f:	48 29 fe             	sub    %rdi,%rsi
    3512:	48 89 e5             	mov    %rsp,%rbp
    3515:	48 c1 fe 03          	sar    $0x3,%rsi
    3519:	48 89 f0             	mov    %rsi,%rax
    351c:	48 c1 e8 3f          	shr    $0x3f,%rax
    3520:	48 01 c6             	add    %rax,%rsi
    3523:	48 d1 fe             	sar    %rsi
    3526:	74 18                	je     3540 <register_tm_clones+0x40>
    3528:	48 8b 05 a9 6a 20 00 	mov    0x206aa9(%rip),%rax        # 209fd8 <_ITM_registerTMCloneTable>
    352f:	48 85 c0             	test   %rax,%rax
    3532:	74 0c                	je     3540 <register_tm_clones+0x40>
    3534:	5d                   	pop    %rbp
    3535:	ff e0                	jmpq   *%rax
    3537:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    353e:	00 00 
    3540:	5d                   	pop    %rbp
    3541:	c3                   	retq   
    3542:	0f 1f 40 00          	nopl   0x0(%rax)
    3546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    354d:	00 00 00 

0000000000003550 <__do_global_dtors_aux>:
    3550:	80 3d d9 6b 20 00 00 	cmpb   $0x0,0x206bd9(%rip)        # 20a130 <completed.7698>
    3557:	75 2f                	jne    3588 <__do_global_dtors_aux+0x38>
    3559:	48 83 3d 57 6a 20 00 	cmpq   $0x0,0x206a57(%rip)        # 209fb8 <__cxa_finalize@GLIBC_2.2.5>
    3560:	00 
    3561:	55                   	push   %rbp
    3562:	48 89 e5             	mov    %rsp,%rbp
    3565:	74 0c                	je     3573 <__do_global_dtors_aux+0x23>
    3567:	48 8b 3d 9a 6a 20 00 	mov    0x206a9a(%rip),%rdi        # 20a008 <__dso_handle>
    356e:	e8 5d ec ff ff       	callq  21d0 <__cxa_finalize@plt>
    3573:	e8 48 ff ff ff       	callq  34c0 <deregister_tm_clones>
    3578:	c6 05 b1 6b 20 00 01 	movb   $0x1,0x206bb1(%rip)        # 20a130 <completed.7698>
    357f:	5d                   	pop    %rbp
    3580:	c3                   	retq   
    3581:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3588:	f3 c3                	repz retq 
    358a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003590 <frame_dummy>:
    3590:	55                   	push   %rbp
    3591:	48 89 e5             	mov    %rsp,%rbp
    3594:	5d                   	pop    %rbp
    3595:	e9 66 ff ff ff       	jmpq   3500 <register_tm_clones>
    359a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000035a0 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)>:
    35a0:	41 57                	push   %r15
    35a2:	41 56                	push   %r14
    35a4:	49 89 f6             	mov    %rsi,%r14
    35a7:	41 55                	push   %r13
    35a9:	41 54                	push   %r12
    35ab:	55                   	push   %rbp
    35ac:	53                   	push   %rbx
    35ad:	48 89 fb             	mov    %rdi,%rbx
    35b0:	48 81 ec 18 04 00 00 	sub    $0x418,%rsp
    35b7:	4c 8d a4 24 f0 01 00 	lea    0x1f0(%rsp),%r12
    35be:	00 
    35bf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    35c6:	00 00 
    35c8:	48 89 84 24 08 04 00 	mov    %rax,0x408(%rsp)
    35cf:	00 
    35d0:	31 c0                	xor    %eax,%eax
    35d2:	49 8d bc 24 08 01 00 	lea    0x108(%r12),%rdi
    35d9:	00 
    35da:	e8 21 e9 ff ff       	callq  1f00 <std::ios_base::ios_base()@plt>
    35df:	48 8d 05 4a 62 20 00 	lea    0x20624a(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    35e6:	66 0f ef c0          	pxor   %xmm0,%xmm0
    35ea:	c6 84 24 d8 03 00 00 	movb   $0x0,0x3d8(%rsp)
    35f1:	00 
    35f2:	48 8b 0d ff 63 20 00 	mov    0x2063ff(%rip),%rcx        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    35f9:	31 f6                	xor    %esi,%esi
    35fb:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    3602:	00 
    3603:	48 8b 05 e6 63 20 00 	mov    0x2063e6(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    360a:	0f 29 84 24 e0 03 00 	movaps %xmm0,0x3e0(%rsp)
    3611:	00 
    3612:	48 c7 84 24 d0 03 00 	movq   $0x0,0x3d0(%rsp)
    3619:	00 00 00 00 00 
    361e:	c6 84 24 d9 03 00 00 	movb   $0x0,0x3d9(%rsp)
    3625:	00 
    3626:	0f 29 84 24 f0 03 00 	movaps %xmm0,0x3f0(%rsp)
    362d:	00 
    362e:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    3635:	00 
    3636:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    363a:	48 89 8c 04 f0 01 00 	mov    %rcx,0x1f0(%rsp,%rax,1)
    3641:	00 
    3642:	48 8b 05 a7 63 20 00 	mov    0x2063a7(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3649:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
    3650:	00 00 00 00 00 
    3655:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    3659:	4c 01 e7             	add    %r12,%rdi
    365c:	e8 6f ea ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    3661:	48 8b 05 98 63 20 00 	mov    0x206398(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    3668:	31 f6                	xor    %esi,%esi
    366a:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
    3671:	00 
    3672:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3676:	49 8d 7c 04 10       	lea    0x10(%r12,%rax,1),%rdi
    367b:	48 8b 05 86 63 20 00 	mov    0x206386(%rip),%rax        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    3682:	48 89 07             	mov    %rax,(%rdi)
    3685:	e8 46 ea ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    368a:	48 8b 05 57 63 20 00 	mov    0x206357(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    3691:	48 8b 0d 78 63 20 00 	mov    0x206378(%rip),%rcx        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    3698:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    369d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    36a1:	48 89 8c 04 f0 01 00 	mov    %rcx,0x1f0(%rsp,%rax,1)
    36a8:	00 
    36a9:	48 8d 05 48 62 20 00 	lea    0x206248(%rip),%rax        # 2098f8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    36b0:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    36b7:	00 
    36b8:	48 83 c0 50          	add    $0x50,%rax
    36bc:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    36c3:	00 
    36c4:	48 83 e8 28          	sub    $0x28,%rax
    36c8:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
    36cf:	00 
    36d0:	e8 8b e9 ff ff       	callq  2060 <std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@plt>
    36d5:	49 8d 74 24 18       	lea    0x18(%r12),%rsi
    36da:	49 8d bc 24 08 01 00 	lea    0x108(%r12),%rdi
    36e1:	00 
    36e2:	e8 e9 e9 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    36e7:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    36ec:	ba 08 00 00 00       	mov    $0x8,%edx
    36f1:	48 89 de             	mov    %rbx,%rsi
    36f4:	e8 27 e9 ff ff       	callq  2020 <std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@plt>
    36f9:	48 8b 94 24 f0 01 00 	mov    0x1f0(%rsp),%rdx
    3700:	00 
    3701:	48 8b 7a e8          	mov    -0x18(%rdx),%rdi
    3705:	4c 01 e7             	add    %r12,%rdi
    3708:	48 85 c0             	test   %rax,%rax
    370b:	0f 84 cf 06 00 00    	je     3de0 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x840>
    3711:	31 f6                	xor    %esi,%esi
    3713:	e8 58 ea ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    3718:	49 8d bc 24 80 00 00 	lea    0x80(%r12),%rdi
    371f:	00 
    3720:	e8 cb e7 ff ff       	callq  1ef0 <std::__basic_file<char>::is_open() const@plt>
    3725:	84 c0                	test   %al,%al
    3727:	0f 84 03 06 00 00    	je     3d30 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x790>
    372d:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    3732:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
    3739:	00 00 
    373b:	c6 44 24 60 00       	movb   $0x0,0x60(%rsp)
    3740:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3745:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
    374a:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    374f:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
    3756:	00 
    3757:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    375b:	48 8b ac 04 e0 02 00 	mov    0x2e0(%rsp,%rax,1),%rbp
    3762:	00 
    3763:	48 85 ed             	test   %rbp,%rbp
    3766:	0f 84 a6 03 00 00    	je     3b12 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x572>
    376c:	48 8d 5c 24 70       	lea    0x70(%rsp),%rbx
    3771:	4c 8b 2d c0 62 20 00 	mov    0x2062c0(%rip),%r13        # 209a38 <VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    3778:	48 8d 43 78          	lea    0x78(%rbx),%rax
    377c:	48 89 04 24          	mov    %rax,(%rsp)
    3780:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    3784:	0f 84 a6 03 00 00    	je     3b30 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x590>
    378a:	0f be 55 43          	movsbl 0x43(%rbp),%edx
    378e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    3793:	4c 89 e7             	mov    %r12,%rdi
    3796:	e8 05 ea ff ff       	callq  21a0 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@plt>
    379b:	48 8b 10             	mov    (%rax),%rdx
    379e:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
    37a2:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
    37a7:	0f 85 3b 04 00 00    	jne    3be8 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x648>
    37ad:	48 8b 3c 24          	mov    (%rsp),%rdi
    37b1:	e8 4a e7 ff ff       	callq  1f00 <std::ios_base::ios_base()@plt>
    37b6:	66 0f ef c0          	pxor   %xmm0,%xmm0
    37ba:	48 8d 05 6f 60 20 00 	lea    0x20606f(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    37c1:	c6 84 24 c8 01 00 00 	movb   $0x0,0x1c8(%rsp)
    37c8:	00 
    37c9:	48 8b 0d 70 62 20 00 	mov    0x206270(%rip),%rcx        # 209a40 <VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    37d0:	31 f6                	xor    %esi,%esi
    37d2:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
    37d9:	00 
    37da:	48 c7 84 24 c0 01 00 	movq   $0x0,0x1c0(%rsp)
    37e1:	00 00 00 00 00 
    37e6:	0f 29 84 24 d0 01 00 	movaps %xmm0,0x1d0(%rsp)
    37ed:	00 
    37ee:	c6 84 24 c9 01 00 00 	movb   $0x0,0x1c9(%rsp)
    37f5:	00 
    37f6:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
    37fb:	0f 29 84 24 e0 01 00 	movaps %xmm0,0x1e0(%rsp)
    3802:	00 
    3803:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    3807:	48 89 4c 04 70       	mov    %rcx,0x70(%rsp,%rax,1)
    380c:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
    3813:	00 00 
    3815:	49 8b 7d e8          	mov    -0x18(%r13),%rdi
    3819:	48 01 df             	add    %rbx,%rdi
    381c:	e8 af e8 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    3821:	48 8d 05 30 60 20 00 	lea    0x206030(%rip),%rax        # 209858 <vtable for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    3828:	48 8d 7b 48          	lea    0x48(%rbx),%rdi
    382c:	48 c7 84 24 88 00 00 	movq   $0x0,0x88(%rsp)
    3833:	00 00 00 00 00 
    3838:	48 c7 84 24 90 00 00 	movq   $0x0,0x90(%rsp)
    383f:	00 00 00 00 00 
    3844:	48 c7 84 24 98 00 00 	movq   $0x0,0x98(%rsp)
    384b:	00 00 00 00 00 
    3850:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    3855:	48 83 c0 28          	add    $0x28,%rax
    3859:	48 c7 84 24 a0 00 00 	movq   $0x0,0xa0(%rsp)
    3860:	00 00 00 00 00 
    3865:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
    386c:	00 
    386d:	48 8d 05 f4 60 20 00 	lea    0x2060f4(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3874:	48 c7 84 24 a8 00 00 	movq   $0x0,0xa8(%rsp)
    387b:	00 00 00 00 00 
    3880:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
    3887:	00 00 00 00 00 
    388c:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    3893:	00 
    3894:	e8 27 e9 ff ff       	callq  21c0 <std::locale::locale()@plt>
    3899:	48 8d 05 c8 62 20 00 	lea    0x2062c8(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    38a0:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
    38a5:	48 8b 6c 24 58       	mov    0x58(%rsp),%rbp
    38aa:	c7 84 24 c0 00 00 00 	movl   $0x0,0xc0(%rsp)
    38b1:	00 00 00 00 
    38b5:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    38bc:	00 
    38bd:	48 8d 43 68          	lea    0x68(%rbx),%rax
    38c1:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
    38c8:	00 
    38c9:	4c 89 f8             	mov    %r15,%rax
    38cc:	48 01 e8             	add    %rbp,%rax
    38cf:	74 09                	je     38da <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x33a>
    38d1:	4d 85 ff             	test   %r15,%r15
    38d4:	0f 84 cc 05 00 00    	je     3ea6 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x906>
    38da:	48 83 fd 0f          	cmp    $0xf,%rbp
    38de:	0f 87 ac 02 00 00    	ja     3b90 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x5f0>
    38e4:	48 83 fd 01          	cmp    $0x1,%rbp
    38e8:	0f 84 e2 02 00 00    	je     3bd0 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x630>
    38ee:	48 85 ed             	test   %rbp,%rbp
    38f1:	48 8d 43 68          	lea    0x68(%rbx),%rax
    38f5:	0f 85 b7 02 00 00    	jne    3bb2 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x612>
    38fb:	48 89 ac 24 d0 00 00 	mov    %rbp,0xd0(%rsp)
    3902:	00 
    3903:	c6 04 28 00          	movb   $0x0,(%rax,%rbp,1)
    3907:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    390b:	48 8b b4 24 c8 00 00 	mov    0xc8(%rsp),%rsi
    3912:	00 
    3913:	31 c9                	xor    %ecx,%ecx
    3915:	31 d2                	xor    %edx,%edx
    3917:	c7 84 24 c0 00 00 00 	movl   $0x8,0xc0(%rsp)
    391e:	08 00 00 00 
    3922:	e8 89 e7 ff ff       	callq  20b0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
    3927:	48 8b 3c 24          	mov    (%rsp),%rdi
    392b:	48 8d 73 10          	lea    0x10(%rbx),%rsi
    392f:	e8 9c e7 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    3934:	66 0f ef c0          	pxor   %xmm0,%xmm0
    3938:	48 8d 6c 24 2c       	lea    0x2c(%rsp),%rbp
    393d:	4c 8d 7c 24 30       	lea    0x30(%rsp),%r15
    3942:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
    3949:	00 00 
    394b:	0f 29 44 24 30       	movaps %xmm0,0x30(%rsp)
    3950:	48 89 ee             	mov    %rbp,%rsi
    3953:	48 89 df             	mov    %rbx,%rdi
    3956:	e8 35 e6 ff ff       	callq  1f90 <std::istream::operator>>(int&)@plt>
    395b:	48 8b 10             	mov    (%rax),%rdx
    395e:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
    3962:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
    3967:	75 39                	jne    39a2 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x402>
    3969:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    396e:	48 3b 74 24 40       	cmp    0x40(%rsp),%rsi
    3973:	0f 84 a7 01 00 00    	je     3b20 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x580>
    3979:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
    397d:	48 83 c6 04          	add    $0x4,%rsi
    3981:	48 89 df             	mov    %rbx,%rdi
    3984:	89 46 fc             	mov    %eax,-0x4(%rsi)
    3987:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
    398c:	48 89 ee             	mov    %rbp,%rsi
    398f:	e8 fc e5 ff ff       	callq  1f90 <std::istream::operator>>(int&)@plt>
    3994:	48 8b 10             	mov    (%rax),%rdx
    3997:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
    399b:	f6 44 10 20 05       	testb  $0x5,0x20(%rax,%rdx,1)
    39a0:	74 c7                	je     3969 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x3c9>
    39a2:	49 8b 6e 08          	mov    0x8(%r14),%rbp
    39a6:	49 3b 6e 10          	cmp    0x10(%r14),%rbp
    39aa:	0f 84 c0 01 00 00    	je     3b70 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x5d0>
    39b0:	4c 8b 7c 24 38       	mov    0x38(%rsp),%r15
    39b5:	4c 2b 7c 24 30       	sub    0x30(%rsp),%r15
    39ba:	31 c9                	xor    %ecx,%ecx
    39bc:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
    39c3:	00 
    39c4:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
    39cb:	00 
    39cc:	49 89 e8             	mov    %rbp,%r8
    39cf:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    39d6:	00 
    39d7:	4c 89 f8             	mov    %r15,%rax
    39da:	48 c1 f8 02          	sar    $0x2,%rax
    39de:	48 85 c0             	test   %rax,%rax
    39e1:	74 22                	je     3a05 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x465>
    39e3:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
    39ea:	ff ff 3f 
    39ed:	48 39 d0             	cmp    %rdx,%rax
    39f0:	0f 87 dc 04 00 00    	ja     3ed2 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x932>
    39f6:	4c 89 ff             	mov    %r15,%rdi
    39f9:	e8 42 e6 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    39fe:	4d 8b 46 08          	mov    0x8(%r14),%r8
    3a02:	48 89 c1             	mov    %rax,%rcx
    3a05:	49 01 cf             	add    %rcx,%r15
    3a08:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
    3a0c:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    3a10:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    3a15:	4c 89 7d 10          	mov    %r15,0x10(%rbp)
    3a19:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
    3a1e:	49 89 c1             	mov    %rax,%r9
    3a21:	4d 29 f9             	sub    %r15,%r9
    3a24:	4c 39 f8             	cmp    %r15,%rax
    3a27:	74 25                	je     3a4e <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x4ae>
    3a29:	4c 89 ca             	mov    %r9,%rdx
    3a2c:	48 89 cf             	mov    %rcx,%rdi
    3a2f:	4c 89 fe             	mov    %r15,%rsi
    3a32:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    3a37:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    3a3c:	e8 ff e6 ff ff       	callq  2140 <memmove@plt>
    3a41:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    3a46:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    3a4b:	48 89 c1             	mov    %rax,%rcx
    3a4e:	4c 01 c9             	add    %r9,%rcx
    3a51:	49 83 c0 18          	add    $0x18,%r8
    3a55:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    3a59:	4d 89 46 08          	mov    %r8,0x8(%r14)
    3a5d:	4d 85 ff             	test   %r15,%r15
    3a60:	74 08                	je     3a6a <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x4ca>
    3a62:	4c 89 ff             	mov    %r15,%rdi
    3a65:	e8 c6 e5 ff ff       	callq  2030 <operator delete(void*)@plt>
    3a6a:	48 8d 05 e7 5d 20 00 	lea    0x205de7(%rip),%rax        # 209858 <vtable for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    3a71:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
    3a78:	00 
    3a79:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
    3a7e:	48 83 c0 28          	add    $0x28,%rax
    3a82:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
    3a89:	00 
    3a8a:	48 8d 05 d7 60 20 00 	lea    0x2060d7(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    3a91:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    3a98:	00 
    3a99:	48 8d 43 68          	lea    0x68(%rbx),%rax
    3a9d:	48 39 c7             	cmp    %rax,%rdi
    3aa0:	74 05                	je     3aa7 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x507>
    3aa2:	e8 89 e5 ff ff       	callq  2030 <operator delete(void*)@plt>
    3aa7:	48 8d 05 ba 5e 20 00 	lea    0x205eba(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3aae:	48 8d 7b 48          	lea    0x48(%rbx),%rdi
    3ab2:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    3ab9:	00 
    3aba:	e8 21 e6 ff ff       	callq  20e0 <std::locale::~locale()@plt>
    3abf:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    3ac3:	48 8b 0d 76 5f 20 00 	mov    0x205f76(%rip),%rcx        # 209a40 <VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    3aca:	48 8b 3c 24          	mov    (%rsp),%rdi
    3ace:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
    3ad3:	48 89 4c 04 70       	mov    %rcx,0x70(%rsp,%rax,1)
    3ad8:	48 8d 05 51 5d 20 00 	lea    0x205d51(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3adf:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
    3ae6:	00 00 
    3ae8:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
    3aef:	00 
    3af0:	e8 1b e4 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    3af5:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
    3afc:	00 
    3afd:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3b01:	48 8b ac 04 e0 02 00 	mov    0x2e0(%rsp,%rax,1),%rbp
    3b08:	00 
    3b09:	48 85 ed             	test   %rbp,%rbp
    3b0c:	0f 85 6e fc ff ff    	jne    3780 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x1e0>
    3b12:	e8 89 e5 ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    3b17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3b1e:	00 00 
    3b20:	48 89 ea             	mov    %rbp,%rdx
    3b23:	4c 89 ff             	mov    %r15,%rdi
    3b26:	e8 b5 0d 00 00       	callq  48e0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>
    3b2b:	e9 20 fe ff ff       	jmpq   3950 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x3b0>
    3b30:	48 89 ef             	mov    %rbp,%rdi
    3b33:	e8 58 e5 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    3b38:	48 8b 45 00          	mov    0x0(%rbp),%rax
    3b3c:	48 8d 0d ed 04 00 00 	lea    0x4ed(%rip),%rcx        # 4030 <std::ctype<char>::do_widen(char) const>
    3b43:	ba 0a 00 00 00       	mov    $0xa,%edx
    3b48:	48 8b 40 30          	mov    0x30(%rax),%rax
    3b4c:	48 39 c8             	cmp    %rcx,%rax
    3b4f:	0f 84 39 fc ff ff    	je     378e <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x1ee>
    3b55:	be 0a 00 00 00       	mov    $0xa,%esi
    3b5a:	48 89 ef             	mov    %rbp,%rdi
    3b5d:	ff d0                	callq  *%rax
    3b5f:	0f be d0             	movsbl %al,%edx
    3b62:	e9 27 fc ff ff       	jmpq   378e <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x1ee>
    3b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3b6e:	00 00 
    3b70:	48 8d 54 24 30       	lea    0x30(%rsp),%rdx
    3b75:	48 89 ee             	mov    %rbp,%rsi
    3b78:	4c 89 f7             	mov    %r14,%rdi
    3b7b:	e8 90 0e 00 00       	callq  4a10 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)>
    3b80:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
    3b85:	e9 d3 fe ff ff       	jmpq   3a5d <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x4bd>
    3b8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3b90:	48 85 ed             	test   %rbp,%rbp
    3b93:	0f 88 fc 02 00 00    	js     3e95 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8f5>
    3b99:	48 8d 7d 01          	lea    0x1(%rbp),%rdi
    3b9d:	e8 9e e4 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    3ba2:	48 89 84 24 c8 00 00 	mov    %rax,0xc8(%rsp)
    3ba9:	00 
    3baa:	48 89 ac 24 d8 00 00 	mov    %rbp,0xd8(%rsp)
    3bb1:	00 
    3bb2:	48 89 ea             	mov    %rbp,%rdx
    3bb5:	4c 89 fe             	mov    %r15,%rsi
    3bb8:	48 89 c7             	mov    %rax,%rdi
    3bbb:	e8 40 e4 ff ff       	callq  2000 <memcpy@plt>
    3bc0:	48 8b 84 24 c8 00 00 	mov    0xc8(%rsp),%rax
    3bc7:	00 
    3bc8:	e9 2e fd ff ff       	jmpq   38fb <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x35b>
    3bcd:	0f 1f 00             	nopl   (%rax)
    3bd0:	41 0f b6 07          	movzbl (%r15),%eax
    3bd4:	88 84 24 d8 00 00 00 	mov    %al,0xd8(%rsp)
    3bdb:	48 8d 43 68          	lea    0x68(%rbx),%rax
    3bdf:	e9 17 fd ff ff       	jmpq   38fb <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x35b>
    3be4:	0f 1f 40 00          	nopl   0x0(%rax)
    3be8:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    3bed:	e8 ee e2 ff ff       	callq  1ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>
    3bf2:	48 85 c0             	test   %rax,%rax
    3bf5:	0f 84 f5 01 00 00    	je     3df0 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x850>
    3bfb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    3c00:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    3c05:	48 83 c0 10          	add    $0x10,%rax
    3c09:	48 39 c7             	cmp    %rax,%rdi
    3c0c:	74 05                	je     3c13 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x673>
    3c0e:	e8 1d e4 ff ff       	callq  2030 <operator delete(void*)@plt>
    3c13:	48 8d 05 de 5c 20 00 	lea    0x205cde(%rip),%rax        # 2098f8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    3c1a:	f3 0f 7e 05 b6 5f 20 	movq   0x205fb6(%rip),%xmm0        # 209bd8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x2f8>
    3c21:	00 
    3c22:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    3c27:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    3c2e:	00 
    3c2f:	48 83 c0 50          	add    $0x50,%rax
    3c33:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    3c3a:	00 
    3c3b:	48 8d 05 a6 5e 20 00 	lea    0x205ea6(%rip),%rax        # 209ae8 <vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3c42:	48 89 04 24          	mov    %rax,(%rsp)
    3c46:	0f 16 04 24          	movhps (%rsp),%xmm0
    3c4a:	0f 29 84 24 00 02 00 	movaps %xmm0,0x200(%rsp)
    3c51:	00 
    3c52:	e8 89 e2 ff ff       	callq  1ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>
    3c57:	49 8d bc 24 80 00 00 	lea    0x80(%r12),%rdi
    3c5e:	00 
    3c5f:	e8 4c e5 ff ff       	callq  21b0 <std::__basic_file<char>::~__basic_file()@plt>
    3c64:	48 8d 05 fd 5c 20 00 	lea    0x205cfd(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3c6b:	49 8d 7c 24 50       	lea    0x50(%r12),%rdi
    3c70:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
    3c77:	00 
    3c78:	e8 63 e4 ff ff       	callq  20e0 <std::locale::~locale()@plt>
    3c7d:	48 8b 05 64 5d 20 00 	mov    0x205d64(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    3c84:	48 8b 0d 85 5d 20 00 	mov    0x205d85(%rip),%rcx        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    3c8b:	49 8d bc 24 08 01 00 	lea    0x108(%r12),%rdi
    3c92:	00 
    3c93:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3c97:	48 89 8c 04 f0 01 00 	mov    %rcx,0x1f0(%rsp,%rax,1)
    3c9e:	00 
    3c9f:	48 8b 05 5a 5d 20 00 	mov    0x205d5a(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    3ca6:	48 8b 0d 5b 5d 20 00 	mov    0x205d5b(%rip),%rcx        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    3cad:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
    3cb4:	00 
    3cb5:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3cb9:	48 89 8c 04 00 02 00 	mov    %rcx,0x200(%rsp,%rax,1)
    3cc0:	00 
    3cc1:	48 8b 05 28 5d 20 00 	mov    0x205d28(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3cc8:	48 8b 0d 29 5d 20 00 	mov    0x205d29(%rip),%rcx        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    3ccf:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    3cd6:	00 
    3cd7:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3cdb:	48 89 8c 04 f0 01 00 	mov    %rcx,0x1f0(%rsp,%rax,1)
    3ce2:	00 
    3ce3:	48 8d 05 46 5b 20 00 	lea    0x205b46(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3cea:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
    3cf1:	00 00 00 00 00 
    3cf6:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    3cfd:	00 
    3cfe:	e8 0d e2 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    3d03:	48 8b 84 24 08 04 00 	mov    0x408(%rsp),%rax
    3d0a:	00 
    3d0b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3d12:	00 00 
    3d14:	0f 85 87 01 00 00    	jne    3ea1 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x901>
    3d1a:	48 81 c4 18 04 00 00 	add    $0x418,%rsp
    3d21:	5b                   	pop    %rbx
    3d22:	5d                   	pop    %rbp
    3d23:	41 5c                	pop    %r12
    3d25:	41 5d                	pop    %r13
    3d27:	41 5e                	pop    %r14
    3d29:	41 5f                	pop    %r15
    3d2b:	c3                   	retq   
    3d2c:	0f 1f 40 00          	nopl   0x0(%rax)
    3d30:	48 8d 35 31 41 00 00 	lea    0x4131(%rip),%rsi        # 7e68 <_IO_stdin_used+0x8>
    3d37:	48 8d 3d e2 62 20 00 	lea    0x2062e2(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    3d3e:	ba 2b 00 00 00       	mov    $0x2b,%edx
    3d43:	e8 38 e3 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    3d48:	48 8b 05 d1 62 20 00 	mov    0x2062d1(%rip),%rax        # 20a020 <std::cout@@GLIBCXX_3.4>
    3d4f:	48 8d 15 ca 62 20 00 	lea    0x2062ca(%rip),%rdx        # 20a020 <std::cout@@GLIBCXX_3.4>
    3d56:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    3d5a:	48 8b 9c 02 f0 00 00 	mov    0xf0(%rdx,%rax,1),%rbx
    3d61:	00 
    3d62:	48 85 db             	test   %rbx,%rbx
    3d65:	0f 84 ac 02 00 00    	je     4017 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0xa77>
    3d6b:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    3d6f:	0f 84 9a 00 00 00    	je     3e0f <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x86f>
    3d75:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    3d79:	48 8d 3d a0 62 20 00 	lea    0x2062a0(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    3d80:	e8 2b e1 ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    3d85:	48 89 c7             	mov    %rax,%rdi
    3d88:	e8 23 e2 ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    3d8d:	48 8d 05 64 5b 20 00 	lea    0x205b64(%rip),%rax        # 2098f8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    3d94:	f3 0f 7e 05 3c 5e 20 	movq   0x205e3c(%rip),%xmm0        # 209bd8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x2f8>
    3d9b:	00 
    3d9c:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    3da1:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    3da8:	00 
    3da9:	48 83 c0 50          	add    $0x50,%rax
    3dad:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    3db4:	00 
    3db5:	48 8d 05 2c 5d 20 00 	lea    0x205d2c(%rip),%rax        # 209ae8 <vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3dbc:	48 89 04 24          	mov    %rax,(%rsp)
    3dc0:	0f 16 04 24          	movhps (%rsp),%xmm0
    3dc4:	0f 29 84 24 00 02 00 	movaps %xmm0,0x200(%rsp)
    3dcb:	00 
    3dcc:	e8 0f e1 ff ff       	callq  1ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>
    3dd1:	e9 81 fe ff ff       	jmpq   3c57 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x6b7>
    3dd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3ddd:	00 00 00 
    3de0:	8b 77 20             	mov    0x20(%rdi),%esi
    3de3:	83 ce 04             	or     $0x4,%esi
    3de6:	e8 85 e3 ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    3deb:	e9 28 f9 ff ff       	jmpq   3718 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x178>
    3df0:	48 8b 84 24 f0 01 00 	mov    0x1f0(%rsp),%rax
    3df7:	00 
    3df8:	48 8b 78 e8          	mov    -0x18(%rax),%rdi
    3dfc:	4c 01 e7             	add    %r12,%rdi
    3dff:	8b 77 20             	mov    0x20(%rdi),%esi
    3e02:	83 ce 04             	or     $0x4,%esi
    3e05:	e8 66 e3 ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    3e0a:	e9 ec fd ff ff       	jmpq   3bfb <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x65b>
    3e0f:	48 89 df             	mov    %rbx,%rdi
    3e12:	e8 79 e2 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    3e17:	48 8b 03             	mov    (%rbx),%rax
    3e1a:	48 8d 15 0f 02 00 00 	lea    0x20f(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    3e21:	be 0a 00 00 00       	mov    $0xa,%esi
    3e26:	48 8b 40 30          	mov    0x30(%rax),%rax
    3e2a:	48 39 d0             	cmp    %rdx,%rax
    3e2d:	0f 84 46 ff ff ff    	je     3d79 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x7d9>
    3e33:	48 89 df             	mov    %rbx,%rdi
    3e36:	ff d0                	callq  *%rax
    3e38:	0f be f0             	movsbl %al,%esi
    3e3b:	e9 39 ff ff ff       	jmpq   3d79 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x7d9>
    3e40:	48 89 c5             	mov    %rax,%rbp
    3e43:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    3e48:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    3e4d:	48 83 c2 10          	add    $0x10,%rdx
    3e51:	48 39 d7             	cmp    %rdx,%rdi
    3e54:	74 05                	je     3e5b <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8bb>
    3e56:	e8 d5 e1 ff ff       	callq  2030 <operator delete(void*)@plt>
    3e5b:	48 89 eb             	mov    %rbp,%rbx
    3e5e:	4c 89 e7             	mov    %r12,%rdi
    3e61:	e8 6a e0 ff ff       	callq  1ed0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
    3e66:	48 89 df             	mov    %rbx,%rdi
    3e69:	e8 22 e3 ff ff       	callq  2190 <_Unwind_Resume@plt>
    3e6e:	48 89 c3             	mov    %rax,%rbx
    3e71:	48 8d 05 b8 59 20 00 	lea    0x2059b8(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3e78:	49 8d bc 24 08 01 00 	lea    0x108(%r12),%rdi
    3e7f:	00 
    3e80:	48 89 84 24 f8 02 00 	mov    %rax,0x2f8(%rsp)
    3e87:	00 
    3e88:	e8 83 e0 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    3e8d:	48 89 df             	mov    %rbx,%rdi
    3e90:	e8 fb e2 ff ff       	callq  2190 <_Unwind_Resume@plt>
    3e95:	48 8d 3d 2c 40 00 00 	lea    0x402c(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    3e9c:	e8 cf e0 ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    3ea1:	e8 ca e1 ff ff       	callq  2070 <__stack_chk_fail@plt>
    3ea6:	48 8d 3d eb 3f 00 00 	lea    0x3feb(%rip),%rdi        # 7e98 <_IO_stdin_used+0x38>
    3ead:	e8 0e e1 ff ff       	callq  1fc0 <std::__throw_logic_error(char const*)@plt>
    3eb2:	48 89 c5             	mov    %rax,%rbp
    3eb5:	48 8d 05 74 59 20 00 	lea    0x205974(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3ebc:	48 8d 7b 78          	lea    0x78(%rbx),%rdi
    3ec0:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
    3ec7:	00 
    3ec8:	e8 43 e0 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    3ecd:	e9 71 ff ff ff       	jmpq   3e43 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8a3>
    3ed2:	e8 49 e0 ff ff       	callq  1f20 <std::__throw_bad_alloc()@plt>
    3ed7:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    3edc:	48 89 c5             	mov    %rax,%rbp
    3edf:	48 85 ff             	test   %rdi,%rdi
    3ee2:	74 05                	je     3ee9 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x949>
    3ee4:	e8 47 e1 ff ff       	callq  2030 <operator delete(void*)@plt>
    3ee9:	48 89 df             	mov    %rbx,%rdi
    3eec:	e8 5f e0 ff ff       	callq  1f50 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@plt>
    3ef1:	e9 4d ff ff ff       	jmpq   3e43 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8a3>
    3ef6:	48 89 c3             	mov    %rax,%rbx
    3ef9:	e9 60 ff ff ff       	jmpq   3e5e <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8be>
    3efe:	49 8d 7c 24 18       	lea    0x18(%r12),%rdi
    3f03:	48 89 c3             	mov    %rax,%rbx
    3f06:	e8 05 e2 ff ff       	callq  2110 <std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@plt>
    3f0b:	48 8b 05 d6 5a 20 00 	mov    0x205ad6(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    3f12:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    3f16:	48 8b 05 f3 5a 20 00 	mov    0x205af3(%rip),%rax        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    3f1d:	48 89 84 14 f0 01 00 	mov    %rax,0x1f0(%rsp,%rdx,1)
    3f24:	00 
    3f25:	48 8b 05 d4 5a 20 00 	mov    0x205ad4(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    3f2c:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    3f30:	48 89 84 24 00 02 00 	mov    %rax,0x200(%rsp)
    3f37:	00 
    3f38:	48 8b 05 c9 5a 20 00 	mov    0x205ac9(%rip),%rax        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    3f3f:	48 89 84 14 00 02 00 	mov    %rax,0x200(%rsp,%rdx,1)
    3f46:	00 
    3f47:	48 8b 05 a2 5a 20 00 	mov    0x205aa2(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3f4e:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    3f52:	48 89 84 24 f0 01 00 	mov    %rax,0x1f0(%rsp)
    3f59:	00 
    3f5a:	48 8b 05 97 5a 20 00 	mov    0x205a97(%rip),%rax        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    3f61:	48 89 84 14 f0 01 00 	mov    %rax,0x1f0(%rsp,%rdx,1)
    3f68:	00 
    3f69:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
    3f70:	00 00 00 00 00 
    3f75:	e9 f7 fe ff ff       	jmpq   3e71 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8d1>
    3f7a:	48 89 c3             	mov    %rax,%rbx
    3f7d:	eb 8c                	jmp    3f0b <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x96b>
    3f7f:	48 8b 0d 6a 5a 20 00 	mov    0x205a6a(%rip),%rcx        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    3f86:	48 89 c3             	mov    %rax,%rbx
    3f89:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
    3f8d:	48 89 8c 24 f0 01 00 	mov    %rcx,0x1f0(%rsp)
    3f94:	00 
    3f95:	48 8b 0d 5c 5a 20 00 	mov    0x205a5c(%rip),%rcx        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    3f9c:	48 89 8c 14 f0 01 00 	mov    %rcx,0x1f0(%rsp,%rdx,1)
    3fa3:	00 
    3fa4:	48 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%rsp)
    3fab:	00 00 00 00 00 
    3fb0:	e9 bc fe ff ff       	jmpq   3e71 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x8d1>
    3fb5:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    3fb9:	48 89 c5             	mov    %rax,%rbp
    3fbc:	e8 af 05 00 00       	callq  4570 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    3fc1:	49 8b 45 e8          	mov    -0x18(%r13),%rax
    3fc5:	48 8b 0d 74 5a 20 00 	mov    0x205a74(%rip),%rcx        # 209a40 <VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    3fcc:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
    3fd1:	48 89 4c 04 70       	mov    %rcx,0x70(%rsp,%rax,1)
    3fd6:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
    3fdd:	00 00 
    3fdf:	e9 d1 fe ff ff       	jmpq   3eb5 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0x915>
    3fe4:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
    3feb:	00 
    3fec:	48 89 c5             	mov    %rax,%rbp
    3fef:	48 8d 43 68          	lea    0x68(%rbx),%rax
    3ff3:	48 39 c7             	cmp    %rax,%rdi
    3ff6:	74 05                	je     3ffd <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0xa5d>
    3ff8:	e8 33 e0 ff ff       	callq  2030 <operator delete(void*)@plt>
    3ffd:	48 8d 05 64 59 20 00 	lea    0x205964(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    4004:	48 8d 7b 48          	lea    0x48(%rbx),%rdi
    4008:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    400f:	00 
    4010:	e8 cb e0 ff ff       	callq  20e0 <std::locale::~locale()@plt>
    4015:	eb aa                	jmp    3fc1 <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0xa21>
    4017:	e8 84 e0 ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    401c:	48 89 c5             	mov    %rax,%rbp
    401f:	eb dc                	jmp    3ffd <load_map(char const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, int, int)+0xa5d>
    4021:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4028:	00 00 00 
    402b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004030 <std::ctype<char>::do_widen(char) const>:
    4030:	89 f0                	mov    %esi,%eax
    4032:	c3                   	retq   
    4033:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    403a:	00 00 00 
    403d:	0f 1f 00             	nopl   (%rax)

0000000000004040 <std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()>:
    4040:	48 8b 3f             	mov    (%rdi),%rdi
    4043:	48 85 ff             	test   %rdi,%rdi
    4046:	74 08                	je     4050 <std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()+0x10>
    4048:	e9 e3 df ff ff       	jmpq   2030 <operator delete(void*)@plt>
    404d:	0f 1f 00             	nopl   (%rax)
    4050:	f3 c3                	repz retq 
    4052:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4059:	00 00 00 
    405c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004060 <JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]>:
    4060:	48 8b 0a             	mov    (%rdx),%rcx
    4063:	48 8b 42 08          	mov    0x8(%rdx),%rax
    4067:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    406e:	aa aa aa 
    4071:	48 63 ff             	movslq %edi,%rdi
    4074:	48 29 c8             	sub    %rcx,%rax
    4077:	48 c1 f8 03          	sar    $0x3,%rax
    407b:	48 0f af c2          	imul   %rdx,%rax
    407f:	89 f2                	mov    %esi,%edx
    4081:	f7 d2                	not    %edx
    4083:	48 39 c7             	cmp    %rax,%rdi
    4086:	0f 92 c0             	setb   %al
    4089:	c1 ea 1f             	shr    $0x1f,%edx
    408c:	20 d0                	and    %dl,%al
    408e:	75 08                	jne    4098 <JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]+0x38>
    4090:	f3 c3                	repz retq 
    4092:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4098:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    409c:	48 2b 11             	sub    (%rcx),%rdx
    409f:	48 63 f6             	movslq %esi,%rsi
    40a2:	31 c0                	xor    %eax,%eax
    40a4:	48 c1 fa 02          	sar    $0x2,%rdx
    40a8:	48 39 d6             	cmp    %rdx,%rsi
    40ab:	73 e3                	jae    4090 <JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]+0x30>
    40ad:	48 8d 04 7f          	lea    (%rdi,%rdi,2),%rax
    40b1:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
    40b5:	8b 04 b0             	mov    (%rax,%rsi,4),%eax
    40b8:	85 c0                	test   %eax,%eax
    40ba:	0f 94 c0             	sete   %al
    40bd:	c3                   	retq   
    40be:	66 90                	xchg   %ax,%ax

00000000000040c0 <std::char_traits<char>::length(char const*)>:
    40c0:	e9 7b de ff ff       	jmpq   1f40 <strlen@plt>
    40c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    40cc:	00 00 00 
    40cf:	90                   	nop

00000000000040d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>:
    40d0:	41 57                	push   %r15
    40d2:	41 56                	push   %r14
    40d4:	41 55                	push   %r13
    40d6:	41 54                	push   %r12
    40d8:	41 89 f4             	mov    %esi,%r12d
    40db:	55                   	push   %rbp
    40dc:	53                   	push   %rbx
    40dd:	46 8d 2c 02          	lea    (%rdx,%r8,1),%r13d
    40e1:	48 83 ec 48          	sub    $0x48,%rsp
    40e5:	41 01 cc             	add    %ecx,%r12d
    40e8:	4c 8b b4 24 80 00 00 	mov    0x80(%rsp),%r14
    40ef:	00 
    40f0:	0f 88 32 02 00 00    	js     4328 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x258>
    40f6:	49 8b 06             	mov    (%r14),%rax
    40f9:	49 8b 5e 08          	mov    0x8(%r14),%rbx
    40fd:	49 bb ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r11
    4104:	aa aa aa 
    4107:	4d 63 d4             	movslq %r12d,%r10
    410a:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
    410f:	48 29 c3             	sub    %rax,%rbx
    4112:	48 c1 fb 03          	sar    $0x3,%rbx
    4116:	49 0f af db          	imul   %r11,%rbx
    411a:	49 39 da             	cmp    %rbx,%r10
    411d:	0f 83 05 02 00 00    	jae    4328 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x258>
    4123:	45 85 ed             	test   %r13d,%r13d
    4126:	0f 88 fc 01 00 00    	js     4328 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x258>
    412c:	48 8b 68 08          	mov    0x8(%rax),%rbp
    4130:	48 2b 28             	sub    (%rax),%rbp
    4133:	4d 63 fd             	movslq %r13d,%r15
    4136:	31 db                	xor    %ebx,%ebx
    4138:	48 c1 fd 02          	sar    $0x2,%rbp
    413c:	49 39 ef             	cmp    %rbp,%r15
    413f:	0f 83 e5 01 00 00    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4145:	4b 8d 2c 52          	lea    (%r10,%r10,2),%rbp
    4149:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
    414e:	4c 89 7c 24 38       	mov    %r15,0x38(%rsp)
    4153:	4c 8d 14 ed 00 00 00 	lea    0x0(,%rbp,8),%r10
    415a:	00 
    415b:	4a 8b 04 10          	mov    (%rax,%r10,1),%rax
    415f:	4c 89 54 24 30       	mov    %r10,0x30(%rsp)
    4164:	46 8b 14 b8          	mov    (%rax,%r15,4),%r10d
    4168:	45 85 d2             	test   %r10d,%r10d
    416b:	0f 85 b9 01 00 00    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4171:	4d 89 cf             	mov    %r9,%r15
    4174:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
    4179:	bf 20 00 00 00       	mov    $0x20,%edi
    417e:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
    4183:	89 cd                	mov    %ecx,%ebp
    4185:	89 54 24 24          	mov    %edx,0x24(%rsp)
    4189:	89 74 24 20          	mov    %esi,0x20(%rsp)
    418d:	e8 ae de ff ff       	callq  2040 <operator new(unsigned long)@plt>
    4192:	44 89 20             	mov    %r12d,(%rax)
    4195:	44 89 68 04          	mov    %r13d,0x4(%rax)
    4199:	48 89 c3             	mov    %rax,%rbx
    419c:	48 8b 38             	mov    (%rax),%rdi
    419f:	49 39 3f             	cmp    %rdi,(%r15)
    41a2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    41a9:	00 
    41aa:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    41b1:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    41b8:	00 
    41b9:	0f 84 6b 01 00 00    	je     432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    41bf:	85 ed                	test   %ebp,%ebp
    41c1:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
    41c6:	0f 84 74 01 00 00    	je     4340 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x270>
    41cc:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    41d0:	85 c0                	test   %eax,%eax
    41d2:	0f 84 68 01 00 00    	je     4340 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x270>
    41d8:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    41dc:	85 c9                	test   %ecx,%ecx
    41de:	78 68                	js     4248 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x178>
    41e0:	48 63 f1             	movslq %ecx,%rsi
    41e3:	42 8d 14 28          	lea    (%rax,%r13,1),%edx
    41e7:	49 8b 0e             	mov    (%r14),%rcx
    41ea:	49 8b 46 08          	mov    0x8(%r14),%rax
    41ee:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
    41f3:	48 29 c8             	sub    %rcx,%rax
    41f6:	48 c1 f8 03          	sar    $0x3,%rax
    41fa:	49 0f af c3          	imul   %r11,%rax
    41fe:	48 39 c6             	cmp    %rax,%rsi
    4201:	73 45                	jae    4248 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x178>
    4203:	85 d2                	test   %edx,%edx
    4205:	78 41                	js     4248 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x178>
    4207:	48 8b 41 08          	mov    0x8(%rcx),%rax
    420b:	48 2b 01             	sub    (%rcx),%rax
    420e:	48 63 d2             	movslq %edx,%rdx
    4211:	48 c1 f8 02          	sar    $0x2,%rax
    4215:	48 39 c2             	cmp    %rax,%rdx
    4218:	73 2e                	jae    4248 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x178>
    421a:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
    421e:	48 8b 0c f1          	mov    (%rcx,%rsi,8),%rcx
    4222:	8b 14 91             	mov    (%rcx,%rdx,4),%edx
    4225:	85 d2                	test   %edx,%edx
    4227:	75 1f                	jne    4248 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x178>
    4229:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    422e:	48 39 c6             	cmp    %rax,%rsi
    4231:	0f 83 f3 00 00 00    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4237:	8b 04 b1             	mov    (%rcx,%rsi,4),%eax
    423a:	85 c0                	test   %eax,%eax
    423c:	0f 85 e8 00 00 00    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4242:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4248:	89 e8                	mov    %ebp,%eax
    424a:	44 01 e0             	add    %r12d,%eax
    424d:	78 71                	js     42c0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f0>
    424f:	48 63 c8             	movslq %eax,%rcx
    4252:	49 8b 16             	mov    (%r14),%rdx
    4255:	49 8b 46 08          	mov    0x8(%r14),%rax
    4259:	48 63 7c 24 24       	movslq 0x24(%rsp),%rdi
    425e:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
    4265:	aa aa aa 
    4268:	48 29 d0             	sub    %rdx,%rax
    426b:	48 c1 f8 03          	sar    $0x3,%rax
    426f:	48 0f af c6          	imul   %rsi,%rax
    4273:	85 ff                	test   %edi,%edi
    4275:	78 49                	js     42c0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f0>
    4277:	48 39 c1             	cmp    %rax,%rcx
    427a:	73 44                	jae    42c0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f0>
    427c:	48 8b 72 08          	mov    0x8(%rdx),%rsi
    4280:	48 2b 32             	sub    (%rdx),%rsi
    4283:	48 c1 fe 02          	sar    $0x2,%rsi
    4287:	48 39 f7             	cmp    %rsi,%rdi
    428a:	73 34                	jae    42c0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f0>
    428c:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
    4290:	48 8b 0c ca          	mov    (%rdx,%rcx,8),%rcx
    4294:	44 8b 1c b9          	mov    (%rcx,%rdi,4),%r11d
    4298:	45 85 db             	test   %r11d,%r11d
    429b:	75 23                	jne    42c0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f0>
    429d:	49 39 c2             	cmp    %rax,%r10
    42a0:	0f 83 84 00 00 00    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    42a6:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    42ab:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
    42af:	44 8b 0c b8          	mov    (%rax,%rdi,4),%r9d
    42b3:	45 85 c9             	test   %r9d,%r9d
    42b6:	75 72                	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    42b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    42bf:	00 
    42c0:	48 83 ec 08          	sub    $0x8,%rsp
    42c4:	44 89 e6             	mov    %r12d,%esi
    42c7:	4d 89 f9             	mov    %r15,%r9
    42ca:	41 56                	push   %r14
    42cc:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    42d1:	89 e9                	mov    %ebp,%ecx
    42d3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    42d8:	44 89 ea             	mov    %r13d,%edx
    42db:	e8 f0 fd ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    42e0:	48 85 c0             	test   %rax,%rax
    42e3:	5e                   	pop    %rsi
    42e4:	5f                   	pop    %rdi
    42e5:	75 43                	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    42e7:	48 83 ec 08          	sub    $0x8,%rsp
    42eb:	45 31 c0             	xor    %r8d,%r8d
    42ee:	4d 89 f9             	mov    %r15,%r9
    42f1:	41 56                	push   %r14
    42f3:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    42f8:	89 e9                	mov    %ebp,%ecx
    42fa:	44 89 ea             	mov    %r13d,%edx
    42fd:	44 89 e6             	mov    %r12d,%esi
    4300:	e8 cb fd ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    4305:	48 85 c0             	test   %rax,%rax
    4308:	41 58                	pop    %r8
    430a:	41 59                	pop    %r9
    430c:	75 1c                	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    430e:	48 83 ec 08          	sub    $0x8,%rsp
    4312:	4d 89 f9             	mov    %r15,%r9
    4315:	31 c9                	xor    %ecx,%ecx
    4317:	41 56                	push   %r14
    4319:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    431e:	e9 d5 00 00 00       	jmpq   43f8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x328>
    4323:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4328:	31 db                	xor    %ebx,%ebx
    432a:	48 83 c4 48          	add    $0x48,%rsp
    432e:	48 89 d8             	mov    %rbx,%rax
    4331:	5b                   	pop    %rbx
    4332:	5d                   	pop    %rbp
    4333:	41 5c                	pop    %r12
    4335:	41 5d                	pop    %r13
    4337:	41 5e                	pop    %r14
    4339:	41 5f                	pop    %r15
    433b:	c3                   	retq   
    433c:	0f 1f 40 00          	nopl   0x0(%rax)
    4340:	85 ed                	test   %ebp,%ebp
    4342:	0f 84 e8 00 00 00    	je     4430 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x360>
    4348:	89 ea                	mov    %ebp,%edx
    434a:	44 01 e2             	add    %r12d,%edx
    434d:	0f 88 dd 01 00 00    	js     4530 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x460>
    4353:	49 8b 0e             	mov    (%r14),%rcx
    4356:	49 8b 46 08          	mov    0x8(%r14),%rax
    435a:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
    4361:	aa aa aa 
    4364:	48 63 d2             	movslq %edx,%rdx
    4367:	48 29 c8             	sub    %rcx,%rax
    436a:	48 c1 f8 03          	sar    $0x3,%rax
    436e:	48 0f af c6          	imul   %rsi,%rax
    4372:	48 39 c2             	cmp    %rax,%rdx
    4375:	73 71                	jae    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    4377:	48 8b 79 08          	mov    0x8(%rcx),%rdi
    437b:	48 2b 39             	sub    (%rcx),%rdi
    437e:	41 8d 75 01          	lea    0x1(%r13),%esi
    4382:	48 63 f6             	movslq %esi,%rsi
    4385:	48 c1 ff 02          	sar    $0x2,%rdi
    4389:	48 39 fe             	cmp    %rdi,%rsi
    438c:	73 15                	jae    43a3 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2d3>
    438e:	4c 8d 04 52          	lea    (%rdx,%rdx,2),%r8
    4392:	4e 8b 04 c1          	mov    (%rcx,%r8,8),%r8
    4396:	45 8b 04 b0          	mov    (%r8,%rsi,4),%r8d
    439a:	45 85 c0             	test   %r8d,%r8d
    439d:	0f 84 a5 01 00 00    	je     4548 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x478>
    43a3:	41 8d 75 ff          	lea    -0x1(%r13),%esi
    43a7:	83 fe ff             	cmp    $0xffffffff,%esi
    43aa:	74 3c                	je     43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    43ac:	48 63 f6             	movslq %esi,%rsi
    43af:	48 39 f7             	cmp    %rsi,%rdi
    43b2:	76 34                	jbe    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    43b4:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
    43b8:	48 8b 14 d1          	mov    (%rcx,%rdx,8),%rdx
    43bc:	8b 14 b2             	mov    (%rdx,%rsi,4),%edx
    43bf:	85 d2                	test   %edx,%edx
    43c1:	75 25                	jne    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    43c3:	49 39 c2             	cmp    %rax,%r10
    43c6:	0f 83 5e ff ff ff    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    43cc:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    43d1:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
    43d5:	44 8b 1c b0          	mov    (%rax,%rsi,4),%r11d
    43d9:	45 85 db             	test   %r11d,%r11d
    43dc:	0f 85 48 ff ff ff    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    43e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    43e8:	48 83 ec 08          	sub    $0x8,%rsp
    43ec:	4d 89 f9             	mov    %r15,%r9
    43ef:	89 e9                	mov    %ebp,%ecx
    43f1:	41 56                	push   %r14
    43f3:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    43f8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    43fd:	44 89 ea             	mov    %r13d,%edx
    4400:	44 89 e6             	mov    %r12d,%esi
    4403:	e8 c8 fc ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    4408:	48 85 c0             	test   %rax,%rax
    440b:	5a                   	pop    %rdx
    440c:	59                   	pop    %rcx
    440d:	0f 85 17 ff ff ff    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4413:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4418:	48 89 df             	mov    %rbx,%rdi
    441b:	be 20 00 00 00       	mov    $0x20,%esi
    4420:	31 db                	xor    %ebx,%ebx
    4422:	e8 29 dc ff ff       	callq  2050 <operator delete(void*, unsigned long)@plt>
    4427:	e9 fe fe ff ff       	jmpq   432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    442c:	0f 1f 40 00          	nopl   0x0(%rax)
    4430:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
    4435:	45 85 d2             	test   %r10d,%r10d
    4438:	74 de                	je     4418 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x348>
    443a:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    443e:	49 8b 36             	mov    (%r14),%rsi
    4441:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    4448:	aa aa aa 
    444b:	41 8d 54 24 01       	lea    0x1(%r12),%edx
    4450:	42 8d 3c 28          	lea    (%rax,%r13,1),%edi
    4454:	49 8b 46 08          	mov    0x8(%r14),%rax
    4458:	48 63 d2             	movslq %edx,%rdx
    445b:	48 29 f0             	sub    %rsi,%rax
    445e:	48 c1 f8 03          	sar    $0x3,%rax
    4462:	48 0f af c1          	imul   %rcx,%rax
    4466:	89 f9                	mov    %edi,%ecx
    4468:	f7 d1                	not    %ecx
    446a:	c1 e9 1f             	shr    $0x1f,%ecx
    446d:	48 39 c2             	cmp    %rax,%rdx
    4470:	73 46                	jae    44b8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x3e8>
    4472:	84 c9                	test   %cl,%cl
    4474:	74 42                	je     44b8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x3e8>
    4476:	4c 8b 46 08          	mov    0x8(%rsi),%r8
    447a:	4c 2b 06             	sub    (%rsi),%r8
    447d:	4c 63 cf             	movslq %edi,%r9
    4480:	49 c1 f8 02          	sar    $0x2,%r8
    4484:	4d 39 c1             	cmp    %r8,%r9
    4487:	73 2f                	jae    44b8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x3e8>
    4489:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
    448d:	48 8b 14 d6          	mov    (%rsi,%rdx,8),%rdx
    4491:	46 8b 0c 8a          	mov    (%rdx,%r9,4),%r9d
    4495:	45 85 c9             	test   %r9d,%r9d
    4498:	75 1e                	jne    44b8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x3e8>
    449a:	4c 8b 5c 24 38       	mov    0x38(%rsp),%r11
    449f:	4d 39 c3             	cmp    %r8,%r11
    44a2:	0f 83 82 fe ff ff    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    44a8:	42 8b 14 9a          	mov    (%rdx,%r11,4),%edx
    44ac:	85 d2                	test   %edx,%edx
    44ae:	0f 85 76 fe ff ff    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    44b4:	0f 1f 40 00          	nopl   0x0(%rax)
    44b8:	41 8d 54 24 ff       	lea    -0x1(%r12),%edx
    44bd:	83 fa ff             	cmp    $0xffffffff,%edx
    44c0:	0f 84 22 ff ff ff    	je     43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    44c6:	48 63 d2             	movslq %edx,%rdx
    44c9:	48 39 d0             	cmp    %rdx,%rax
    44cc:	0f 86 16 ff ff ff    	jbe    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    44d2:	84 c9                	test   %cl,%cl
    44d4:	0f 84 0e ff ff ff    	je     43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    44da:	48 8b 46 08          	mov    0x8(%rsi),%rax
    44de:	48 2b 06             	sub    (%rsi),%rax
    44e1:	48 63 ff             	movslq %edi,%rdi
    44e4:	48 c1 f8 02          	sar    $0x2,%rax
    44e8:	48 39 c7             	cmp    %rax,%rdi
    44eb:	0f 83 f7 fe ff ff    	jae    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    44f1:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
    44f5:	48 8b 14 d6          	mov    (%rsi,%rdx,8),%rdx
    44f9:	44 8b 1c ba          	mov    (%rdx,%rdi,4),%r11d
    44fd:	45 85 db             	test   %r11d,%r11d
    4500:	0f 85 e2 fe ff ff    	jne    43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    4506:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
    450b:	48 39 c6             	cmp    %rax,%rsi
    450e:	0f 83 16 fe ff ff    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4514:	44 8b 14 b2          	mov    (%rdx,%rsi,4),%r10d
    4518:	45 85 d2             	test   %r10d,%r10d
    451b:	0f 85 09 fe ff ff    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4521:	e9 c2 fe ff ff       	jmpq   43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    4526:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    452d:	00 00 00 
    4530:	8b 44 24 0c          	mov    0xc(%rsp),%eax
    4534:	09 e8                	or     %ebp,%eax
    4536:	0f 84 dc fe ff ff    	je     4418 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x348>
    453c:	e9 a7 fe ff ff       	jmpq   43e8 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x318>
    4541:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4548:	49 39 c2             	cmp    %rax,%r10
    454b:	0f 83 d9 fd ff ff    	jae    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4551:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
    4556:	4e 8b 04 19          	mov    (%rcx,%r11,1),%r8
    455a:	41 8b 34 b0          	mov    (%r8,%rsi,4),%esi
    455e:	85 f6                	test   %esi,%esi
    4560:	0f 85 c4 fd ff ff    	jne    432a <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x25a>
    4566:	e9 38 fe ff ff       	jmpq   43a3 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2d3>
    456b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004570 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>:
    4570:	48 8d 05 f1 55 20 00 	lea    0x2055f1(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    4577:	53                   	push   %rbx
    4578:	48 89 fb             	mov    %rdi,%rbx
    457b:	48 89 07             	mov    %rax,(%rdi)
    457e:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
    4582:	48 8d 43 58          	lea    0x58(%rbx),%rax
    4586:	48 39 c7             	cmp    %rax,%rdi
    4589:	74 05                	je     4590 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()+0x20>
    458b:	e8 a0 da ff ff       	callq  2030 <operator delete(void*)@plt>
    4590:	48 8d 05 d1 53 20 00 	lea    0x2053d1(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    4597:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
    459b:	48 89 03             	mov    %rax,(%rbx)
    459e:	5b                   	pop    %rbx
    459f:	e9 3c db ff ff       	jmpq   20e0 <std::locale::~locale()@plt>
    45a4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    45ab:	00 00 00 
    45ae:	66 90                	xchg   %ax,%ax

00000000000045b0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>:
    45b0:	48 8d 05 b1 55 20 00 	lea    0x2055b1(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    45b7:	53                   	push   %rbx
    45b8:	48 89 fb             	mov    %rdi,%rbx
    45bb:	48 89 07             	mov    %rax,(%rdi)
    45be:	48 8b 7f 48          	mov    0x48(%rdi),%rdi
    45c2:	48 8d 43 58          	lea    0x58(%rbx),%rax
    45c6:	48 39 c7             	cmp    %rax,%rdi
    45c9:	74 05                	je     45d0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()+0x20>
    45cb:	e8 60 da ff ff       	callq  2030 <operator delete(void*)@plt>
    45d0:	48 8d 05 91 53 20 00 	lea    0x205391(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    45d7:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
    45db:	48 89 03             	mov    %rax,(%rbx)
    45de:	e8 fd da ff ff       	callq  20e0 <std::locale::~locale()@plt>
    45e3:	48 89 df             	mov    %rbx,%rdi
    45e6:	be 68 00 00 00       	mov    $0x68,%esi
    45eb:	5b                   	pop    %rbx
    45ec:	e9 5f da ff ff       	jmpq   2050 <operator delete(void*, unsigned long)@plt>
    45f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    45f8:	00 00 00 
    45fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004600 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>:
    4600:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    4604:	48 8b 07             	mov    (%rdi),%rax
    4607:	48 39 c2             	cmp    %rax,%rdx
    460a:	74 5c                	je     4668 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x68>
    460c:	41 54                	push   %r12
    460e:	55                   	push   %rbp
    460f:	49 89 fc             	mov    %rdi,%r12
    4612:	53                   	push   %rbx
    4613:	48 8d 58 18          	lea    0x18(%rax),%rbx
    4617:	48 29 da             	sub    %rbx,%rdx
    461a:	48 c1 ea 03          	shr    $0x3,%rdx
    461e:	48 8d 6c d0 18       	lea    0x18(%rax,%rdx,8),%rbp
    4623:	eb 14                	jmp    4639 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x39>
    4625:	0f 1f 00             	nopl   (%rax)
    4628:	e8 03 da ff ff       	callq  2030 <operator delete(void*)@plt>
    462d:	48 39 dd             	cmp    %rbx,%rbp
    4630:	48 89 d8             	mov    %rbx,%rax
    4633:	74 14                	je     4649 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x49>
    4635:	48 83 c3 18          	add    $0x18,%rbx
    4639:	48 8b 38             	mov    (%rax),%rdi
    463c:	48 85 ff             	test   %rdi,%rdi
    463f:	75 e7                	jne    4628 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x28>
    4641:	48 39 eb             	cmp    %rbp,%rbx
    4644:	48 89 d8             	mov    %rbx,%rax
    4647:	75 ec                	jne    4635 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x35>
    4649:	49 8b 04 24          	mov    (%r12),%rax
    464d:	48 85 c0             	test   %rax,%rax
    4650:	74 0e                	je     4660 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x60>
    4652:	5b                   	pop    %rbx
    4653:	5d                   	pop    %rbp
    4654:	41 5c                	pop    %r12
    4656:	48 89 c7             	mov    %rax,%rdi
    4659:	e9 d2 d9 ff ff       	jmpq   2030 <operator delete(void*)@plt>
    465e:	66 90                	xchg   %ax,%ax
    4660:	5b                   	pop    %rbx
    4661:	5d                   	pop    %rbp
    4662:	41 5c                	pop    %r12
    4664:	c3                   	retq   
    4665:	0f 1f 00             	nopl   (%rax)
    4668:	48 85 c0             	test   %rax,%rax
    466b:	74 0b                	je     4678 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()+0x78>
    466d:	48 89 c7             	mov    %rax,%rdi
    4670:	e9 bb d9 ff ff       	jmpq   2030 <operator delete(void*)@plt>
    4675:	0f 1f 00             	nopl   (%rax)
    4678:	f3 c3                	repz retq 
    467a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004680 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)>:
    4680:	41 57                	push   %r15
    4682:	41 56                	push   %r14
    4684:	49 89 f6             	mov    %rsi,%r14
    4687:	41 55                	push   %r13
    4689:	41 54                	push   %r12
    468b:	49 89 fd             	mov    %rdi,%r13
    468e:	55                   	push   %rbp
    468f:	53                   	push   %rbx
    4690:	48 83 ec 18          	sub    $0x18,%rsp
    4694:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
    4698:	48 8b 1f             	mov    (%rdi),%rbx
    469b:	48 89 c8             	mov    %rcx,%rax
    469e:	48 29 de             	sub    %rbx,%rsi
    46a1:	48 29 d8             	sub    %rbx,%rax
    46a4:	48 c1 f8 05          	sar    $0x5,%rax
    46a8:	48 85 c0             	test   %rax,%rax
    46ab:	0f 84 f7 00 00 00    	je     47a8 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x128>
    46b1:	48 8d 3c 00          	lea    (%rax,%rax,1),%rdi
    46b5:	49 c7 c4 e0 ff ff ff 	mov    $0xffffffffffffffe0,%r12
    46bc:	48 39 f8             	cmp    %rdi,%rax
    46bf:	0f 86 fb 00 00 00    	jbe    47c0 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x140>
    46c5:	4c 89 e7             	mov    %r12,%rdi
    46c8:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    46cd:	48 89 34 24          	mov    %rsi,(%rsp)
    46d1:	e8 6a d9 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    46d6:	49 8b 5d 00          	mov    0x0(%r13),%rbx
    46da:	49 8b 4d 08          	mov    0x8(%r13),%rcx
    46de:	4c 8d 78 20          	lea    0x20(%rax),%r15
    46e2:	48 8b 34 24          	mov    (%rsp),%rsi
    46e6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    46eb:	48 89 c5             	mov    %rax,%rbp
    46ee:	49 01 c4             	add    %rax,%r12
    46f1:	f3 0f 6f 02          	movdqu (%rdx),%xmm0
    46f5:	49 39 de             	cmp    %rbx,%r14
    46f8:	0f 11 44 35 00       	movups %xmm0,0x0(%rbp,%rsi,1)
    46fd:	f3 0f 6f 42 10       	movdqu 0x10(%rdx),%xmm0
    4702:	0f 11 44 35 10       	movups %xmm0,0x10(%rbp,%rsi,1)
    4707:	74 45                	je     474e <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0xce>
    4709:	48 8d 43 20          	lea    0x20(%rbx),%rax
    470d:	4c 89 f7             	mov    %r14,%rdi
    4710:	48 29 c7             	sub    %rax,%rdi
    4713:	48 89 f8             	mov    %rdi,%rax
    4716:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
    471a:	48 8d 70 20          	lea    0x20(%rax),%rsi
    471e:	31 c0                	xor    %eax,%eax
    4720:	eb 09                	jmp    472b <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0xab>
    4722:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4728:	48 89 d0             	mov    %rdx,%rax
    472b:	f3 0f 6f 04 03       	movdqu (%rbx,%rax,1),%xmm0
    4730:	48 8d 50 20          	lea    0x20(%rax),%rdx
    4734:	0f 11 44 05 00       	movups %xmm0,0x0(%rbp,%rax,1)
    4739:	48 39 d6             	cmp    %rdx,%rsi
    473c:	f3 0f 6f 44 03 10    	movdqu 0x10(%rbx,%rax,1),%xmm0
    4742:	0f 11 44 05 10       	movups %xmm0,0x10(%rbp,%rax,1)
    4747:	75 df                	jne    4728 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0xa8>
    4749:	4c 8d 7c 05 40       	lea    0x40(%rbp,%rax,1),%r15
    474e:	49 39 ce             	cmp    %rcx,%r14
    4751:	74 28                	je     477b <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0xfb>
    4753:	49 8d 46 20          	lea    0x20(%r14),%rax
    4757:	4c 89 ff             	mov    %r15,%rdi
    475a:	4c 89 f6             	mov    %r14,%rsi
    475d:	48 29 c1             	sub    %rax,%rcx
    4760:	48 83 e1 e0          	and    $0xffffffffffffffe0,%rcx
    4764:	48 83 c1 20          	add    $0x20,%rcx
    4768:	48 89 ca             	mov    %rcx,%rdx
    476b:	48 89 0c 24          	mov    %rcx,(%rsp)
    476f:	e8 8c d8 ff ff       	callq  2000 <memcpy@plt>
    4774:	48 8b 0c 24          	mov    (%rsp),%rcx
    4778:	49 01 cf             	add    %rcx,%r15
    477b:	48 85 db             	test   %rbx,%rbx
    477e:	74 08                	je     4788 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x108>
    4780:	48 89 df             	mov    %rbx,%rdi
    4783:	e8 a8 d8 ff ff       	callq  2030 <operator delete(void*)@plt>
    4788:	49 89 6d 00          	mov    %rbp,0x0(%r13)
    478c:	4d 89 7d 08          	mov    %r15,0x8(%r13)
    4790:	4d 89 65 10          	mov    %r12,0x10(%r13)
    4794:	48 83 c4 18          	add    $0x18,%rsp
    4798:	5b                   	pop    %rbx
    4799:	5d                   	pop    %rbp
    479a:	41 5c                	pop    %r12
    479c:	41 5d                	pop    %r13
    479e:	41 5e                	pop    %r14
    47a0:	41 5f                	pop    %r15
    47a2:	c3                   	retq   
    47a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    47a8:	bf 01 00 00 00       	mov    $0x1,%edi
    47ad:	48 c1 e7 05          	shl    $0x5,%rdi
    47b1:	49 89 fc             	mov    %rdi,%r12
    47b4:	e9 0c ff ff ff       	jmpq   46c5 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x45>
    47b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    47c0:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
    47c7:	ff ff 07 
    47ca:	48 39 c7             	cmp    %rax,%rdi
    47cd:	0f 87 f2 fe ff ff    	ja     46c5 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x45>
    47d3:	48 85 ff             	test   %rdi,%rdi
    47d6:	75 d5                	jne    47ad <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x12d>
    47d8:	41 bf 20 00 00 00    	mov    $0x20,%r15d
    47de:	45 31 e4             	xor    %r12d,%r12d
    47e1:	31 ed                	xor    %ebp,%ebp
    47e3:	e9 09 ff ff ff       	jmpq   46f1 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)+0x71>
    47e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    47ef:	00 

00000000000047f0 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()>:
    47f0:	41 55                	push   %r13
    47f2:	41 54                	push   %r12
    47f4:	31 c0                	xor    %eax,%eax
    47f6:	55                   	push   %rbp
    47f7:	53                   	push   %rbx
    47f8:	48 83 ec 08          	sub    $0x8,%rsp
    47fc:	4c 8b 67 08          	mov    0x8(%rdi),%r12
    4800:	48 8b 1f             	mov    (%rdi),%rbx
    4803:	48 8b 57 10          	mov    0x10(%rdi),%rdx
    4807:	4d 89 e5             	mov    %r12,%r13
    480a:	49 29 dd             	sub    %rbx,%r13
    480d:	48 29 da             	sub    %rbx,%rdx
    4810:	4c 89 e9             	mov    %r13,%rcx
    4813:	48 c1 fa 05          	sar    $0x5,%rdx
    4817:	48 c1 f9 05          	sar    $0x5,%rcx
    481b:	48 39 d1             	cmp    %rdx,%rcx
    481e:	0f 84 87 00 00 00    	je     48ab <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xbb>
    4824:	31 c0                	xor    %eax,%eax
    4826:	48 85 c9             	test   %rcx,%rcx
    4829:	48 89 fd             	mov    %rdi,%rbp
    482c:	48 89 df             	mov    %rbx,%rdi
    482f:	74 1f                	je     4850 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0x60>
    4831:	48 b8 ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rax
    4838:	ff ff 07 
    483b:	48 39 c1             	cmp    %rax,%rcx
    483e:	0f 87 81 00 00 00    	ja     48c5 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xd5>
    4844:	4c 89 ef             	mov    %r13,%rdi
    4847:	e8 f4 d7 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    484c:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
    4850:	49 01 c5             	add    %rax,%r13
    4853:	49 39 dc             	cmp    %rbx,%r12
    4856:	74 68                	je     48c0 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xd0>
    4858:	48 8d 53 20          	lea    0x20(%rbx),%rdx
    485c:	49 29 d4             	sub    %rdx,%r12
    485f:	31 d2                	xor    %edx,%edx
    4861:	49 83 e4 e0          	and    $0xffffffffffffffe0,%r12
    4865:	49 8d 4c 24 20       	lea    0x20(%r12),%rcx
    486a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4870:	f3 0f 6f 04 13       	movdqu (%rbx,%rdx,1),%xmm0
    4875:	0f 11 04 10          	movups %xmm0,(%rax,%rdx,1)
    4879:	f3 0f 6f 44 13 10    	movdqu 0x10(%rbx,%rdx,1),%xmm0
    487f:	0f 11 44 10 10       	movups %xmm0,0x10(%rax,%rdx,1)
    4884:	48 83 c2 20          	add    $0x20,%rdx
    4888:	48 39 d1             	cmp    %rdx,%rcx
    488b:	75 e3                	jne    4870 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0x80>
    488d:	48 01 c1             	add    %rax,%rcx
    4890:	48 85 ff             	test   %rdi,%rdi
    4893:	48 89 45 00          	mov    %rax,0x0(%rbp)
    4897:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    489b:	4c 89 6d 10          	mov    %r13,0x10(%rbp)
    489f:	74 05                	je     48a6 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xb6>
    48a1:	e8 8a d7 ff ff       	callq  2030 <operator delete(void*)@plt>
    48a6:	b8 01 00 00 00       	mov    $0x1,%eax
    48ab:	48 83 c4 08          	add    $0x8,%rsp
    48af:	5b                   	pop    %rbx
    48b0:	5d                   	pop    %rbp
    48b1:	41 5c                	pop    %r12
    48b3:	41 5d                	pop    %r13
    48b5:	c3                   	retq   
    48b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    48bd:	00 00 00 
    48c0:	48 89 c1             	mov    %rax,%rcx
    48c3:	eb cb                	jmp    4890 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xa0>
    48c5:	e8 56 d6 ff ff       	callq  1f20 <std::__throw_bad_alloc()@plt>
    48ca:	48 89 c7             	mov    %rax,%rdi
    48cd:	e8 5e d6 ff ff       	callq  1f30 <__cxa_begin_catch@plt>
    48d2:	e8 79 d8 ff ff       	callq  2150 <__cxa_end_catch@plt>
    48d7:	31 c0                	xor    %eax,%eax
    48d9:	eb d0                	jmp    48ab <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()+0xbb>
    48db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000048e0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>:
    48e0:	41 57                	push   %r15
    48e2:	41 56                	push   %r14
    48e4:	49 89 f6             	mov    %rsi,%r14
    48e7:	41 55                	push   %r13
    48e9:	41 54                	push   %r12
    48eb:	49 89 f4             	mov    %rsi,%r12
    48ee:	55                   	push   %rbp
    48ef:	53                   	push   %rbx
    48f0:	48 89 fd             	mov    %rdi,%rbp
    48f3:	48 83 ec 18          	sub    $0x18,%rsp
    48f7:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
    48fb:	48 8b 1f             	mov    (%rdi),%rbx
    48fe:	48 89 c8             	mov    %rcx,%rax
    4901:	49 29 de             	sub    %rbx,%r14
    4904:	48 29 d8             	sub    %rbx,%rax
    4907:	48 c1 f8 02          	sar    $0x2,%rax
    490b:	48 85 c0             	test   %rax,%rax
    490e:	0f 84 b4 00 00 00    	je     49c8 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xe8>
    4914:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    4918:	49 c7 c7 fc ff ff ff 	mov    $0xfffffffffffffffc,%r15
    491f:	48 39 f0             	cmp    %rsi,%rax
    4922:	0f 86 b8 00 00 00    	jbe    49e0 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x100>
    4928:	4c 89 ff             	mov    %r15,%rdi
    492b:	48 89 14 24          	mov    %rdx,(%rsp)
    492f:	e8 0c d7 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    4934:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
    4938:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    493c:	4d 89 e0             	mov    %r12,%r8
    493f:	48 8b 14 24          	mov    (%rsp),%rdx
    4943:	49 89 c5             	mov    %rax,%r13
    4946:	49 01 c7             	add    %rax,%r15
    4949:	49 29 d8             	sub    %rbx,%r8
    494c:	8b 02                	mov    (%rdx),%eax
    494e:	4c 39 e3             	cmp    %r12,%rbx
    4951:	43 89 44 35 00       	mov    %eax,0x0(%r13,%r14,1)
    4956:	74 20                	je     4978 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x98>
    4958:	4c 89 c2             	mov    %r8,%rdx
    495b:	48 89 de             	mov    %rbx,%rsi
    495e:	4c 89 ef             	mov    %r13,%rdi
    4961:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    4966:	4c 89 04 24          	mov    %r8,(%rsp)
    496a:	e8 d1 d7 ff ff       	callq  2140 <memmove@plt>
    496f:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4974:	4c 8b 04 24          	mov    (%rsp),%r8
    4978:	49 89 ce             	mov    %rcx,%r14
    497b:	4f 8d 44 05 04       	lea    0x4(%r13,%r8,1),%r8
    4980:	4d 29 e6             	sub    %r12,%r14
    4983:	4c 39 e1             	cmp    %r12,%rcx
    4986:	74 11                	je     4999 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xb9>
    4988:	4c 89 c7             	mov    %r8,%rdi
    498b:	4c 89 f2             	mov    %r14,%rdx
    498e:	4c 89 e6             	mov    %r12,%rsi
    4991:	e8 6a d6 ff ff       	callq  2000 <memcpy@plt>
    4996:	49 89 c0             	mov    %rax,%r8
    4999:	4d 01 c6             	add    %r8,%r14
    499c:	48 85 db             	test   %rbx,%rbx
    499f:	74 08                	je     49a9 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xc9>
    49a1:	48 89 df             	mov    %rbx,%rdi
    49a4:	e8 87 d6 ff ff       	callq  2030 <operator delete(void*)@plt>
    49a9:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    49ad:	4c 89 75 08          	mov    %r14,0x8(%rbp)
    49b1:	4c 89 7d 10          	mov    %r15,0x10(%rbp)
    49b5:	48 83 c4 18          	add    $0x18,%rsp
    49b9:	5b                   	pop    %rbx
    49ba:	5d                   	pop    %rbp
    49bb:	41 5c                	pop    %r12
    49bd:	41 5d                	pop    %r13
    49bf:	41 5e                	pop    %r14
    49c1:	41 5f                	pop    %r15
    49c3:	c3                   	retq   
    49c4:	0f 1f 40 00          	nopl   0x0(%rax)
    49c8:	be 01 00 00 00       	mov    $0x1,%esi
    49cd:	4c 8d 3c b5 00 00 00 	lea    0x0(,%rsi,4),%r15
    49d4:	00 
    49d5:	e9 4e ff ff ff       	jmpq   4928 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x48>
    49da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    49e0:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    49e7:	ff ff 3f 
    49ea:	48 39 c6             	cmp    %rax,%rsi
    49ed:	0f 87 35 ff ff ff    	ja     4928 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x48>
    49f3:	48 85 f6             	test   %rsi,%rsi
    49f6:	75 d5                	jne    49cd <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xed>
    49f8:	4d 89 f0             	mov    %r14,%r8
    49fb:	45 31 ff             	xor    %r15d,%r15d
    49fe:	45 31 ed             	xor    %r13d,%r13d
    4a01:	e9 46 ff ff ff       	jmpq   494c <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x6c>
    4a06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4a0d:	00 00 00 

0000000000004a10 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)>:
    4a10:	41 57                	push   %r15
    4a12:	41 56                	push   %r14
    4a14:	49 89 d7             	mov    %rdx,%r15
    4a17:	41 55                	push   %r13
    4a19:	41 54                	push   %r12
    4a1b:	48 b9 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rcx
    4a22:	aa aa aa 
    4a25:	55                   	push   %rbp
    4a26:	53                   	push   %rbx
    4a27:	48 89 f5             	mov    %rsi,%rbp
    4a2a:	49 89 fc             	mov    %rdi,%r12
    4a2d:	48 89 f3             	mov    %rsi,%rbx
    4a30:	48 83 ec 18          	sub    $0x18,%rsp
    4a34:	48 8b 17             	mov    (%rdi),%rdx
    4a37:	48 8b 47 08          	mov    0x8(%rdi),%rax
    4a3b:	48 29 d0             	sub    %rdx,%rax
    4a3e:	48 29 d5             	sub    %rdx,%rbp
    4a41:	48 c1 f8 03          	sar    $0x3,%rax
    4a45:	48 0f af c1          	imul   %rcx,%rax
    4a49:	48 85 c0             	test   %rax,%rax
    4a4c:	0f 84 2e 02 00 00    	je     4c80 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x270>
    4a52:	4c 8d 2c 00          	lea    (%rax,%rax,1),%r13
    4a56:	4c 39 e8             	cmp    %r13,%rax
    4a59:	0f 86 39 02 00 00    	jbe    4c98 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x288>
    4a5f:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
    4a66:	4c 89 ef             	mov    %r13,%rdi
    4a69:	e8 d2 d5 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    4a6e:	49 89 c6             	mov    %rax,%r14
    4a71:	49 8b 57 08          	mov    0x8(%r15),%rdx
    4a75:	49 8b 37             	mov    (%r15),%rsi
    4a78:	4c 01 f5             	add    %r14,%rbp
    4a7b:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
    4a82:	00 
    4a83:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
    4a8a:	00 
    4a8b:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    4a92:	00 
    4a93:	48 89 d0             	mov    %rdx,%rax
    4a96:	48 29 f0             	sub    %rsi,%rax
    4a99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4a9e:	48 c1 f8 02          	sar    $0x2,%rax
    4aa2:	48 85 c0             	test   %rax,%rax
    4aa5:	0f 84 25 02 00 00    	je     4cd0 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2c0>
    4aab:	48 ba ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rdx
    4ab2:	ff ff 3f 
    4ab5:	48 39 d0             	cmp    %rdx,%rax
    4ab8:	0f 87 21 02 00 00    	ja     4cdf <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2cf>
    4abe:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4ac3:	e8 78 d5 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    4ac8:	49 8b 57 08          	mov    0x8(%r15),%rdx
    4acc:	49 8b 37             	mov    (%r15),%rsi
    4acf:	48 89 c1             	mov    %rax,%rcx
    4ad2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    4ad7:	49 89 d7             	mov    %rdx,%r15
    4ada:	49 29 f7             	sub    %rsi,%r15
    4add:	48 01 c8             	add    %rcx,%rax
    4ae0:	48 39 f2             	cmp    %rsi,%rdx
    4ae3:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
    4ae7:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    4aeb:	48 89 45 10          	mov    %rax,0x10(%rbp)
    4aef:	74 0e                	je     4aff <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0xef>
    4af1:	48 89 cf             	mov    %rcx,%rdi
    4af4:	4c 89 fa             	mov    %r15,%rdx
    4af7:	e8 44 d6 ff ff       	callq  2140 <memmove@plt>
    4afc:	48 89 c1             	mov    %rax,%rcx
    4aff:	4c 01 f9             	add    %r15,%rcx
    4b02:	48 89 4d 08          	mov    %rcx,0x8(%rbp)
    4b06:	49 8b 0c 24          	mov    (%r12),%rcx
    4b0a:	48 39 d9             	cmp    %rbx,%rcx
    4b0d:	0f 84 ad 01 00 00    	je     4cc0 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2b0>
    4b13:	48 8d 41 18          	lea    0x18(%rcx),%rax
    4b17:	48 89 de             	mov    %rbx,%rsi
    4b1a:	48 89 ca             	mov    %rcx,%rdx
    4b1d:	48 29 c6             	sub    %rax,%rsi
    4b20:	48 89 f0             	mov    %rsi,%rax
    4b23:	48 c1 e8 03          	shr    $0x3,%rax
    4b27:	4d 8d 44 c6 18       	lea    0x18(%r14,%rax,8),%r8
    4b2c:	4c 89 f0             	mov    %r14,%rax
    4b2f:	90                   	nop
    4b30:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    4b37:	00 
    4b38:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    4b3f:	00 
    4b40:	48 83 c0 18          	add    $0x18,%rax
    4b44:	48 c7 40 e8 00 00 00 	movq   $0x0,-0x18(%rax)
    4b4b:	00 
    4b4c:	48 8b 32             	mov    (%rdx),%rsi
    4b4f:	48 83 c2 18          	add    $0x18,%rdx
    4b53:	48 89 70 e8          	mov    %rsi,-0x18(%rax)
    4b57:	48 8b 7a f0          	mov    -0x10(%rdx),%rdi
    4b5b:	48 c7 42 e8 00 00 00 	movq   $0x0,-0x18(%rdx)
    4b62:	00 
    4b63:	48 8b 70 f0          	mov    -0x10(%rax),%rsi
    4b67:	48 89 78 f0          	mov    %rdi,-0x10(%rax)
    4b6b:	48 8b 7a f8          	mov    -0x8(%rdx),%rdi
    4b6f:	48 89 72 f0          	mov    %rsi,-0x10(%rdx)
    4b73:	48 8b 70 f8          	mov    -0x8(%rax),%rsi
    4b77:	48 89 78 f8          	mov    %rdi,-0x8(%rax)
    4b7b:	48 89 72 f8          	mov    %rsi,-0x8(%rdx)
    4b7f:	4c 39 c0             	cmp    %r8,%rax
    4b82:	75 ac                	jne    4b30 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x120>
    4b84:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    4b89:	48 8d 68 18          	lea    0x18(%rax),%rbp
    4b8d:	48 39 df             	cmp    %rbx,%rdi
    4b90:	0f 84 7f 00 00 00    	je     4c15 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x205>
    4b96:	48 8d 53 18          	lea    0x18(%rbx),%rdx
    4b9a:	48 89 fe             	mov    %rdi,%rsi
    4b9d:	48 29 d6             	sub    %rdx,%rsi
    4ba0:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaab,%rdx
    4ba7:	aa aa 0a 
    4baa:	48 c1 ee 03          	shr    $0x3,%rsi
    4bae:	48 0f af f2          	imul   %rdx,%rsi
    4bb2:	48 ba ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rdx
    4bb9:	ff ff 1f 
    4bbc:	48 21 d6             	and    %rdx,%rsi
    4bbf:	48 8d 14 76          	lea    (%rsi,%rsi,2),%rdx
    4bc3:	4c 8d 44 d0 30       	lea    0x30(%rax,%rdx,8),%r8
    4bc8:	48 89 e8             	mov    %rbp,%rax
    4bcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4bd0:	48 8b 13             	mov    (%rbx),%rdx
    4bd3:	48 83 c0 18          	add    $0x18,%rax
    4bd7:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    4bde:	48 83 c3 18          	add    $0x18,%rbx
    4be2:	48 89 50 e8          	mov    %rdx,-0x18(%rax)
    4be6:	48 8b 53 f0          	mov    -0x10(%rbx),%rdx
    4bea:	48 c7 43 f0 00 00 00 	movq   $0x0,-0x10(%rbx)
    4bf1:	00 
    4bf2:	48 89 50 f0          	mov    %rdx,-0x10(%rax)
    4bf6:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
    4bfa:	48 c7 43 f8 00 00 00 	movq   $0x0,-0x8(%rbx)
    4c01:	00 
    4c02:	48 89 50 f8          	mov    %rdx,-0x8(%rax)
    4c06:	4c 39 c0             	cmp    %r8,%rax
    4c09:	75 c5                	jne    4bd0 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x1c0>
    4c0b:	48 8d 44 76 03       	lea    0x3(%rsi,%rsi,2),%rax
    4c10:	48 8d 6c c5 00       	lea    0x0(%rbp,%rax,8),%rbp
    4c15:	48 39 f9             	cmp    %rdi,%rcx
    4c18:	74 3b                	je     4c55 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x245>
    4c1a:	48 8d 59 18          	lea    0x18(%rcx),%rbx
    4c1e:	48 29 df             	sub    %rbx,%rdi
    4c21:	48 c1 ef 03          	shr    $0x3,%rdi
    4c25:	4c 8d 7c f9 18       	lea    0x18(%rcx,%rdi,8),%r15
    4c2a:	eb 15                	jmp    4c41 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x231>
    4c2c:	0f 1f 40 00          	nopl   0x0(%rax)
    4c30:	e8 fb d3 ff ff       	callq  2030 <operator delete(void*)@plt>
    4c35:	49 39 df             	cmp    %rbx,%r15
    4c38:	48 89 d9             	mov    %rbx,%rcx
    4c3b:	74 14                	je     4c51 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x241>
    4c3d:	48 83 c3 18          	add    $0x18,%rbx
    4c41:	48 8b 39             	mov    (%rcx),%rdi
    4c44:	48 85 ff             	test   %rdi,%rdi
    4c47:	75 e7                	jne    4c30 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x220>
    4c49:	49 39 df             	cmp    %rbx,%r15
    4c4c:	48 89 d9             	mov    %rbx,%rcx
    4c4f:	75 ec                	jne    4c3d <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x22d>
    4c51:	49 8b 3c 24          	mov    (%r12),%rdi
    4c55:	48 85 ff             	test   %rdi,%rdi
    4c58:	74 05                	je     4c5f <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x24f>
    4c5a:	e8 d1 d3 ff ff       	callq  2030 <operator delete(void*)@plt>
    4c5f:	4d 01 f5             	add    %r14,%r13
    4c62:	4d 89 34 24          	mov    %r14,(%r12)
    4c66:	49 89 6c 24 08       	mov    %rbp,0x8(%r12)
    4c6b:	4d 89 6c 24 10       	mov    %r13,0x10(%r12)
    4c70:	48 83 c4 18          	add    $0x18,%rsp
    4c74:	5b                   	pop    %rbx
    4c75:	5d                   	pop    %rbp
    4c76:	41 5c                	pop    %r12
    4c78:	41 5d                	pop    %r13
    4c7a:	41 5e                	pop    %r14
    4c7c:	41 5f                	pop    %r15
    4c7e:	c3                   	retq   
    4c7f:	90                   	nop
    4c80:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    4c86:	4f 8d 6c 6d 00       	lea    0x0(%r13,%r13,2),%r13
    4c8b:	49 c1 e5 03          	shl    $0x3,%r13
    4c8f:	e9 d2 fd ff ff       	jmpq   4a66 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x56>
    4c94:	0f 1f 40 00          	nopl   0x0(%rax)
    4c98:	48 b8 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaa,%rax
    4c9f:	aa aa 0a 
    4ca2:	49 39 c5             	cmp    %rax,%r13
    4ca5:	0f 87 b4 fd ff ff    	ja     4a5f <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x4f>
    4cab:	4d 85 ed             	test   %r13,%r13
    4cae:	75 d6                	jne    4c86 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x276>
    4cb0:	45 31 f6             	xor    %r14d,%r14d
    4cb3:	e9 b9 fd ff ff       	jmpq   4a71 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x61>
    4cb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    4cbf:	00 
    4cc0:	4c 89 f0             	mov    %r14,%rax
    4cc3:	e9 bc fe ff ff       	jmpq   4b84 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x174>
    4cc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    4ccf:	00 
    4cd0:	4c 8b 7c 24 08       	mov    0x8(%rsp),%r15
    4cd5:	31 c9                	xor    %ecx,%ecx
    4cd7:	4c 89 f8             	mov    %r15,%rax
    4cda:	e9 fe fd ff ff       	jmpq   4add <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0xcd>
    4cdf:	e8 3c d2 ff ff       	callq  1f20 <std::__throw_bad_alloc()@plt>
    4ce4:	48 89 c7             	mov    %rax,%rdi
    4ce7:	e8 44 d2 ff ff       	callq  1f30 <__cxa_begin_catch@plt>
    4cec:	4d 85 f6             	test   %r14,%r14
    4cef:	74 1d                	je     4d0e <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2fe>
    4cf1:	4c 89 f7             	mov    %r14,%rdi
    4cf4:	e8 37 d3 ff ff       	callq  2030 <operator delete(void*)@plt>
    4cf9:	e8 f2 d3 ff ff       	callq  20f0 <__cxa_rethrow@plt>
    4cfe:	48 89 c3             	mov    %rax,%rbx
    4d01:	e8 4a d4 ff ff       	callq  2150 <__cxa_end_catch@plt>
    4d06:	48 89 df             	mov    %rbx,%rdi
    4d09:	e8 82 d4 ff ff       	callq  2190 <_Unwind_Resume@plt>
    4d0e:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
    4d12:	48 85 ff             	test   %rdi,%rdi
    4d15:	74 e2                	je     4cf9 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2e9>
    4d17:	e8 14 d3 ff ff       	callq  2030 <operator delete(void*)@plt>
    4d1c:	eb db                	jmp    4cf9 <void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)+0x2e9>
    4d1e:	66 90                	xchg   %ax,%ax

0000000000004d20 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)>:
    4d20:	41 57                	push   %r15
    4d22:	41 56                	push   %r14
    4d24:	49 89 f6             	mov    %rsi,%r14
    4d27:	41 55                	push   %r13
    4d29:	41 54                	push   %r12
    4d2b:	49 89 f4             	mov    %rsi,%r12
    4d2e:	55                   	push   %rbp
    4d2f:	53                   	push   %rbx
    4d30:	48 89 fd             	mov    %rdi,%rbp
    4d33:	48 83 ec 18          	sub    $0x18,%rsp
    4d37:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
    4d3b:	48 8b 1f             	mov    (%rdi),%rbx
    4d3e:	48 89 c8             	mov    %rcx,%rax
    4d41:	49 29 de             	sub    %rbx,%r14
    4d44:	48 29 d8             	sub    %rbx,%rax
    4d47:	48 c1 f8 03          	sar    $0x3,%rax
    4d4b:	48 85 c0             	test   %rax,%rax
    4d4e:	0f 84 b4 00 00 00    	je     4e08 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0xe8>
    4d54:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    4d58:	49 c7 c7 f8 ff ff ff 	mov    $0xfffffffffffffff8,%r15
    4d5f:	48 39 f0             	cmp    %rsi,%rax
    4d62:	0f 86 b8 00 00 00    	jbe    4e20 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0x100>
    4d68:	4c 89 ff             	mov    %r15,%rdi
    4d6b:	48 89 14 24          	mov    %rdx,(%rsp)
    4d6f:	e8 cc d2 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    4d74:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
    4d78:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    4d7c:	4d 89 e0             	mov    %r12,%r8
    4d7f:	48 8b 14 24          	mov    (%rsp),%rdx
    4d83:	49 89 c5             	mov    %rax,%r13
    4d86:	49 01 c7             	add    %rax,%r15
    4d89:	49 29 d8             	sub    %rbx,%r8
    4d8c:	48 8b 02             	mov    (%rdx),%rax
    4d8f:	4c 39 e3             	cmp    %r12,%rbx
    4d92:	4b 89 44 35 00       	mov    %rax,0x0(%r13,%r14,1)
    4d97:	74 20                	je     4db9 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0x99>
    4d99:	4c 89 c2             	mov    %r8,%rdx
    4d9c:	48 89 de             	mov    %rbx,%rsi
    4d9f:	4c 89 ef             	mov    %r13,%rdi
    4da2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    4da7:	4c 89 04 24          	mov    %r8,(%rsp)
    4dab:	e8 90 d3 ff ff       	callq  2140 <memmove@plt>
    4db0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    4db5:	4c 8b 04 24          	mov    (%rsp),%r8
    4db9:	49 89 ce             	mov    %rcx,%r14
    4dbc:	4f 8d 44 05 08       	lea    0x8(%r13,%r8,1),%r8
    4dc1:	4d 29 e6             	sub    %r12,%r14
    4dc4:	4c 39 e1             	cmp    %r12,%rcx
    4dc7:	74 11                	je     4dda <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0xba>
    4dc9:	4c 89 c7             	mov    %r8,%rdi
    4dcc:	4c 89 f2             	mov    %r14,%rdx
    4dcf:	4c 89 e6             	mov    %r12,%rsi
    4dd2:	e8 29 d2 ff ff       	callq  2000 <memcpy@plt>
    4dd7:	49 89 c0             	mov    %rax,%r8
    4dda:	4d 01 c6             	add    %r8,%r14
    4ddd:	48 85 db             	test   %rbx,%rbx
    4de0:	74 08                	je     4dea <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0xca>
    4de2:	48 89 df             	mov    %rbx,%rdi
    4de5:	e8 46 d2 ff ff       	callq  2030 <operator delete(void*)@plt>
    4dea:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    4dee:	4c 89 75 08          	mov    %r14,0x8(%rbp)
    4df2:	4c 89 7d 10          	mov    %r15,0x10(%rbp)
    4df6:	48 83 c4 18          	add    $0x18,%rsp
    4dfa:	5b                   	pop    %rbx
    4dfb:	5d                   	pop    %rbp
    4dfc:	41 5c                	pop    %r12
    4dfe:	41 5d                	pop    %r13
    4e00:	41 5e                	pop    %r14
    4e02:	41 5f                	pop    %r15
    4e04:	c3                   	retq   
    4e05:	0f 1f 00             	nopl   (%rax)
    4e08:	be 01 00 00 00       	mov    $0x1,%esi
    4e0d:	4c 8d 3c f5 00 00 00 	lea    0x0(,%rsi,8),%r15
    4e14:	00 
    4e15:	e9 4e ff ff ff       	jmpq   4d68 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0x48>
    4e1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4e20:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    4e27:	ff ff 1f 
    4e2a:	48 39 c6             	cmp    %rax,%rsi
    4e2d:	0f 87 35 ff ff ff    	ja     4d68 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0x48>
    4e33:	48 85 f6             	test   %rsi,%rsi
    4e36:	75 d5                	jne    4e0d <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0xed>
    4e38:	4d 89 f0             	mov    %r14,%r8
    4e3b:	45 31 ff             	xor    %r15d,%r15d
    4e3e:	45 31 ed             	xor    %r13d,%r13d
    4e41:	e9 46 ff ff ff       	jmpq   4d8c <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)+0x6c>
    4e46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4e4d:	00 00 00 

0000000000004e50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
    4e50:	41 57                	push   %r15
    4e52:	41 56                	push   %r14
    4e54:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
    4e5b:	ff ff 7f 
    4e5e:	41 55                	push   %r13
    4e60:	41 54                	push   %r12
    4e62:	49 89 d4             	mov    %rdx,%r12
    4e65:	55                   	push   %rbp
    4e66:	53                   	push   %rbx
    4e67:	4c 01 e0             	add    %r12,%rax
    4e6a:	48 83 ec 28          	sub    $0x28,%rsp
    4e6e:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    4e72:	48 29 d0             	sub    %rdx,%rax
    4e75:	49 39 c0             	cmp    %rax,%r8
    4e78:	0f 87 f7 03 00 00    	ja     5275 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x425>
    4e7e:	48 8b 07             	mov    (%rdi),%rax
    4e81:	4c 8d 57 10          	lea    0x10(%rdi),%r10
    4e85:	49 89 d1             	mov    %rdx,%r9
    4e88:	49 29 f1             	sub    %rsi,%r9
    4e8b:	4d 89 c7             	mov    %r8,%r15
    4e8e:	48 89 fb             	mov    %rdi,%rbx
    4e91:	4d 29 e7             	sub    %r12,%r15
    4e94:	4d 29 e1             	sub    %r12,%r9
    4e97:	49 89 f5             	mov    %rsi,%r13
    4e9a:	49 39 c2             	cmp    %rax,%r10
    4e9d:	4c 89 c5             	mov    %r8,%rbp
    4ea0:	4e 8d 34 3a          	lea    (%rdx,%r15,1),%r14
    4ea4:	0f 84 96 01 00 00    	je     5040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1f0>
    4eaa:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    4eae:	49 39 f6             	cmp    %rsi,%r14
    4eb1:	0f 87 98 01 00 00    	ja     504f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1ff>
    4eb7:	49 01 c5             	add    %rax,%r13
    4eba:	4d 85 c9             	test   %r9,%r9
    4ebd:	41 0f 95 c2          	setne  %r10b
    4ec1:	49 39 ec             	cmp    %rbp,%r12
    4ec4:	40 0f 95 c6          	setne  %sil
    4ec8:	41 21 f2             	and    %esi,%r10d
    4ecb:	48 39 c1             	cmp    %rax,%rcx
    4ece:	73 58                	jae    4f28 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xd8>
    4ed0:	45 84 d2             	test   %r10b,%r10b
    4ed3:	74 2b                	je     4f00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xb0>
    4ed5:	49 83 f9 01          	cmp    $0x1,%r9
    4ed9:	4b 8d 74 25 00       	lea    0x0(%r13,%r12,1),%rsi
    4ede:	49 8d 7c 2d 00       	lea    0x0(%r13,%rbp,1),%rdi
    4ee3:	0f 84 af 01 00 00    	je     5098 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x248>
    4ee9:	4c 89 ca             	mov    %r9,%rdx
    4eec:	48 89 0c 24          	mov    %rcx,(%rsp)
    4ef0:	e8 4b d2 ff ff       	callq  2140 <memmove@plt>
    4ef5:	48 8b 0c 24          	mov    (%rsp),%rcx
    4ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4f00:	48 85 ed             	test   %rbp,%rbp
    4f03:	0f 84 17 01 00 00    	je     5020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d0>
    4f09:	48 83 fd 01          	cmp    $0x1,%rbp
    4f0d:	0f 85 6d 01 00 00    	jne    5080 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x230>
    4f13:	0f b6 01             	movzbl (%rcx),%eax
    4f16:	41 88 45 00          	mov    %al,0x0(%r13)
    4f1a:	4c 8b 1b             	mov    (%rbx),%r11
    4f1d:	e9 01 01 00 00       	jmpq   5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    4f22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4f28:	48 01 d0             	add    %rdx,%rax
    4f2b:	48 39 c1             	cmp    %rax,%rcx
    4f2e:	77 a0                	ja     4ed0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x80>
    4f30:	48 85 ed             	test   %rbp,%rbp
    4f33:	0f 84 4e 02 00 00    	je     5187 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x337>
    4f39:	49 39 ec             	cmp    %rbp,%r12
    4f3c:	0f 82 45 02 00 00    	jb     5187 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x337>
    4f42:	48 83 fd 01          	cmp    $0x1,%rbp
    4f46:	0f 84 34 02 00 00    	je     5180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x330>
    4f4c:	48 89 ce             	mov    %rcx,%rsi
    4f4f:	48 89 ea             	mov    %rbp,%rdx
    4f52:	4c 89 ef             	mov    %r13,%rdi
    4f55:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    4f5a:	44 88 54 24 08       	mov    %r10b,0x8(%rsp)
    4f5f:	48 89 0c 24          	mov    %rcx,(%rsp)
    4f63:	e8 d8 d1 ff ff       	callq  2140 <memmove@plt>
    4f68:	44 0f b6 54 24 08    	movzbl 0x8(%rsp),%r10d
    4f6e:	48 8b 0c 24          	mov    (%rsp),%rcx
    4f72:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    4f77:	45 84 d2             	test   %r10b,%r10b
    4f7a:	0f 84 a0 00 00 00    	je     5020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d0>
    4f80:	49 83 f9 01          	cmp    $0x1,%r9
    4f84:	4b 8d 74 25 00       	lea    0x0(%r13,%r12,1),%rsi
    4f89:	49 8d 7c 2d 00       	lea    0x0(%r13,%rbp,1),%rdi
    4f8e:	0f 84 9c 02 00 00    	je     5230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x3e0>
    4f94:	4c 89 ca             	mov    %r9,%rdx
    4f97:	48 89 0c 24          	mov    %rcx,(%rsp)
    4f9b:	e8 a0 d1 ff ff       	callq  2140 <memmove@plt>
    4fa0:	48 8b 0c 24          	mov    (%rsp),%rcx
    4fa4:	0f 1f 40 00          	nopl   0x0(%rax)
    4fa8:	49 39 ec             	cmp    %rbp,%r12
    4fab:	73 73                	jae    5020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d0>
    4fad:	48 8d 04 29          	lea    (%rcx,%rbp,1),%rax
    4fb1:	4d 01 ec             	add    %r13,%r12
    4fb4:	49 39 c4             	cmp    %rax,%r12
    4fb7:	0f 83 53 02 00 00    	jae    5210 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x3c0>
    4fbd:	49 39 cc             	cmp    %rcx,%r12
    4fc0:	77 1e                	ja     4fe0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x190>
    4fc2:	48 83 fd 01          	cmp    $0x1,%rbp
    4fc6:	4a 8d 34 39          	lea    (%rcx,%r15,1),%rsi
    4fca:	0f 84 76 02 00 00    	je     5246 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x3f6>
    4fd0:	48 89 ea             	mov    %rbp,%rdx
    4fd3:	4c 89 ef             	mov    %r13,%rdi
    4fd6:	e8 25 d0 ff ff       	callq  2000 <memcpy@plt>
    4fdb:	4c 8b 1b             	mov    (%rbx),%r11
    4fde:	eb 43                	jmp    5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    4fe0:	49 29 cc             	sub    %rcx,%r12
    4fe3:	49 83 fc 01          	cmp    $0x1,%r12
    4fe7:	0f 84 4d 02 00 00    	je     523a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x3ea>
    4fed:	4d 85 e4             	test   %r12,%r12
    4ff0:	0f 85 6c 02 00 00    	jne    5262 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x412>
    4ff6:	48 89 ea             	mov    %rbp,%rdx
    4ff9:	49 8d 74 2d 00       	lea    0x0(%r13,%rbp,1),%rsi
    4ffe:	4b 8d 7c 25 00       	lea    0x0(%r13,%r12,1),%rdi
    5003:	4c 29 e2             	sub    %r12,%rdx
    5006:	48 83 fa 01          	cmp    $0x1,%rdx
    500a:	0f 84 45 02 00 00    	je     5255 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x405>
    5010:	48 85 d2             	test   %rdx,%rdx
    5013:	74 0b                	je     5020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d0>
    5015:	e8 e6 cf ff ff       	callq  2000 <memcpy@plt>
    501a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5020:	4c 8b 1b             	mov    (%rbx),%r11
    5023:	4c 89 73 08          	mov    %r14,0x8(%rbx)
    5027:	43 c6 04 33 00       	movb   $0x0,(%r11,%r14,1)
    502c:	48 83 c4 28          	add    $0x28,%rsp
    5030:	48 89 d8             	mov    %rbx,%rax
    5033:	5b                   	pop    %rbx
    5034:	5d                   	pop    %rbp
    5035:	41 5c                	pop    %r12
    5037:	41 5d                	pop    %r13
    5039:	41 5e                	pop    %r14
    503b:	41 5f                	pop    %r15
    503d:	c3                   	retq   
    503e:	66 90                	xchg   %ax,%ax
    5040:	49 83 fe 0f          	cmp    $0xf,%r14
    5044:	be 0f 00 00 00       	mov    $0xf,%esi
    5049:	0f 86 68 fe ff ff    	jbe    4eb7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x67>
    504f:	4d 85 f6             	test   %r14,%r14
    5052:	0f 88 29 02 00 00    	js     5281 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x431>
    5058:	4c 8d 3c 36          	lea    (%rsi,%rsi,1),%r15
    505c:	4d 39 fe             	cmp    %r15,%r14
    505f:	73 47                	jae    50a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x258>
    5061:	4d 85 ff             	test   %r15,%r15
    5064:	49 8d 7f 01          	lea    0x1(%r15),%rdi
    5068:	79 45                	jns    50af <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x25f>
    506a:	48 bf 00 00 00 00 00 	movabs $0x8000000000000000,%rdi
    5071:	00 00 80 
    5074:	49 bf ff ff ff ff ff 	movabs $0x7fffffffffffffff,%r15
    507b:	ff ff 7f 
    507e:	eb 2f                	jmp    50af <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x25f>
    5080:	48 89 ea             	mov    %rbp,%rdx
    5083:	48 89 ce             	mov    %rcx,%rsi
    5086:	4c 89 ef             	mov    %r13,%rdi
    5089:	e8 72 cf ff ff       	callq  2000 <memcpy@plt>
    508e:	4c 8b 1b             	mov    (%rbx),%r11
    5091:	eb 90                	jmp    5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    5093:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    5098:	0f b6 06             	movzbl (%rsi),%eax
    509b:	88 07                	mov    %al,(%rdi)
    509d:	e9 5e fe ff ff       	jmpq   4f00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xb0>
    50a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    50a8:	49 8d 7e 01          	lea    0x1(%r14),%rdi
    50ac:	4d 89 f7             	mov    %r14,%r15
    50af:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    50b4:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
    50b9:	4c 89 14 24          	mov    %r10,(%rsp)
    50bd:	e8 7e cf ff ff       	callq  2040 <operator new(unsigned long)@plt>
    50c2:	4d 85 ed             	test   %r13,%r13
    50c5:	49 89 c3             	mov    %rax,%r11
    50c8:	4c 8b 03             	mov    (%rbx),%r8
    50cb:	4c 8b 14 24          	mov    (%rsp),%r10
    50cf:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
    50d4:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    50d9:	74 11                	je     50ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x29c>
    50db:	49 83 fd 01          	cmp    $0x1,%r13
    50df:	0f 85 db 00 00 00    	jne    51c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x370>
    50e5:	41 0f b6 00          	movzbl (%r8),%eax
    50e9:	41 88 03             	mov    %al,(%r11)
    50ec:	48 85 c9             	test   %rcx,%rcx
    50ef:	74 47                	je     5138 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x2e8>
    50f1:	48 85 ed             	test   %rbp,%rbp
    50f4:	74 42                	je     5138 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x2e8>
    50f6:	48 83 fd 01          	cmp    $0x1,%rbp
    50fa:	4b 8d 3c 2b          	lea    (%r11,%r13,1),%rdi
    50fe:	0f 84 fc 00 00 00    	je     5200 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x3b0>
    5104:	48 89 ea             	mov    %rbp,%rdx
    5107:	48 89 ce             	mov    %rcx,%rsi
    510a:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
    510f:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
    5114:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
    5119:	4c 89 14 24          	mov    %r10,(%rsp)
    511d:	e8 de ce ff ff       	callq  2000 <memcpy@plt>
    5122:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    5127:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    512c:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
    5131:	4c 8b 14 24          	mov    (%rsp),%r10
    5135:	0f 1f 00             	nopl   (%rax)
    5138:	4d 85 c9             	test   %r9,%r9
    513b:	74 19                	je     5156 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x306>
    513d:	4b 8d 34 2c          	lea    (%r12,%r13,1),%rsi
    5141:	4c 01 ed             	add    %r13,%rbp
    5144:	49 8d 3c 2b          	lea    (%r11,%rbp,1),%rdi
    5148:	4c 01 c6             	add    %r8,%rsi
    514b:	49 83 f9 01          	cmp    $0x1,%r9
    514f:	75 47                	jne    5198 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x348>
    5151:	0f b6 06             	movzbl (%rsi),%eax
    5154:	88 07                	mov    %al,(%rdi)
    5156:	4d 39 c2             	cmp    %r8,%r10
    5159:	74 10                	je     516b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x31b>
    515b:	4c 89 c7             	mov    %r8,%rdi
    515e:	4c 89 1c 24          	mov    %r11,(%rsp)
    5162:	e8 c9 ce ff ff       	callq  2030 <operator delete(void*)@plt>
    5167:	4c 8b 1c 24          	mov    (%rsp),%r11
    516b:	4c 89 1b             	mov    %r11,(%rbx)
    516e:	4c 89 7b 10          	mov    %r15,0x10(%rbx)
    5172:	e9 ac fe ff ff       	jmpq   5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    5177:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    517e:	00 00 
    5180:	0f b6 01             	movzbl (%rcx),%eax
    5183:	41 88 45 00          	mov    %al,0x0(%r13)
    5187:	45 84 d2             	test   %r10b,%r10b
    518a:	0f 85 f0 fd ff ff    	jne    4f80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x130>
    5190:	e9 13 fe ff ff       	jmpq   4fa8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x158>
    5195:	0f 1f 00             	nopl   (%rax)
    5198:	4c 89 ca             	mov    %r9,%rdx
    519b:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
    51a0:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
    51a5:	4c 89 14 24          	mov    %r10,(%rsp)
    51a9:	e8 52 ce ff ff       	callq  2000 <memcpy@plt>
    51ae:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    51b3:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
    51b8:	4c 8b 14 24          	mov    (%rsp),%r10
    51bc:	eb 98                	jmp    5156 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x306>
    51be:	66 90                	xchg   %ax,%ax
    51c0:	4c 89 c6             	mov    %r8,%rsi
    51c3:	4c 89 ea             	mov    %r13,%rdx
    51c6:	48 89 c7             	mov    %rax,%rdi
    51c9:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    51ce:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
    51d3:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
    51d8:	4c 89 04 24          	mov    %r8,(%rsp)
    51dc:	e8 1f ce ff ff       	callq  2000 <memcpy@plt>
    51e1:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    51e6:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    51eb:	49 89 c3             	mov    %rax,%r11
    51ee:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
    51f3:	4c 8b 04 24          	mov    (%rsp),%r8
    51f7:	e9 f0 fe ff ff       	jmpq   50ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x29c>
    51fc:	0f 1f 40 00          	nopl   0x0(%rax)
    5200:	0f b6 01             	movzbl (%rcx),%eax
    5203:	88 07                	mov    %al,(%rdi)
    5205:	e9 2e ff ff ff       	jmpq   5138 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x2e8>
    520a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5210:	48 83 fd 01          	cmp    $0x1,%rbp
    5214:	0f 84 f9 fc ff ff    	je     4f13 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xc3>
    521a:	48 89 ea             	mov    %rbp,%rdx
    521d:	48 89 ce             	mov    %rcx,%rsi
    5220:	4c 89 ef             	mov    %r13,%rdi
    5223:	e8 18 cf ff ff       	callq  2140 <memmove@plt>
    5228:	4c 8b 1b             	mov    (%rbx),%r11
    522b:	e9 f3 fd ff ff       	jmpq   5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    5230:	0f b6 06             	movzbl (%rsi),%eax
    5233:	88 07                	mov    %al,(%rdi)
    5235:	e9 6e fd ff ff       	jmpq   4fa8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x158>
    523a:	0f b6 01             	movzbl (%rcx),%eax
    523d:	41 88 45 00          	mov    %al,0x0(%r13)
    5241:	e9 b0 fd ff ff       	jmpq   4ff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1a6>
    5246:	0f b6 06             	movzbl (%rsi),%eax
    5249:	41 88 45 00          	mov    %al,0x0(%r13)
    524d:	4c 8b 1b             	mov    (%rbx),%r11
    5250:	e9 ce fd ff ff       	jmpq   5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    5255:	0f b6 06             	movzbl (%rsi),%eax
    5258:	88 07                	mov    %al,(%rdi)
    525a:	4c 8b 1b             	mov    (%rbx),%r11
    525d:	e9 c1 fd ff ff       	jmpq   5023 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1d3>
    5262:	4c 89 e2             	mov    %r12,%rdx
    5265:	48 89 ce             	mov    %rcx,%rsi
    5268:	4c 89 ef             	mov    %r13,%rdi
    526b:	e8 d0 ce ff ff       	callq  2140 <memmove@plt>
    5270:	e9 81 fd ff ff       	jmpq   4ff6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x1a6>
    5275:	48 8d 3d c2 2c 00 00 	lea    0x2cc2(%rip),%rdi        # 7f3e <_IO_stdin_used+0xde>
    527c:	e8 ef cc ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    5281:	48 8d 3d 40 2c 00 00 	lea    0x2c40(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    5288:	e8 e3 cc ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    528d:	0f 1f 00             	nopl   (%rax)

0000000000005290 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)>:
    5290:	41 57                	push   %r15
    5292:	41 56                	push   %r14
    5294:	49 89 f6             	mov    %rsi,%r14
    5297:	41 55                	push   %r13
    5299:	41 54                	push   %r12
    529b:	49 89 f4             	mov    %rsi,%r12
    529e:	55                   	push   %rbp
    529f:	53                   	push   %rbx
    52a0:	48 89 fd             	mov    %rdi,%rbp
    52a3:	48 83 ec 18          	sub    $0x18,%rsp
    52a7:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
    52ab:	48 8b 1f             	mov    (%rdi),%rbx
    52ae:	48 89 c8             	mov    %rcx,%rax
    52b1:	49 29 de             	sub    %rbx,%r14
    52b4:	48 29 d8             	sub    %rbx,%rax
    52b7:	48 c1 f8 03          	sar    $0x3,%rax
    52bb:	48 85 c0             	test   %rax,%rax
    52be:	0f 84 b4 00 00 00    	je     5378 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0xe8>
    52c4:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    52c8:	49 c7 c7 f8 ff ff ff 	mov    $0xfffffffffffffff8,%r15
    52cf:	48 39 f0             	cmp    %rsi,%rax
    52d2:	0f 86 b8 00 00 00    	jbe    5390 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0x100>
    52d8:	4c 89 ff             	mov    %r15,%rdi
    52db:	48 89 14 24          	mov    %rdx,(%rsp)
    52df:	e8 5c cd ff ff       	callq  2040 <operator new(unsigned long)@plt>
    52e4:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
    52e8:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    52ec:	4d 89 e0             	mov    %r12,%r8
    52ef:	48 8b 14 24          	mov    (%rsp),%rdx
    52f3:	49 89 c5             	mov    %rax,%r13
    52f6:	49 01 c7             	add    %rax,%r15
    52f9:	49 29 d8             	sub    %rbx,%r8
    52fc:	48 8b 02             	mov    (%rdx),%rax
    52ff:	4c 39 e3             	cmp    %r12,%rbx
    5302:	4b 89 44 35 00       	mov    %rax,0x0(%r13,%r14,1)
    5307:	74 20                	je     5329 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0x99>
    5309:	4c 89 c2             	mov    %r8,%rdx
    530c:	48 89 de             	mov    %rbx,%rsi
    530f:	4c 89 ef             	mov    %r13,%rdi
    5312:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5317:	4c 89 04 24          	mov    %r8,(%rsp)
    531b:	e8 20 ce ff ff       	callq  2140 <memmove@plt>
    5320:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    5325:	4c 8b 04 24          	mov    (%rsp),%r8
    5329:	49 89 ce             	mov    %rcx,%r14
    532c:	4f 8d 44 05 08       	lea    0x8(%r13,%r8,1),%r8
    5331:	4d 29 e6             	sub    %r12,%r14
    5334:	4c 39 e1             	cmp    %r12,%rcx
    5337:	74 11                	je     534a <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0xba>
    5339:	4c 89 c7             	mov    %r8,%rdi
    533c:	4c 89 f2             	mov    %r14,%rdx
    533f:	4c 89 e6             	mov    %r12,%rsi
    5342:	e8 b9 cc ff ff       	callq  2000 <memcpy@plt>
    5347:	49 89 c0             	mov    %rax,%r8
    534a:	4d 01 c6             	add    %r8,%r14
    534d:	48 85 db             	test   %rbx,%rbx
    5350:	74 08                	je     535a <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0xca>
    5352:	48 89 df             	mov    %rbx,%rdi
    5355:	e8 d6 cc ff ff       	callq  2030 <operator delete(void*)@plt>
    535a:	4c 89 6d 00          	mov    %r13,0x0(%rbp)
    535e:	4c 89 75 08          	mov    %r14,0x8(%rbp)
    5362:	4c 89 7d 10          	mov    %r15,0x10(%rbp)
    5366:	48 83 c4 18          	add    $0x18,%rsp
    536a:	5b                   	pop    %rbx
    536b:	5d                   	pop    %rbp
    536c:	41 5c                	pop    %r12
    536e:	41 5d                	pop    %r13
    5370:	41 5e                	pop    %r14
    5372:	41 5f                	pop    %r15
    5374:	c3                   	retq   
    5375:	0f 1f 00             	nopl   (%rax)
    5378:	be 01 00 00 00       	mov    $0x1,%esi
    537d:	4c 8d 3c f5 00 00 00 	lea    0x0(,%rsi,8),%r15
    5384:	00 
    5385:	e9 4e ff ff ff       	jmpq   52d8 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0x48>
    538a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5390:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    5397:	ff ff 1f 
    539a:	48 39 c6             	cmp    %rax,%rsi
    539d:	0f 87 35 ff ff ff    	ja     52d8 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0x48>
    53a3:	48 85 f6             	test   %rsi,%rsi
    53a6:	75 d5                	jne    537d <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0xed>
    53a8:	4d 89 f0             	mov    %r14,%r8
    53ab:	45 31 ff             	xor    %r15d,%r15d
    53ae:	45 31 ed             	xor    %r13d,%r13d
    53b1:	e9 46 ff ff ff       	jmpq   52fc <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)+0x6c>
    53b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    53bd:	00 00 00 

00000000000053c0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)>:
    53c0:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    53c4:	41 55                	push   %r13
    53c6:	41 54                	push   %r12
    53c8:	49 89 d5             	mov    %rdx,%r13
    53cb:	55                   	push   %rbp
    53cc:	53                   	push   %rbx
    53cd:	49 89 c4             	mov    %rax,%r12
    53d0:	41 83 e5 01          	and    $0x1,%r13d
    53d4:	49 c1 ec 3f          	shr    $0x3f,%r12
    53d8:	49 01 c4             	add    %rax,%r12
    53db:	49 d1 fc             	sar    %r12
    53de:	4c 39 e6             	cmp    %r12,%rsi
    53e1:	0f 8d 29 01 00 00    	jge    5510 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x150>
    53e7:	49 89 f2             	mov    %rsi,%r10
    53ea:	eb 17                	jmp    5403 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x43>
    53ec:	0f 1f 40 00          	nopl   0x0(%rax)
    53f0:	4d 39 c4             	cmp    %r8,%r12
    53f3:	4a 89 1c d7          	mov    %rbx,(%rdi,%r10,8)
    53f7:	0f 8e e3 00 00 00    	jle    54e0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x120>
    53fd:	4d 89 c1             	mov    %r8,%r9
    5400:	4d 89 ca             	mov    %r9,%r10
    5403:	49 8d 42 01          	lea    0x1(%r10),%rax
    5407:	4c 8d 0c 00          	lea    (%rax,%rax,1),%r9
    540b:	48 c1 e0 04          	shl    $0x4,%rax
    540f:	48 01 f8             	add    %rdi,%rax
    5412:	4d 8d 41 ff          	lea    -0x1(%r9),%r8
    5416:	4c 8b 18             	mov    (%rax),%r11
    5419:	4a 8d 2c c7          	lea    (%rdi,%r8,8),%rbp
    541d:	f3 41 0f 10 43 10    	movss  0x10(%r11),%xmm0
    5423:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
    5427:	0f 2e 43 10          	ucomiss 0x10(%rbx),%xmm0
    542b:	77 c3                	ja     53f0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x30>
    542d:	4d 39 cc             	cmp    %r9,%r12
    5430:	4e 89 1c d7          	mov    %r11,(%rdi,%r10,8)
    5434:	7f ca                	jg     5400 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x40>
    5436:	4d 85 ed             	test   %r13,%r13
    5439:	74 7d                	je     54b8 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xf8>
    543b:	49 8d 51 ff          	lea    -0x1(%r9),%rdx
    543f:	49 89 d0             	mov    %rdx,%r8
    5442:	49 c1 e8 3f          	shr    $0x3f,%r8
    5446:	49 01 d0             	add    %rdx,%r8
    5449:	49 d1 f8             	sar    %r8
    544c:	49 39 f1             	cmp    %rsi,%r9
    544f:	7e 52                	jle    54a3 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xe3>
    5451:	4e 8b 14 c7          	mov    (%rdi,%r8,8),%r10
    5455:	f3 0f 10 49 10       	movss  0x10(%rcx),%xmm1
    545a:	f3 41 0f 10 42 10    	movss  0x10(%r10),%xmm0
    5460:	0f 2e c1             	ucomiss %xmm1,%xmm0
    5463:	77 20                	ja     5485 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xc5>
    5465:	eb 3c                	jmp    54a3 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xe3>
    5467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    546e:	00 00 
    5470:	4c 8b 14 d7          	mov    (%rdi,%rdx,8),%r10
    5474:	4d 89 c1             	mov    %r8,%r9
    5477:	49 89 d0             	mov    %rdx,%r8
    547a:	f3 41 0f 10 42 10    	movss  0x10(%r10),%xmm0
    5480:	0f 2e c1             	ucomiss %xmm1,%xmm0
    5483:	76 1e                	jbe    54a3 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xe3>
    5485:	49 8d 40 ff          	lea    -0x1(%r8),%rax
    5489:	4e 89 14 cf          	mov    %r10,(%rdi,%r9,8)
    548d:	48 89 c2             	mov    %rax,%rdx
    5490:	48 c1 ea 3f          	shr    $0x3f,%rdx
    5494:	48 01 c2             	add    %rax,%rdx
    5497:	4a 8d 04 c7          	lea    (%rdi,%r8,8),%rax
    549b:	48 d1 fa             	sar    %rdx
    549e:	4c 39 c6             	cmp    %r8,%rsi
    54a1:	7c cd                	jl     5470 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xb0>
    54a3:	48 89 08             	mov    %rcx,(%rax)
    54a6:	5b                   	pop    %rbx
    54a7:	5d                   	pop    %rbp
    54a8:	41 5c                	pop    %r12
    54aa:	41 5d                	pop    %r13
    54ac:	c3                   	retq   
    54ad:	0f 1f 00             	nopl   (%rax)
    54b0:	49 89 f1             	mov    %rsi,%r9
    54b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    54b8:	48 8d 42 fe          	lea    -0x2(%rdx),%rax
    54bc:	48 89 c2             	mov    %rax,%rdx
    54bf:	48 c1 ea 3f          	shr    $0x3f,%rdx
    54c3:	48 01 c2             	add    %rax,%rdx
    54c6:	48 d1 fa             	sar    %rdx
    54c9:	4c 39 ca             	cmp    %r9,%rdx
    54cc:	74 2a                	je     54f8 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x138>
    54ce:	4a 8d 04 cf          	lea    (%rdi,%r9,8),%rax
    54d2:	e9 64 ff ff ff       	jmpq   543b <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x7b>
    54d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    54de:	00 00 
    54e0:	4d 85 ed             	test   %r13,%r13
    54e3:	48 89 e8             	mov    %rbp,%rax
    54e6:	4d 89 c1             	mov    %r8,%r9
    54e9:	0f 85 4c ff ff ff    	jne    543b <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x7b>
    54ef:	eb c7                	jmp    54b8 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xf8>
    54f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    54f8:	4b 8d 54 09 01       	lea    0x1(%r9,%r9,1),%rdx
    54fd:	48 8d 04 d7          	lea    (%rdi,%rdx,8),%rax
    5501:	4c 8b 00             	mov    (%rax),%r8
    5504:	4e 89 04 cf          	mov    %r8,(%rdi,%r9,8)
    5508:	49 89 d1             	mov    %rdx,%r9
    550b:	e9 2b ff ff ff       	jmpq   543b <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0x7b>
    5510:	4d 85 ed             	test   %r13,%r13
    5513:	74 9b                	je     54b0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xf0>
    5515:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax
    5519:	eb 88                	jmp    54a3 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)+0xe3>
    551b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    5520:	48 39 f7             	cmp    %rsi,%rdi
    5523:	0f 84 97 00 00 00    	je     55c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
    5529:	41 57                	push   %r15
    552b:	41 56                	push   %r14
    552d:	4c 8d 7f 10          	lea    0x10(%rdi),%r15
    5531:	41 55                	push   %r13
    5533:	41 54                	push   %r12
    5535:	b8 0f 00 00 00       	mov    $0xf,%eax
    553a:	55                   	push   %rbp
    553b:	53                   	push   %rbx
    553c:	48 83 ec 08          	sub    $0x8,%rsp
    5540:	4c 8b 2f             	mov    (%rdi),%r13
    5543:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
    5547:	4d 39 ef             	cmp    %r13,%r15
    554a:	74 04                	je     5550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x30>
    554c:	48 8b 47 10          	mov    0x10(%rdi),%rax
    5550:	48 39 e8             	cmp    %rbp,%rax
    5553:	49 89 f4             	mov    %rsi,%r12
    5556:	48 89 fb             	mov    %rdi,%rbx
    5559:	72 35                	jb     5590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x70>
    555b:	48 85 ed             	test   %rbp,%rbp
    555e:	74 14                	je     5574 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
    5560:	48 83 fd 01          	cmp    $0x1,%rbp
    5564:	49 8b 34 24          	mov    (%r12),%rsi
    5568:	75 5e                	jne    55c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa8>
    556a:	0f b6 06             	movzbl (%rsi),%eax
    556d:	41 88 45 00          	mov    %al,0x0(%r13)
    5571:	4c 8b 2b             	mov    (%rbx),%r13
    5574:	48 89 6b 08          	mov    %rbp,0x8(%rbx)
    5578:	41 c6 44 2d 00 00    	movb   $0x0,0x0(%r13,%rbp,1)
    557e:	48 83 c4 08          	add    $0x8,%rsp
    5582:	5b                   	pop    %rbx
    5583:	5d                   	pop    %rbp
    5584:	41 5c                	pop    %r12
    5586:	41 5d                	pop    %r13
    5588:	41 5e                	pop    %r14
    558a:	41 5f                	pop    %r15
    558c:	c3                   	retq   
    558d:	0f 1f 00             	nopl   (%rax)
    5590:	48 85 ed             	test   %rbp,%rbp
    5593:	78 7c                	js     5611 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf1>
    5595:	4c 8d 34 00          	lea    (%rax,%rax,1),%r14
    5599:	4c 39 f5             	cmp    %r14,%rbp
    559c:	73 42                	jae    55e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
    559e:	4d 85 f6             	test   %r14,%r14
    55a1:	49 8d 7e 01          	lea    0x1(%r14),%rdi
    55a5:	79 40                	jns    55e7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc7>
    55a7:	48 bf 00 00 00 00 00 	movabs $0x8000000000000000,%rdi
    55ae:	00 00 80 
    55b1:	49 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%r14
    55b8:	ff ff 7f 
    55bb:	eb 2a                	jmp    55e7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc7>
    55bd:	0f 1f 00             	nopl   (%rax)
    55c0:	f3 c3                	repz retq 
    55c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    55c8:	4c 89 ef             	mov    %r13,%rdi
    55cb:	48 89 ea             	mov    %rbp,%rdx
    55ce:	e8 2d ca ff ff       	callq  2000 <memcpy@plt>
    55d3:	4c 8b 2b             	mov    (%rbx),%r13
    55d6:	eb 9c                	jmp    5574 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
    55d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    55df:	00 
    55e0:	48 8d 7d 01          	lea    0x1(%rbp),%rdi
    55e4:	49 89 ee             	mov    %rbp,%r14
    55e7:	e8 54 ca ff ff       	callq  2040 <operator new(unsigned long)@plt>
    55ec:	48 8b 3b             	mov    (%rbx),%rdi
    55ef:	49 89 c5             	mov    %rax,%r13
    55f2:	49 39 ff             	cmp    %rdi,%r15
    55f5:	74 05                	je     55fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdc>
    55f7:	e8 34 ca ff ff       	callq  2030 <operator delete(void*)@plt>
    55fc:	48 85 ed             	test   %rbp,%rbp
    55ff:	4c 89 2b             	mov    %r13,(%rbx)
    5602:	4c 89 73 10          	mov    %r14,0x10(%rbx)
    5606:	0f 84 68 ff ff ff    	je     5574 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
    560c:	e9 4f ff ff ff       	jmpq   5560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x40>
    5611:	48 8d 3d b0 28 00 00 	lea    0x28b0(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    5618:	e8 53 c9 ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    561d:	0f 1f 00             	nopl   (%rax)

0000000000005620 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)>:
    5620:	41 55                	push   %r13
    5622:	41 54                	push   %r12
    5624:	55                   	push   %rbp
    5625:	53                   	push   %rbx
    5626:	48 89 fd             	mov    %rdi,%rbp
    5629:	48 89 f3             	mov    %rsi,%rbx
    562c:	48 83 ec 08          	sub    $0x8,%rsp
    5630:	48 83 fe 01          	cmp    $0x1,%rsi
    5634:	0f 84 d6 00 00 00    	je     5710 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0xf0>
    563a:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    5641:	ff ff 1f 
    5644:	49 89 d4             	mov    %rdx,%r12
    5647:	48 39 c6             	cmp    %rax,%rsi
    564a:	0f 87 d4 00 00 00    	ja     5724 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x104>
    5650:	4c 8d 2c f5 00 00 00 	lea    0x0(,%rsi,8),%r13
    5657:	00 
    5658:	4c 89 ef             	mov    %r13,%rdi
    565b:	e8 e0 c9 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    5660:	4c 89 ea             	mov    %r13,%rdx
    5663:	31 f6                	xor    %esi,%esi
    5665:	48 89 c7             	mov    %rax,%rdi
    5668:	49 89 c4             	mov    %rax,%r12
    566b:	e8 10 c9 ff ff       	callq  1f80 <memset@plt>
    5670:	4c 8d 55 30          	lea    0x30(%rbp),%r10
    5674:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5678:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
    567f:	00 
    5680:	48 85 c9             	test   %rcx,%rcx
    5683:	74 5b                	je     56e0 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc0>
    5685:	45 31 c0             	xor    %r8d,%r8d
    5688:	4c 8d 4d 10          	lea    0x10(%rbp),%r9
    568c:	eb 16                	jmp    56a4 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x84>
    568e:	66 90                	xchg   %ax,%ax
    5690:	48 8b 16             	mov    (%rsi),%rdx
    5693:	48 89 11             	mov    %rdx,(%rcx)
    5696:	48 8b 00             	mov    (%rax),%rax
    5699:	48 89 08             	mov    %rcx,(%rax)
    569c:	48 85 ff             	test   %rdi,%rdi
    569f:	48 89 f9             	mov    %rdi,%rcx
    56a2:	74 3c                	je     56e0 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0xc0>
    56a4:	48 8b 41 28          	mov    0x28(%rcx),%rax
    56a8:	31 d2                	xor    %edx,%edx
    56aa:	48 8b 39             	mov    (%rcx),%rdi
    56ad:	48 f7 f3             	div    %rbx
    56b0:	49 8d 04 d4          	lea    (%r12,%rdx,8),%rax
    56b4:	48 8b 30             	mov    (%rax),%rsi
    56b7:	48 85 f6             	test   %rsi,%rsi
    56ba:	75 d4                	jne    5690 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x70>
    56bc:	48 8b 75 10          	mov    0x10(%rbp),%rsi
    56c0:	48 89 31             	mov    %rsi,(%rcx)
    56c3:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    56c7:	4c 89 08             	mov    %r9,(%rax)
    56ca:	48 83 39 00          	cmpq   $0x0,(%rcx)
    56ce:	74 38                	je     5708 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0xe8>
    56d0:	48 85 ff             	test   %rdi,%rdi
    56d3:	4b 89 0c c4          	mov    %rcx,(%r12,%r8,8)
    56d7:	49 89 d0             	mov    %rdx,%r8
    56da:	48 89 f9             	mov    %rdi,%rcx
    56dd:	75 c5                	jne    56a4 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x84>
    56df:	90                   	nop
    56e0:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
    56e4:	4c 39 d7             	cmp    %r10,%rdi
    56e7:	74 05                	je     56ee <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0xce>
    56e9:	e8 42 c9 ff ff       	callq  2030 <operator delete(void*)@plt>
    56ee:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
    56f2:	4c 89 65 00          	mov    %r12,0x0(%rbp)
    56f6:	48 83 c4 08          	add    $0x8,%rsp
    56fa:	5b                   	pop    %rbx
    56fb:	5d                   	pop    %rbp
    56fc:	41 5c                	pop    %r12
    56fe:	41 5d                	pop    %r13
    5700:	c3                   	retq   
    5701:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5708:	49 89 d0             	mov    %rdx,%r8
    570b:	eb 8f                	jmp    569c <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x7c>
    570d:	0f 1f 00             	nopl   (%rax)
    5710:	4c 8d 67 30          	lea    0x30(%rdi),%r12
    5714:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    571b:	00 
    571c:	4d 89 e2             	mov    %r12,%r10
    571f:	e9 50 ff ff ff       	jmpq   5674 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)+0x54>
    5724:	e8 f7 c7 ff ff       	callq  1f20 <std::__throw_bad_alloc()@plt>
    5729:	48 89 c7             	mov    %rax,%rdi
    572c:	e8 ff c7 ff ff       	callq  1f30 <__cxa_begin_catch@plt>
    5731:	49 8b 04 24          	mov    (%r12),%rax
    5735:	48 89 45 28          	mov    %rax,0x28(%rbp)
    5739:	e8 b2 c9 ff ff       	callq  20f0 <__cxa_rethrow@plt>
    573e:	48 89 c3             	mov    %rax,%rbx
    5741:	e8 0a ca ff ff       	callq  2150 <__cxa_end_catch@plt>
    5746:	48 89 df             	mov    %rbx,%rdi
    5749:	e8 42 ca ff ff       	callq  2190 <_Unwind_Resume@plt>
    574e:	66 90                	xchg   %ax,%ax

0000000000005750 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)>:
    5750:	41 55                	push   %r13
    5752:	41 54                	push   %r12
    5754:	49 89 d5             	mov    %rdx,%r13
    5757:	55                   	push   %rbp
    5758:	53                   	push   %rbx
    5759:	49 89 f4             	mov    %rsi,%r12
    575c:	48 89 fb             	mov    %rdi,%rbx
    575f:	48 89 cd             	mov    %rcx,%rbp
    5762:	48 83 c7 20          	add    $0x20,%rdi
    5766:	48 83 ec 18          	sub    $0x18,%rsp
    576a:	48 8b 57 f8          	mov    -0x8(%rdi),%rdx
    576e:	48 8b 77 e8          	mov    -0x18(%rdi),%rsi
    5772:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5779:	00 00 
    577b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5780:	31 c0                	xor    %eax,%eax
    5782:	48 8b 47 08          	mov    0x8(%rdi),%rax
    5786:	b9 01 00 00 00       	mov    $0x1,%ecx
    578b:	48 89 04 24          	mov    %rax,(%rsp)
    578f:	e8 2c c9 ff ff       	callq  20c0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
    5794:	84 c0                	test   %al,%al
    5796:	74 1a                	je     57b2 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)+0x62>
    5798:	48 89 d6             	mov    %rdx,%rsi
    579b:	48 89 df             	mov    %rbx,%rdi
    579e:	48 89 e2             	mov    %rsp,%rdx
    57a1:	e8 7a fe ff ff       	callq  5620 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_rehash(unsigned long, unsigned long const&)>
    57a6:	4c 89 e8             	mov    %r13,%rax
    57a9:	31 d2                	xor    %edx,%edx
    57ab:	48 f7 73 08          	divq   0x8(%rbx)
    57af:	49 89 d4             	mov    %rdx,%r12
    57b2:	48 8b 03             	mov    (%rbx),%rax
    57b5:	4c 89 6d 28          	mov    %r13,0x28(%rbp)
    57b9:	4a 8d 0c e5 00 00 00 	lea    0x0(,%r12,8),%rcx
    57c0:	00 
    57c1:	4a 8b 04 e0          	mov    (%rax,%r12,8),%rax
    57c5:	48 85 c0             	test   %rax,%rax
    57c8:	74 36                	je     5800 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)+0xb0>
    57ca:	48 8b 00             	mov    (%rax),%rax
    57cd:	48 89 45 00          	mov    %rax,0x0(%rbp)
    57d1:	48 8b 03             	mov    (%rbx),%rax
    57d4:	4a 8b 04 e0          	mov    (%rax,%r12,8),%rax
    57d8:	48 89 28             	mov    %rbp,(%rax)
    57db:	48 83 43 18 01       	addq   $0x1,0x18(%rbx)
    57e0:	48 89 e8             	mov    %rbp,%rax
    57e3:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    57e8:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    57ef:	00 00 
    57f1:	75 3d                	jne    5830 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)+0xe0>
    57f3:	48 83 c4 18          	add    $0x18,%rsp
    57f7:	5b                   	pop    %rbx
    57f8:	5d                   	pop    %rbp
    57f9:	41 5c                	pop    %r12
    57fb:	41 5d                	pop    %r13
    57fd:	c3                   	retq   
    57fe:	66 90                	xchg   %ax,%ax
    5800:	48 8b 43 10          	mov    0x10(%rbx),%rax
    5804:	48 89 45 00          	mov    %rax,0x0(%rbp)
    5808:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
    580c:	48 8b 45 00          	mov    0x0(%rbp),%rax
    5810:	48 8b 33             	mov    (%rbx),%rsi
    5813:	48 85 c0             	test   %rax,%rax
    5816:	74 0e                	je     5826 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)+0xd6>
    5818:	48 8b 40 28          	mov    0x28(%rax),%rax
    581c:	31 d2                	xor    %edx,%edx
    581e:	48 f7 73 08          	divq   0x8(%rbx)
    5822:	48 89 2c d6          	mov    %rbp,(%rsi,%rdx,8)
    5826:	48 8d 43 10          	lea    0x10(%rbx),%rax
    582a:	48 89 04 0e          	mov    %rax,(%rsi,%rcx,1)
    582e:	eb ab                	jmp    57db <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)+0x8b>
    5830:	e8 3b c8 ff ff       	callq  2070 <__stack_chk_fail@plt>
    5835:	48 89 c7             	mov    %rax,%rdi
    5838:	e8 f3 c6 ff ff       	callq  1f30 <__cxa_begin_catch@plt>
    583d:	48 89 ef             	mov    %rbp,%rdi
    5840:	e8 eb c7 ff ff       	callq  2030 <operator delete(void*)@plt>
    5845:	e8 a6 c8 ff ff       	callq  20f0 <__cxa_rethrow@plt>
    584a:	48 89 c3             	mov    %rax,%rbx
    584d:	e8 fe c8 ff ff       	callq  2150 <__cxa_end_catch@plt>
    5852:	48 89 df             	mov    %rbx,%rdi
    5855:	e8 36 c9 ff ff       	callq  2190 <_Unwind_Resume@plt>
    585a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005860 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>:
    5860:	55                   	push   %rbp
    5861:	66 0f ef c0          	pxor   %xmm0,%xmm0
    5865:	66 0f ef ff          	pxor   %xmm7,%xmm7
    5869:	48 89 e5             	mov    %rsp,%rbp
    586c:	41 57                	push   %r15
    586e:	41 56                	push   %r14
    5870:	41 55                	push   %r13
    5872:	41 54                	push   %r12
    5874:	4d 89 c6             	mov    %r8,%r14
    5877:	53                   	push   %rbx
    5878:	48 89 d3             	mov    %rdx,%rbx
    587b:	48 81 ec 68 05 00 00 	sub    $0x568,%rsp
    5882:	48 89 95 88 fa ff ff 	mov    %rdx,-0x578(%rbp)
    5889:	8b 11                	mov    (%rcx),%edx
    588b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5892:	00 00 
    5894:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5898:	31 c0                	xor    %eax,%eax
    589a:	48 8d 85 60 fb ff ff 	lea    -0x4a0(%rbp),%rax
    58a1:	2b 13                	sub    (%rbx),%edx
    58a3:	48 89 bd 98 fa ff ff 	mov    %rdi,-0x568(%rbp)
    58aa:	0f 29 85 40 fb ff ff 	movaps %xmm0,-0x4c0(%rbp)
    58b1:	48 89 85 a0 fa ff ff 	mov    %rax,-0x560(%rbp)
    58b8:	48 83 c0 30          	add    $0x30,%rax
    58bc:	48 89 b5 90 fa ff ff 	mov    %rsi,-0x570(%rbp)
    58c3:	66 0f ef c0          	pxor   %xmm0,%xmm0
    58c7:	0f af d2             	imul   %edx,%edx
    58ca:	48 89 85 60 fb ff ff 	mov    %rax,-0x4a0(%rbp)
    58d1:	8b 41 04             	mov    0x4(%rcx),%eax
    58d4:	2b 43 04             	sub    0x4(%rbx),%eax
    58d7:	48 89 8d f0 fa ff ff 	mov    %rcx,-0x510(%rbp)
    58de:	48 c7 85 50 fb ff ff 	movq   $0x0,-0x4b0(%rbp)
    58e5:	00 00 00 00 
    58e9:	48 c7 85 68 fb ff ff 	movq   $0x1,-0x498(%rbp)
    58f0:	01 00 00 00 
    58f4:	48 c7 85 70 fb ff ff 	movq   $0x0,-0x490(%rbp)
    58fb:	00 00 00 00 
    58ff:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
    5906:	00 00 00 00 
    590a:	c7 85 80 fb ff ff 00 	movl   $0x3f800000,-0x480(%rbp)
    5911:	00 80 3f 
    5914:	48 c7 85 88 fb ff ff 	movq   $0x0,-0x478(%rbp)
    591b:	00 00 00 00 
    591f:	0f af c0             	imul   %eax,%eax
    5922:	48 c7 85 90 fb ff ff 	movq   $0x0,-0x470(%rbp)
    5929:	00 00 00 00 
    592d:	01 d0                	add    %edx,%eax
    592f:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
    5933:	66 0f 2e f8          	ucomisd %xmm0,%xmm7
    5937:	f2 0f 51 c8          	sqrtsd %xmm0,%xmm1
    593b:	0f 87 d8 20 00 00    	ja     7a19 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x21b9>
    5941:	66 0f ef c0          	pxor   %xmm0,%xmm0
    5945:	48 89 9d 20 fb ff ff 	mov    %rbx,-0x4e0(%rbp)
    594c:	31 f6                	xor    %esi,%esi
    594e:	f2 0f 5a c1          	cvtsd2ss %xmm1,%xmm0
    5952:	f3 0f 11 43 0c       	movss  %xmm0,0xc(%rbx)
    5957:	f3 0f 58 43 08       	addss  0x8(%rbx),%xmm0
    595c:	f3 0f 11 43 10       	movss  %xmm0,0x10(%rbx)
    5961:	48 8d 95 20 fb ff ff 	lea    -0x4e0(%rbp),%rdx
    5968:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
    596f:	e8 1c f9 ff ff       	callq  5290 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node*>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node*&&)>
    5974:	48 8b b5 48 fb ff ff 	mov    -0x4b8(%rbp),%rsi
    597b:	4c 8b 46 f8          	mov    -0x8(%rsi),%r8
    597f:	48 8b bd 40 fb ff ff 	mov    -0x4c0(%rbp),%rdi
    5986:	48 89 f0             	mov    %rsi,%rax
    5989:	48 29 f8             	sub    %rdi,%rax
    598c:	48 c1 f8 03          	sar    $0x3,%rax
    5990:	4c 8d 48 ff          	lea    -0x1(%rax),%r9
    5994:	48 83 e8 02          	sub    $0x2,%rax
    5998:	48 89 c1             	mov    %rax,%rcx
    599b:	48 c1 e9 3f          	shr    $0x3f,%rcx
    599f:	48 01 c1             	add    %rax,%rcx
    59a2:	48 d1 f9             	sar    %rcx
    59a5:	4d 85 c9             	test   %r9,%r9
    59a8:	0f 8e ac 1e 00 00    	jle    785a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1ffa>
    59ae:	48 8b 14 cf          	mov    (%rdi,%rcx,8),%rdx
    59b2:	f3 41 0f 10 48 10    	movss  0x10(%r8),%xmm1
    59b8:	f3 0f 10 42 10       	movss  0x10(%rdx),%xmm0
    59bd:	0f 2e c1             	ucomiss %xmm1,%xmm0
    59c0:	77 22                	ja     59e4 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x184>
    59c2:	e9 93 1e 00 00       	jmpq   785a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1ffa>
    59c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    59ce:	00 00 
    59d0:	48 8b 14 c7          	mov    (%rdi,%rax,8),%rdx
    59d4:	49 89 c9             	mov    %rcx,%r9
    59d7:	f3 0f 10 42 10       	movss  0x10(%rdx),%xmm0
    59dc:	0f 2e c1             	ucomiss %xmm1,%xmm0
    59df:	76 1d                	jbe    59fe <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19e>
    59e1:	48 89 c1             	mov    %rax,%rcx
    59e4:	4a 89 14 cf          	mov    %rdx,(%rdi,%r9,8)
    59e8:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    59ec:	48 89 d0             	mov    %rdx,%rax
    59ef:	48 c1 e8 3f          	shr    $0x3f,%rax
    59f3:	48 01 d0             	add    %rdx,%rax
    59f6:	48 d1 f8             	sar    %rax
    59f9:	48 85 c9             	test   %rcx,%rcx
    59fc:	7f d2                	jg     59d0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x170>
    59fe:	48 8d 85 20 fb ff ff 	lea    -0x4e0(%rbp),%rax
    5a05:	48 39 fe             	cmp    %rdi,%rsi
    5a08:	4c 89 04 cf          	mov    %r8,(%rdi,%rcx,8)
    5a0c:	48 89 85 80 fa ff ff 	mov    %rax,-0x580(%rbp)
    5a13:	0f 84 6e 05 00 00    	je     5f87 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x727>
    5a19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5a20:	48 8b 07             	mov    (%rdi),%rax
    5a23:	48 8d 56 f8          	lea    -0x8(%rsi),%rdx
    5a27:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
    5a2e:	48 89 f0             	mov    %rsi,%rax
    5a31:	48 29 f8             	sub    %rdi,%rax
    5a34:	48 83 f8 08          	cmp    $0x8,%rax
    5a38:	7e 30                	jle    5a6a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20a>
    5a3a:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    5a41:	48 8b 4e f8          	mov    -0x8(%rsi),%rcx
    5a45:	48 83 ec 08          	sub    $0x8,%rsp
    5a49:	48 29 fa             	sub    %rdi,%rdx
    5a4c:	48 c1 fa 03          	sar    $0x3,%rdx
    5a50:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    5a54:	6a 00                	pushq  $0x0
    5a56:	31 f6                	xor    %esi,%esi
    5a58:	e8 63 f9 ff ff       	callq  53c0 <void std::__adjust_heap<__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator> >(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, long, long, Node*, __gnu_cxx::__ops::_Iter_comp_iter<JPS::NodeComparator>)>
    5a5d:	48 8b 85 48 fb ff ff 	mov    -0x4b8(%rbp),%rax
    5a64:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
    5a68:	58                   	pop    %rax
    5a69:	59                   	pop    %rcx
    5a6a:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    5a71:	48 89 95 48 fb ff ff 	mov    %rdx,-0x4b8(%rbp)
    5a78:	4c 8b 08             	mov    (%rax),%r9
    5a7b:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
    5a82:	4c 3b 08             	cmp    (%rax),%r9
    5a85:	0f 84 05 10 00 00    	je     6a90 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1230>
    5a8b:	4c 8b 9d 18 fb ff ff 	mov    -0x4e8(%rbp),%r11
    5a92:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
    5a99:	31 d2                	xor    %edx,%edx
    5a9b:	41 8b 1b             	mov    (%r11),%ebx
    5a9e:	41 33 5b 04          	xor    0x4(%r11),%ebx
    5aa2:	48 63 db             	movslq %ebx,%rbx
    5aa5:	48 89 d8             	mov    %rbx,%rax
    5aa8:	48 f7 f7             	div    %rdi
    5aab:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
    5ab2:	4c 8b 04 d0          	mov    (%rax,%rdx,8),%r8
    5ab6:	49 89 d4             	mov    %rdx,%r12
    5ab9:	4d 85 c0             	test   %r8,%r8
    5abc:	0f 84 2d 0a 00 00    	je     64ef <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc8f>
    5ac2:	49 8b 30             	mov    (%r8),%rsi
    5ac5:	4d 89 da             	mov    %r11,%r10
    5ac8:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
    5acc:	eb 29                	jmp    5af7 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x297>
    5ace:	66 90                	xchg   %ax,%ax
    5ad0:	48 8b 06             	mov    (%rsi),%rax
    5ad3:	48 85 c0             	test   %rax,%rax
    5ad6:	0f 84 0c 0a 00 00    	je     64e8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc88>
    5adc:	48 8b 48 28          	mov    0x28(%rax),%rcx
    5ae0:	31 d2                	xor    %edx,%edx
    5ae2:	49 89 f0             	mov    %rsi,%r8
    5ae5:	48 89 c6             	mov    %rax,%rsi
    5ae8:	48 89 c8             	mov    %rcx,%rax
    5aeb:	48 f7 f7             	div    %rdi
    5aee:	49 39 d4             	cmp    %rdx,%r12
    5af1:	0f 85 f1 09 00 00    	jne    64e8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc88>
    5af7:	48 39 d9             	cmp    %rbx,%rcx
    5afa:	75 d4                	jne    5ad0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x270>
    5afc:	4c 3b 4e 08          	cmp    0x8(%rsi),%r9
    5b00:	75 ce                	jne    5ad0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x270>
    5b02:	49 83 38 00          	cmpq   $0x0,(%r8)
    5b06:	4c 89 95 18 fb ff ff 	mov    %r10,-0x4e8(%rbp)
    5b0d:	0f 84 dc 09 00 00    	je     64ef <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc8f>
    5b13:	48 8d 35 90 24 00 00 	lea    0x2490(%rip),%rsi        # 7faa <_IO_stdin_used+0x14a>
    5b1a:	48 8d 3d ff 44 20 00 	lea    0x2044ff(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    5b21:	ba 15 00 00 00       	mov    $0x15,%edx
    5b26:	e8 55 c5 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5b2b:	4c 8b bd 18 fb ff ff 	mov    -0x4e8(%rbp),%r15
    5b32:	48 8d 3d e7 44 20 00 	lea    0x2044e7(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    5b39:	41 8b 37             	mov    (%r15),%esi
    5b3c:	e8 3f c6 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    5b41:	48 8d 35 f1 23 00 00 	lea    0x23f1(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    5b48:	ba 02 00 00 00       	mov    $0x2,%edx
    5b4d:	48 89 c7             	mov    %rax,%rdi
    5b50:	48 89 c3             	mov    %rax,%rbx
    5b53:	e8 28 c5 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    5b58:	41 8b 77 04          	mov    0x4(%r15),%esi
    5b5c:	48 89 df             	mov    %rbx,%rdi
    5b5f:	e8 1c c6 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    5b64:	49 89 c4             	mov    %rax,%r12
    5b67:	48 8b 00             	mov    (%rax),%rax
    5b6a:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    5b6e:	49 8b 9c 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbx
    5b75:	00 
    5b76:	48 85 db             	test   %rbx,%rbx
    5b79:	0f 84 bc 21 00 00    	je     7d3b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24db>
    5b7f:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    5b83:	0f 84 d7 0a 00 00    	je     6660 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xe00>
    5b89:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    5b8d:	4c 89 e7             	mov    %r12,%rdi
    5b90:	e8 1b c3 ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    5b95:	48 89 c7             	mov    %rax,%rdi
    5b98:	e8 13 c4 ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    5b9d:	48 8b 05 a4 45 20 00 	mov    0x2045a4(%rip),%rax        # 20a148 <directions+0x8>
    5ba4:	4c 8b 3d 95 45 20 00 	mov    0x204595(%rip),%r15        # 20a140 <directions>
    5bab:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
    5bb2:	48 89 bd a8 fa ff ff 	mov    %rdi,-0x558(%rbp)
    5bb9:	49 39 c7             	cmp    %rax,%r15
    5bbc:	48 89 85 d0 fa ff ff 	mov    %rax,-0x530(%rbp)
    5bc3:	75 1c                	jne    5be1 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x381>
    5bc5:	e9 a6 03 00 00       	jmpq   5f70 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x710>
    5bca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5bd0:	49 83 c7 08          	add    $0x8,%r15
    5bd4:	4c 39 bd d0 fa ff ff 	cmp    %r15,-0x530(%rbp)
    5bdb:	0f 84 8f 03 00 00    	je     5f70 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x710>
    5be1:	48 8b bd 18 fb ff ff 	mov    -0x4e8(%rbp),%rdi
    5be8:	41 8b 5f 04          	mov    0x4(%r15),%ebx
    5bec:	41 8b 07             	mov    (%r15),%eax
    5bef:	8b 4f 04             	mov    0x4(%rdi),%ecx
    5bf2:	8b 3f                	mov    (%rdi),%edi
    5bf4:	89 9d f8 fa ff ff    	mov    %ebx,-0x508(%rbp)
    5bfa:	89 85 10 fb ff ff    	mov    %eax,-0x4f0(%rbp)
    5c00:	01 cb                	add    %ecx,%ebx
    5c02:	01 f8                	add    %edi,%eax
    5c04:	89 8d d8 fa ff ff    	mov    %ecx,-0x528(%rbp)
    5c0a:	89 bd e0 fa ff ff    	mov    %edi,-0x520(%rbp)
    5c10:	41 89 dd             	mov    %ebx,%r13d
    5c13:	89 85 00 fb ff ff    	mov    %eax,-0x500(%rbp)
    5c19:	78 b5                	js     5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    5c1b:	48 63 d8             	movslq %eax,%rbx
    5c1e:	49 8b 16             	mov    (%r14),%rdx
    5c21:	49 8b 46 08          	mov    0x8(%r14),%rax
    5c25:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
    5c2c:	aa aa aa 
    5c2f:	45 89 ec             	mov    %r13d,%r12d
    5c32:	48 89 9d e8 fa ff ff 	mov    %rbx,-0x518(%rbp)
    5c39:	41 f7 d4             	not    %r12d
    5c3c:	48 29 d0             	sub    %rdx,%rax
    5c3f:	48 c1 f8 03          	sar    $0x3,%rax
    5c43:	48 0f af c6          	imul   %rsi,%rax
    5c47:	48 39 c3             	cmp    %rax,%rbx
    5c4a:	0f 92 c0             	setb   %al
    5c4d:	41 c1 ec 1f          	shr    $0x1f,%r12d
    5c51:	41 20 c4             	and    %al,%r12b
    5c54:	0f 84 76 ff ff ff    	je     5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    5c5a:	48 8b 42 08          	mov    0x8(%rdx),%rax
    5c5e:	48 2b 02             	sub    (%rdx),%rax
    5c61:	49 63 dd             	movslq %r13d,%rbx
    5c64:	48 c1 f8 02          	sar    $0x2,%rax
    5c68:	48 39 c3             	cmp    %rax,%rbx
    5c6b:	0f 83 5f ff ff ff    	jae    5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    5c71:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
    5c78:	48 89 9d b8 fa ff ff 	mov    %rbx,-0x548(%rbp)
    5c7f:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
    5c83:	48 89 85 b0 fa ff ff 	mov    %rax,-0x550(%rbp)
    5c8a:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
    5c8e:	8b 04 98             	mov    (%rax,%rbx,4),%eax
    5c91:	85 c0                	test   %eax,%eax
    5c93:	0f 85 37 ff ff ff    	jne    5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    5c99:	bf 20 00 00 00       	mov    $0x20,%edi
    5c9e:	e8 9d c3 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    5ca3:	48 89 c3             	mov    %rax,%rbx
    5ca6:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
    5cac:	44 89 6b 04          	mov    %r13d,0x4(%rbx)
    5cb0:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
    5cb7:	00 
    5cb8:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
    5cbf:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    5cc6:	00 
    5cc7:	89 03                	mov    %eax,(%rbx)
    5cc9:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
    5cd0:	48 8b 00             	mov    (%rax),%rax
    5cd3:	48 39 03             	cmp    %rax,(%rbx)
    5cd6:	0f 84 fc 01 00 00    	je     5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    5cdc:	8b 85 10 fb ff ff    	mov    -0x4f0(%rbp),%eax
    5ce2:	8b b5 f8 fa ff ff    	mov    -0x508(%rbp),%esi
    5ce8:	85 c0                	test   %eax,%eax
    5cea:	0f 95 c2             	setne  %dl
    5ced:	85 f6                	test   %esi,%esi
    5cef:	0f 95 c0             	setne  %al
    5cf2:	20 c2                	and    %al,%dl
    5cf4:	88 95 c3 fa ff ff    	mov    %dl,-0x53d(%rbp)
    5cfa:	0f 84 70 05 00 00    	je     6270 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xa10>
    5d00:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
    5d06:	42 8d 0c 2e          	lea    (%rsi,%r13,1),%ecx
    5d0a:	89 8d c4 fa ff ff    	mov    %ecx,-0x53c(%rbp)
    5d10:	85 c0                	test   %eax,%eax
    5d12:	78 54                	js     5d68 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x508>
    5d14:	48 63 f0             	movslq %eax,%rsi
    5d17:	49 8b 16             	mov    (%r14),%rdx
    5d1a:	49 8b 46 08          	mov    0x8(%r14),%rax
    5d1e:	49 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r10
    5d25:	aa aa aa 
    5d28:	48 29 d0             	sub    %rdx,%rax
    5d2b:	48 c1 f8 03          	sar    $0x3,%rax
    5d2f:	49 0f af c2          	imul   %r10,%rax
    5d33:	48 39 c6             	cmp    %rax,%rsi
    5d36:	73 30                	jae    5d68 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x508>
    5d38:	85 c9                	test   %ecx,%ecx
    5d3a:	78 2c                	js     5d68 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x508>
    5d3c:	48 8b 42 08          	mov    0x8(%rdx),%rax
    5d40:	48 2b 02             	sub    (%rdx),%rax
    5d43:	48 63 c9             	movslq %ecx,%rcx
    5d46:	48 c1 f8 02          	sar    $0x2,%rax
    5d4a:	48 39 c1             	cmp    %rax,%rcx
    5d4d:	73 19                	jae    5d68 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x508>
    5d4f:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
    5d53:	48 8b 14 f2          	mov    (%rdx,%rsi,8),%rdx
    5d57:	44 8b 1c 8a          	mov    (%rdx,%rcx,4),%r11d
    5d5b:	45 85 db             	test   %r11d,%r11d
    5d5e:	0f 84 c8 09 00 00    	je     672c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xecc>
    5d64:	0f 1f 40 00          	nopl   0x0(%rax)
    5d68:	8b 85 10 fb ff ff    	mov    -0x4f0(%rbp),%eax
    5d6e:	03 85 00 fb ff ff    	add    -0x500(%rbp),%eax
    5d74:	89 85 e0 fa ff ff    	mov    %eax,-0x520(%rbp)
    5d7a:	0f 88 10 01 00 00    	js     5e90 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x630>
    5d80:	48 63 f0             	movslq %eax,%rsi
    5d83:	49 8b 16             	mov    (%r14),%rdx
    5d86:	49 8b 46 08          	mov    0x8(%r14),%rax
    5d8a:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
    5d91:	aa aa aa 
    5d94:	8b 8d d8 fa ff ff    	mov    -0x528(%rbp),%ecx
    5d9a:	48 89 b5 c8 fa ff ff 	mov    %rsi,-0x538(%rbp)
    5da1:	48 29 d0             	sub    %rdx,%rax
    5da4:	48 c1 f8 03          	sar    $0x3,%rax
    5da8:	f7 d1                	not    %ecx
    5daa:	48 0f af c7          	imul   %rdi,%rax
    5dae:	48 39 c6             	cmp    %rax,%rsi
    5db1:	8b b5 c4 fa ff ff    	mov    -0x53c(%rbp),%esi
    5db7:	41 0f 92 c4          	setb   %r12b
    5dbb:	c1 e9 1f             	shr    $0x1f,%ecx
    5dbe:	44 20 e1             	and    %r12b,%cl
    5dc1:	f7 d6                	not    %esi
    5dc3:	0f 85 cf 08 00 00    	jne    6698 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xe38>
    5dc9:	85 f6                	test   %esi,%esi
    5dcb:	79 55                	jns    5e22 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x5c2>
    5dcd:	45 84 e4             	test   %r12b,%r12b
    5dd0:	74 50                	je     5e22 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x5c2>
    5dd2:	48 8b 42 08          	mov    0x8(%rdx),%rax
    5dd6:	48 2b 02             	sub    (%rdx),%rax
    5dd9:	48 63 b5 c4 fa ff ff 	movslq -0x53c(%rbp),%rsi
    5de0:	48 c1 f8 02          	sar    $0x2,%rax
    5de4:	48 39 c6             	cmp    %rax,%rsi
    5de7:	73 39                	jae    5e22 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x5c2>
    5de9:	48 8b bd c8 fa ff ff 	mov    -0x538(%rbp),%rdi
    5df0:	48 8d 0c b5 00 00 00 	lea    0x0(,%rsi,4),%rcx
    5df7:	00 
    5df8:	48 89 b5 70 fa ff ff 	mov    %rsi,-0x590(%rbp)
    5dff:	48 89 8d 78 fa ff ff 	mov    %rcx,-0x588(%rbp)
    5e06:	48 8d 3c 7f          	lea    (%rdi,%rdi,2),%rdi
    5e0a:	48 8b 04 fa          	mov    (%rdx,%rdi,8),%rax
    5e0e:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
    5e15:	44 8b 0c b0          	mov    (%rax,%rsi,4),%r9d
    5e19:	45 85 c9             	test   %r9d,%r9d
    5e1c:	0f 84 4f 09 00 00    	je     6771 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xf11>
    5e22:	80 bd c3 fa ff ff 00 	cmpb   $0x0,-0x53d(%rbp)
    5e29:	0f 84 19 08 00 00    	je     6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    5e2f:	49 8b 16             	mov    (%r14),%rdx
    5e32:	49 8b 46 08          	mov    0x8(%r14),%rax
    5e36:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
    5e3d:	aa aa aa 
    5e40:	48 29 d0             	sub    %rdx,%rax
    5e43:	48 c1 f8 03          	sar    $0x3,%rax
    5e47:	48 0f af c7          	imul   %rdi,%rax
    5e4b:	48 8b bd c8 fa ff ff 	mov    -0x538(%rbp),%rdi
    5e52:	48 39 f8             	cmp    %rdi,%rax
    5e55:	76 39                	jbe    5e90 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x630>
    5e57:	48 8b 42 08          	mov    0x8(%rdx),%rax
    5e5b:	48 2b 02             	sub    (%rdx),%rax
    5e5e:	48 8b 8d b8 fa ff ff 	mov    -0x548(%rbp),%rcx
    5e65:	48 c1 f8 02          	sar    $0x2,%rax
    5e69:	48 39 c1             	cmp    %rax,%rcx
    5e6c:	73 22                	jae    5e90 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x630>
    5e6e:	48 8d 04 7f          	lea    (%rdi,%rdi,2),%rax
    5e72:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
    5e79:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
    5e7d:	44 8b 24 88          	mov    (%rax,%rcx,4),%r12d
    5e81:	45 85 e4             	test   %r12d,%r12d
    5e84:	0f 84 de 04 00 00    	je     6368 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xb08>
    5e8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5e90:	48 83 ec 08          	sub    $0x8,%rsp
    5e94:	4c 8b 8d f0 fa ff ff 	mov    -0x510(%rbp),%r9
    5e9b:	44 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%r8d
    5ea2:	8b b5 00 fb ff ff    	mov    -0x500(%rbp),%esi
    5ea8:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
    5eaf:	31 c9                	xor    %ecx,%ecx
    5eb1:	41 56                	push   %r14
    5eb3:	44 89 ea             	mov    %r13d,%edx
    5eb6:	e8 15 e2 ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    5ebb:	48 85 c0             	test   %rax,%rax
    5ebe:	5a                   	pop    %rdx
    5ebf:	59                   	pop    %rcx
    5ec0:	0f 84 82 07 00 00    	je     6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    5ec6:	8b 03                	mov    (%rbx),%eax
    5ec8:	44 8b 6b 04          	mov    0x4(%rbx),%r13d
    5ecc:	89 85 00 fb ff ff    	mov    %eax,-0x500(%rbp)
    5ed2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5ed8:	44 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%r8d
    5edf:	48 89 9d 20 fb ff ff 	mov    %rbx,-0x4e0(%rbp)
    5ee6:	45 31 e8             	xor    %r13d,%r8d
    5ee9:	48 8b bd 68 fb ff ff 	mov    -0x498(%rbp),%rdi
    5ef0:	31 d2                	xor    %edx,%edx
    5ef2:	4d 63 c0             	movslq %r8d,%r8
    5ef5:	4c 89 c0             	mov    %r8,%rax
    5ef8:	48 f7 f7             	div    %rdi
    5efb:	48 8b 85 60 fb ff ff 	mov    -0x4a0(%rbp),%rax
    5f02:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
    5f06:	49 89 d1             	mov    %rdx,%r9
    5f09:	48 85 c0             	test   %rax,%rax
    5f0c:	0f 84 55 01 00 00    	je     6067 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x807>
    5f12:	48 8b 08             	mov    (%rax),%rcx
    5f15:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    5f1c:	48 8b 71 28          	mov    0x28(%rcx),%rsi
    5f20:	49 89 c2             	mov    %rax,%r10
    5f23:	eb 24                	jmp    5f49 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x6e9>
    5f25:	0f 1f 00             	nopl   (%rax)
    5f28:	48 8b 09             	mov    (%rcx),%rcx
    5f2b:	48 85 c9             	test   %rcx,%rcx
    5f2e:	0f 84 2c 01 00 00    	je     6060 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x800>
    5f34:	48 8b 71 28          	mov    0x28(%rcx),%rsi
    5f38:	31 d2                	xor    %edx,%edx
    5f3a:	48 89 f0             	mov    %rsi,%rax
    5f3d:	48 f7 f7             	div    %rdi
    5f40:	49 39 d1             	cmp    %rdx,%r9
    5f43:	0f 85 17 01 00 00    	jne    6060 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x800>
    5f49:	49 39 f0             	cmp    %rsi,%r8
    5f4c:	75 da                	jne    5f28 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x6c8>
    5f4e:	48 8b 41 08          	mov    0x8(%rcx),%rax
    5f52:	48 39 03             	cmp    %rax,(%rbx)
    5f55:	75 d1                	jne    5f28 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x6c8>
    5f57:	49 83 c7 08          	add    $0x8,%r15
    5f5b:	4c 39 bd d0 fa ff ff 	cmp    %r15,-0x530(%rbp)
    5f62:	4c 89 95 18 fb ff ff 	mov    %r10,-0x4e8(%rbp)
    5f69:	0f 85 72 fc ff ff    	jne    5be1 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x381>
    5f6f:	90                   	nop
    5f70:	48 8b b5 48 fb ff ff 	mov    -0x4b8(%rbp),%rsi
    5f77:	48 8b bd 40 fb ff ff 	mov    -0x4c0(%rbp),%rdi
    5f7e:	48 39 fe             	cmp    %rdi,%rsi
    5f81:	0f 85 99 fa ff ff    	jne    5a20 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1c0>
    5f87:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
    5f8e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    5f95:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    5f9c:	00 
    5f9d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    5fa4:	00 
    5fa5:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    5fac:	00 
    5fad:	48 8b bd 70 fb ff ff 	mov    -0x490(%rbp),%rdi
    5fb4:	48 85 ff             	test   %rdi,%rdi
    5fb7:	74 17                	je     5fd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x770>
    5fb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5fc0:	48 8b 1f             	mov    (%rdi),%rbx
    5fc3:	e8 68 c0 ff ff       	callq  2030 <operator delete(void*)@plt>
    5fc8:	48 85 db             	test   %rbx,%rbx
    5fcb:	48 89 df             	mov    %rbx,%rdi
    5fce:	75 f0                	jne    5fc0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x760>
    5fd0:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
    5fd7:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
    5fde:	31 f6                	xor    %esi,%esi
    5fe0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    5fe7:	00 
    5fe8:	e8 93 bf ff ff       	callq  1f80 <memset@plt>
    5fed:	48 8b 85 a0 fa ff ff 	mov    -0x560(%rbp),%rax
    5ff4:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
    5ffb:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
    6002:	00 00 00 00 
    6006:	48 c7 85 70 fb ff ff 	movq   $0x0,-0x490(%rbp)
    600d:	00 00 00 00 
    6011:	48 83 c0 30          	add    $0x30,%rax
    6015:	48 39 c7             	cmp    %rax,%rdi
    6018:	74 05                	je     601f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x7bf>
    601a:	e8 11 c0 ff ff       	callq  2030 <operator delete(void*)@plt>
    601f:	48 8b bd 40 fb ff ff 	mov    -0x4c0(%rbp),%rdi
    6026:	48 85 ff             	test   %rdi,%rdi
    6029:	74 05                	je     6030 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x7d0>
    602b:	e8 00 c0 ff ff       	callq  2030 <operator delete(void*)@plt>
    6030:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    6034:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    603b:	00 00 
    603d:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
    6044:	0f 85 e4 1c 00 00    	jne    7d2e <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24ce>
    604a:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    604e:	5b                   	pop    %rbx
    604f:	41 5c                	pop    %r12
    6051:	41 5d                	pop    %r13
    6053:	41 5e                	pop    %r14
    6055:	41 5f                	pop    %r15
    6057:	5d                   	pop    %rbp
    6058:	c3                   	retq   
    6059:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    6060:	4c 89 95 18 fb ff ff 	mov    %r10,-0x4e8(%rbp)
    6067:	48 8b 95 18 fb ff ff 	mov    -0x4e8(%rbp),%rdx
    606e:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
    6074:	66 0f ef c0          	pxor   %xmm0,%xmm0
    6078:	66 0f ef e4          	pxor   %xmm4,%xmm4
    607c:	44 2b 6a 04          	sub    0x4(%rdx),%r13d
    6080:	2b 02                	sub    (%rdx),%eax
    6082:	f3 0f 10 52 08       	movss  0x8(%rdx),%xmm2
    6087:	44 89 ea             	mov    %r13d,%edx
    608a:	0f af c0             	imul   %eax,%eax
    608d:	41 0f af d5          	imul   %r13d,%edx
    6091:	01 d0                	add    %edx,%eax
    6093:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
    6097:	66 0f 2e e0          	ucomisd %xmm0,%xmm4
    609b:	f2 0f 51 c8          	sqrtsd %xmm0,%xmm1
    609f:	0f 87 10 18 00 00    	ja     78b5 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2055>
    60a5:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
    60aa:	f2 0f 5a c9          	cvtsd2ss %xmm1,%xmm1
    60ae:	f3 0f 58 ca          	addss  %xmm2,%xmm1
    60b2:	74 0e                	je     60c2 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x862>
    60b4:	f3 0f 10 43 08       	movss  0x8(%rbx),%xmm0
    60b9:	0f 2e c1             	ucomiss %xmm1,%xmm0
    60bc:	0f 86 0e fb ff ff    	jbe    5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    60c2:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    60c9:	48 8b 95 f0 fa ff ff 	mov    -0x510(%rbp),%rdx
    60d0:	f3 0f 11 4b 08       	movss  %xmm1,0x8(%rbx)
    60d5:	66 0f ef c0          	pxor   %xmm0,%xmm0
    60d9:	66 0f ef ed          	pxor   %xmm5,%xmm5
    60dd:	48 89 43 18          	mov    %rax,0x18(%rbx)
    60e1:	8b 02                	mov    (%rdx),%eax
    60e3:	8b 52 04             	mov    0x4(%rdx),%edx
    60e6:	2b 03                	sub    (%rbx),%eax
    60e8:	2b 53 04             	sub    0x4(%rbx),%edx
    60eb:	0f af c0             	imul   %eax,%eax
    60ee:	0f af d2             	imul   %edx,%edx
    60f1:	01 d0                	add    %edx,%eax
    60f3:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
    60f7:	66 0f 2e e8          	ucomisd %xmm0,%xmm5
    60fb:	f2 0f 51 c8          	sqrtsd %xmm0,%xmm1
    60ff:	0f 87 f3 18 00 00    	ja     79f8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2198>
    6105:	48 89 d8             	mov    %rbx,%rax
    6108:	66 0f ef f6          	pxor   %xmm6,%xmm6
    610c:	48 8d 35 ad 1e 00 00 	lea    0x1ead(%rip),%rsi        # 7fc0 <_IO_stdin_used+0x160>
    6113:	48 8d 3d 06 3f 20 00 	lea    0x203f06(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    611a:	ba 12 00 00 00       	mov    $0x12,%edx
    611f:	f2 0f 5a f1          	cvtsd2ss %xmm1,%xmm6
    6123:	f3 0f 11 73 0c       	movss  %xmm6,0xc(%rbx)
    6128:	f3 0f 10 40 08       	movss  0x8(%rax),%xmm0
    612d:	f3 0f 58 40 0c       	addss  0xc(%rax),%xmm0
    6132:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
    6137:	e8 44 bf ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    613c:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
    6143:	48 8d 3d d6 3e 20 00 	lea    0x203ed6(%rip),%rdi        # 20a020 <std::cout@@GLIBCXX_3.4>
    614a:	8b 30                	mov    (%rax),%esi
    614c:	e8 2f c0 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    6151:	48 8d 35 e1 1d 00 00 	lea    0x1de1(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    6158:	ba 02 00 00 00       	mov    $0x2,%edx
    615d:	48 89 c7             	mov    %rax,%rdi
    6160:	48 89 c3             	mov    %rax,%rbx
    6163:	e8 18 bf ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6168:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
    616f:	48 89 df             	mov    %rbx,%rdi
    6172:	8b 70 04             	mov    0x4(%rax),%esi
    6175:	e8 06 c0 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    617a:	49 89 c4             	mov    %rax,%r12
    617d:	48 8b 00             	mov    (%rax),%rax
    6180:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6184:	49 8b 9c 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%rbx
    618b:	00 
    618c:	48 85 db             	test   %rbx,%rbx
    618f:	0f 84 94 1b 00 00    	je     7d29 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24c9>
    6195:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    6199:	0f 84 5c 05 00 00    	je     66fb <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xe9b>
    619f:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    61a3:	4c 89 e7             	mov    %r12,%rdi
    61a6:	e8 05 bd ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    61ab:	48 89 c7             	mov    %rax,%rdi
    61ae:	e8 fd bd ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    61b3:	48 8b b5 48 fb ff ff 	mov    -0x4b8(%rbp),%rsi
    61ba:	48 3b b5 50 fb ff ff 	cmp    -0x4b0(%rbp),%rsi
    61c1:	0f 84 87 05 00 00    	je     674e <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xeee>
    61c7:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
    61ce:	48 8d 46 08          	lea    0x8(%rsi),%rax
    61d2:	48 89 3e             	mov    %rdi,(%rsi)
    61d5:	48 89 85 48 fb ff ff 	mov    %rax,-0x4b8(%rbp)
    61dc:	48 8b b5 40 fb ff ff 	mov    -0x4c0(%rbp),%rsi
    61e3:	48 29 f0             	sub    %rsi,%rax
    61e6:	48 c1 f8 03          	sar    $0x3,%rax
    61ea:	4c 8d 40 ff          	lea    -0x1(%rax),%r8
    61ee:	48 83 e8 02          	sub    $0x2,%rax
    61f2:	48 89 c2             	mov    %rax,%rdx
    61f5:	48 c1 ea 3f          	shr    $0x3f,%rdx
    61f9:	48 01 d0             	add    %rdx,%rax
    61fc:	48 d1 f8             	sar    %rax
    61ff:	4d 85 c0             	test   %r8,%r8
    6202:	48 89 c1             	mov    %rax,%rcx
    6205:	0f 8e 23 10 00 00    	jle    722e <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19ce>
    620b:	48 8b 14 c6          	mov    (%rsi,%rax,8),%rdx
    620f:	f3 0f 10 4f 10       	movss  0x10(%rdi),%xmm1
    6214:	f3 0f 10 42 10       	movss  0x10(%rdx),%xmm0
    6219:	0f 2e c1             	ucomiss %xmm1,%xmm0
    621c:	0f 86 0c 10 00 00    	jbe    722e <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19ce>
    6222:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    6229:	48 89 c3             	mov    %rax,%rbx
    622c:	eb 16                	jmp    6244 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x9e4>
    622e:	66 90                	xchg   %ax,%ax
    6230:	48 8b 14 c6          	mov    (%rsi,%rax,8),%rdx
    6234:	49 89 c8             	mov    %rcx,%r8
    6237:	f3 0f 10 42 10       	movss  0x10(%rdx),%xmm0
    623c:	0f 2e c1             	ucomiss %xmm1,%xmm0
    623f:	76 1d                	jbe    625e <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x9fe>
    6241:	48 89 c1             	mov    %rax,%rcx
    6244:	4a 89 14 c6          	mov    %rdx,(%rsi,%r8,8)
    6248:	48 8d 51 ff          	lea    -0x1(%rcx),%rdx
    624c:	48 89 d0             	mov    %rdx,%rax
    624f:	48 c1 e8 3f          	shr    $0x3f,%rax
    6253:	48 01 d0             	add    %rdx,%rax
    6256:	48 d1 f8             	sar    %rax
    6259:	48 85 c9             	test   %rcx,%rcx
    625c:	7f d2                	jg     6230 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x9d0>
    625e:	48 89 9d 18 fb ff ff 	mov    %rbx,-0x4e8(%rbp)
    6265:	48 89 3c ce          	mov    %rdi,(%rsi,%rcx,8)
    6269:	e9 62 f9 ff ff       	jmpq   5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    626e:	66 90                	xchg   %ax,%ax
    6270:	8b 85 10 fb ff ff    	mov    -0x4f0(%rbp),%eax
    6276:	85 c0                	test   %eax,%eax
    6278:	0f 84 ba 02 00 00    	je     6538 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xcd8>
    627e:	03 85 00 fb ff ff    	add    -0x500(%rbp),%eax
    6284:	89 85 e0 fa ff ff    	mov    %eax,-0x520(%rbp)
    628a:	0f 88 b8 03 00 00    	js     6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    6290:	48 63 f8             	movslq %eax,%rdi
    6293:	49 8b 16             	mov    (%r14),%rdx
    6296:	49 8b 46 08          	mov    0x8(%r14),%rax
    629a:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
    62a1:	aa aa aa 
    62a4:	48 89 bd c8 fa ff ff 	mov    %rdi,-0x538(%rbp)
    62ab:	48 29 d0             	sub    %rdx,%rax
    62ae:	48 c1 f8 03          	sar    $0x3,%rax
    62b2:	48 0f af c6          	imul   %rsi,%rax
    62b6:	48 39 c7             	cmp    %rax,%rdi
    62b9:	0f 83 89 03 00 00    	jae    6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    62bf:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
    62c3:	48 2b 0a             	sub    (%rdx),%rcx
    62c6:	41 8d 75 01          	lea    0x1(%r13),%esi
    62ca:	48 63 f6             	movslq %esi,%rsi
    62cd:	48 c1 f9 02          	sar    $0x2,%rcx
    62d1:	48 39 ce             	cmp    %rcx,%rsi
    62d4:	73 0f                	jae    62e5 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xa85>
    62d6:	48 8d 3c 7f          	lea    (%rdi,%rdi,2),%rdi
    62da:	48 8b 3c fa          	mov    (%rdx,%rdi,8),%rdi
    62de:	8b 3c b7             	mov    (%rdi,%rsi,4),%edi
    62e1:	85 ff                	test   %edi,%edi
    62e3:	74 5b                	je     6340 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xae0>
    62e5:	41 8d 75 ff          	lea    -0x1(%r13),%esi
    62e9:	83 fe ff             	cmp    $0xffffffff,%esi
    62ec:	74 3a                	je     6328 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xac8>
    62ee:	48 63 f6             	movslq %esi,%rsi
    62f1:	48 39 f1             	cmp    %rsi,%rcx
    62f4:	76 32                	jbe    6328 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xac8>
    62f6:	48 8b bd c8 fa ff ff 	mov    -0x538(%rbp),%rdi
    62fd:	48 8d 0c 7f          	lea    (%rdi,%rdi,2),%rcx
    6301:	48 8b 0c ca          	mov    (%rdx,%rcx,8),%rcx
    6305:	8b 0c b1             	mov    (%rcx,%rsi,4),%ecx
    6308:	85 c9                	test   %ecx,%ecx
    630a:	0f 84 50 06 00 00    	je     6960 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1100>
    6310:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
    6316:	44 01 e8             	add    %r13d,%eax
    6319:	89 85 c4 fa ff ff    	mov    %eax,-0x53c(%rbp)
    631f:	f7 d0                	not    %eax
    6321:	89 c6                	mov    %eax,%esi
    6323:	e9 a1 fa ff ff       	jmpq   5dc9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x569>
    6328:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
    632e:	44 01 e8             	add    %r13d,%eax
    6331:	89 c6                	mov    %eax,%esi
    6333:	89 85 c4 fa ff ff    	mov    %eax,-0x53c(%rbp)
    6339:	f7 d6                	not    %esi
    633b:	e9 89 fa ff ff       	jmpq   5dc9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x569>
    6340:	48 39 85 e8 fa ff ff 	cmp    %rax,-0x518(%rbp)
    6347:	0f 83 8b fb ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    634d:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
    6354:	48 8b 3c fa          	mov    (%rdx,%rdi,8),%rdi
    6358:	8b 34 b7             	mov    (%rdi,%rsi,4),%esi
    635b:	85 f6                	test   %esi,%esi
    635d:	0f 85 75 fb ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6363:	eb 80                	jmp    62e5 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xa85>
    6365:	0f 1f 00             	nopl   (%rax)
    6368:	bf 20 00 00 00       	mov    $0x20,%edi
    636d:	e8 ce bc ff ff       	callq  2040 <operator new(unsigned long)@plt>
    6372:	49 89 c4             	mov    %rax,%r12
    6375:	48 8b 95 f0 fa ff ff 	mov    -0x510(%rbp),%rdx
    637c:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
    6382:	45 89 6c 24 04       	mov    %r13d,0x4(%r12)
    6387:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
    638e:	00 00 
    6390:	41 c7 44 24 10 00 00 	movl   $0x0,0x10(%r12)
    6397:	00 00 
    6399:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
    63a0:	00 00 
    63a2:	41 89 04 24          	mov    %eax,(%r12)
    63a6:	48 8b 12             	mov    (%rdx),%rdx
    63a9:	49 39 14 24          	cmp    %rdx,(%r12)
    63ad:	0f 84 8d 00 00 00    	je     6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    63b3:	8b 95 10 fb ff ff    	mov    -0x4f0(%rbp),%edx
    63b9:	01 c2                	add    %eax,%edx
    63bb:	0f 88 d9 00 00 00    	js     649a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc3a>
    63c1:	49 8b 0e             	mov    (%r14),%rcx
    63c4:	4d 8b 5e 08          	mov    0x8(%r14),%r11
    63c8:	49 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%r10
    63cf:	aa aa aa 
    63d2:	48 63 d2             	movslq %edx,%rdx
    63d5:	49 29 cb             	sub    %rcx,%r11
    63d8:	4c 89 d8             	mov    %r11,%rax
    63db:	48 c1 f8 03          	sar    $0x3,%rax
    63df:	49 0f af c2          	imul   %r10,%rax
    63e3:	48 39 c2             	cmp    %rax,%rdx
    63e6:	0f 83 ae 00 00 00    	jae    649a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc3a>
    63ec:	41 8d 75 01          	lea    0x1(%r13),%esi
    63f0:	4c 63 c6             	movslq %esi,%r8
    63f3:	48 8b 71 08          	mov    0x8(%rcx),%rsi
    63f7:	48 2b 31             	sub    (%rcx),%rsi
    63fa:	49 89 f2             	mov    %rsi,%r10
    63fd:	49 c1 fa 02          	sar    $0x2,%r10
    6401:	4d 39 d0             	cmp    %r10,%r8
    6404:	4c 89 d7             	mov    %r10,%rdi
    6407:	73 52                	jae    645b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbfb>
    6409:	48 8d 34 52          	lea    (%rdx,%rdx,2),%rsi
    640d:	48 8b 34 f1          	mov    (%rcx,%rsi,8),%rsi
    6411:	46 8b 1c 86          	mov    (%rsi,%r8,4),%r11d
    6415:	45 85 db             	test   %r11d,%r11d
    6418:	75 41                	jne    645b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbfb>
    641a:	48 39 85 c8 fa ff ff 	cmp    %rax,-0x538(%rbp)
    6421:	73 1d                	jae    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6423:	48 8b b5 e8 fa ff ff 	mov    -0x518(%rbp),%rsi
    642a:	48 8b 34 f1          	mov    (%rcx,%rsi,8),%rsi
    642e:	46 8b 14 86          	mov    (%rsi,%r8,4),%r10d
    6432:	45 85 d2             	test   %r10d,%r10d
    6435:	74 24                	je     645b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbfb>
    6437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    643e:	00 00 
    6440:	8b 03                	mov    (%rbx),%eax
    6442:	48 89 9d 20 fb ff ff 	mov    %rbx,-0x4e0(%rbp)
    6449:	44 8b 6b 04          	mov    0x4(%rbx),%r13d
    644d:	89 85 00 fb ff ff    	mov    %eax,-0x500(%rbp)
    6453:	41 89 c0             	mov    %eax,%r8d
    6456:	e9 8b fa ff ff       	jmpq   5ee6 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x686>
    645b:	41 8d 75 ff          	lea    -0x1(%r13),%esi
    645f:	83 fe ff             	cmp    $0xffffffff,%esi
    6462:	74 36                	je     649a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc3a>
    6464:	48 63 f6             	movslq %esi,%rsi
    6467:	48 39 f7             	cmp    %rsi,%rdi
    646a:	76 2e                	jbe    649a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc3a>
    646c:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
    6470:	48 8b 14 d1          	mov    (%rcx,%rdx,8),%rdx
    6474:	44 8b 0c b2          	mov    (%rdx,%rsi,4),%r9d
    6478:	45 85 c9             	test   %r9d,%r9d
    647b:	75 1d                	jne    649a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xc3a>
    647d:	48 39 85 c8 fa ff ff 	cmp    %rax,-0x538(%rbp)
    6484:	73 ba                	jae    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6486:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
    648d:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
    6491:	44 8b 04 b0          	mov    (%rax,%rsi,4),%r8d
    6495:	45 85 c0             	test   %r8d,%r8d
    6498:	75 a6                	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    649a:	48 83 ec 08          	sub    $0x8,%rsp
    649e:	4c 8b 8d f0 fa ff ff 	mov    -0x510(%rbp),%r9
    64a5:	8b 8d 10 fb ff ff    	mov    -0x4f0(%rbp),%ecx
    64ab:	8b b5 e0 fa ff ff    	mov    -0x520(%rbp),%esi
    64b1:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
    64b8:	45 31 c0             	xor    %r8d,%r8d
    64bb:	41 56                	push   %r14
    64bd:	44 89 ea             	mov    %r13d,%edx
    64c0:	e8 0b dc ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    64c5:	48 85 c0             	test   %rax,%rax
    64c8:	5e                   	pop    %rsi
    64c9:	5f                   	pop    %rdi
    64ca:	0f 85 70 ff ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    64d0:	be 20 00 00 00       	mov    $0x20,%esi
    64d5:	4c 89 e7             	mov    %r12,%rdi
    64d8:	e8 73 bb ff ff       	callq  2050 <operator delete(void*, unsigned long)@plt>
    64dd:	e9 ae f9 ff ff       	jmpq   5e90 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x630>
    64e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    64e8:	4c 89 95 18 fb ff ff 	mov    %r10,-0x4e8(%rbp)
    64ef:	bf 30 00 00 00       	mov    $0x30,%edi
    64f4:	e8 47 bb ff ff       	callq  2040 <operator new(unsigned long)@plt>
    64f9:	48 8b b5 18 fb ff ff 	mov    -0x4e8(%rbp),%rsi
    6500:	48 8b bd a0 fa ff ff 	mov    -0x560(%rbp),%rdi
    6507:	48 89 c1             	mov    %rax,%rcx
    650a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    6511:	48 89 da             	mov    %rbx,%rdx
    6514:	f3 0f 6f 06          	movdqu (%rsi),%xmm0
    6518:	0f 11 40 08          	movups %xmm0,0x8(%rax)
    651c:	f3 0f 6f 46 10       	movdqu 0x10(%rsi),%xmm0
    6521:	4c 89 e6             	mov    %r12,%rsi
    6524:	0f 11 40 18          	movups %xmm0,0x18(%rax)
    6528:	e8 23 f2 ff ff       	callq  5750 <std::_Hashtable<Node, Node, std::allocator<Node>, std::__detail::_Identity, std::equal_to<Node>, NodeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<Node, true>*)>
    652d:	e9 e1 f5 ff ff       	jmpq   5b13 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2b3>
    6532:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    6538:	44 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%r10d
    653f:	45 85 d2             	test   %r10d,%r10d
    6542:	0f 84 00 01 00 00    	je     6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    6548:	8b 85 00 fb ff ff    	mov    -0x500(%rbp),%eax
    654e:	49 8b 16             	mov    (%r14),%rdx
    6551:	42 8d 3c 2e          	lea    (%rsi,%r13,1),%edi
    6555:	48 be ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rsi
    655c:	aa aa aa 
    655f:	41 89 fa             	mov    %edi,%r10d
    6562:	89 bd c4 fa ff ff    	mov    %edi,-0x53c(%rbp)
    6568:	8d 48 01             	lea    0x1(%rax),%ecx
    656b:	49 8b 46 08          	mov    0x8(%r14),%rax
    656f:	48 63 c9             	movslq %ecx,%rcx
    6572:	48 29 d0             	sub    %rdx,%rax
    6575:	48 c1 f8 03          	sar    $0x3,%rax
    6579:	48 0f af c6          	imul   %rsi,%rax
    657d:	89 fe                	mov    %edi,%esi
    657f:	f7 d6                	not    %esi
    6581:	89 f7                	mov    %esi,%edi
    6583:	c1 ef 1f             	shr    $0x1f,%edi
    6586:	48 39 c1             	cmp    %rax,%rcx
    6589:	73 35                	jae    65c0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xd60>
    658b:	40 84 ff             	test   %dil,%dil
    658e:	74 30                	je     65c0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xd60>
    6590:	4c 8b 42 08          	mov    0x8(%rdx),%r8
    6594:	4c 2b 02             	sub    (%rdx),%r8
    6597:	4d 63 ca             	movslq %r10d,%r9
    659a:	49 c1 f8 02          	sar    $0x2,%r8
    659e:	4d 39 c1             	cmp    %r8,%r9
    65a1:	73 1d                	jae    65c0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xd60>
    65a3:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
    65a7:	48 8b 0c ca          	mov    (%rdx,%rcx,8),%rcx
    65ab:	46 8b 0c 89          	mov    (%rcx,%r9,4),%r9d
    65af:	45 85 c9             	test   %r9d,%r9d
    65b2:	0f 84 7f 03 00 00    	je     6937 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x10d7>
    65b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    65bf:	00 
    65c0:	8b 8d 00 fb ff ff    	mov    -0x500(%rbp),%ecx
    65c6:	83 e9 01             	sub    $0x1,%ecx
    65c9:	83 f9 ff             	cmp    $0xffffffff,%ecx
    65cc:	74 52                	je     6620 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xdc0>
    65ce:	48 63 c9             	movslq %ecx,%rcx
    65d1:	48 39 c8             	cmp    %rcx,%rax
    65d4:	76 4a                	jbe    6620 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xdc0>
    65d6:	40 84 ff             	test   %dil,%dil
    65d9:	74 45                	je     6620 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xdc0>
    65db:	48 8b 7a 08          	mov    0x8(%rdx),%rdi
    65df:	48 2b 3a             	sub    (%rdx),%rdi
    65e2:	4c 63 85 c4 fa ff ff 	movslq -0x53c(%rbp),%r8
    65e9:	48 c1 ff 02          	sar    $0x2,%rdi
    65ed:	49 39 f8             	cmp    %rdi,%r8
    65f0:	73 2e                	jae    6620 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xdc0>
    65f2:	48 8d 0c 49          	lea    (%rcx,%rcx,2),%rcx
    65f6:	48 8b 0c ca          	mov    (%rdx,%rcx,8),%rcx
    65fa:	46 8b 1c 81          	mov    (%rcx,%r8,4),%r11d
    65fe:	45 85 db             	test   %r11d,%r11d
    6601:	75 1d                	jne    6620 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xdc0>
    6603:	4c 8b 95 b8 fa ff ff 	mov    -0x548(%rbp),%r10
    660a:	49 39 fa             	cmp    %rdi,%r10
    660d:	0f 83 c5 f8 ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6613:	46 8b 14 91          	mov    (%rcx,%r10,4),%r10d
    6617:	45 85 d2             	test   %r10d,%r10d
    661a:	0f 85 b8 f8 ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6620:	48 63 bd 00 fb ff ff 	movslq -0x500(%rbp),%rdi
    6627:	85 ff                	test   %edi,%edi
    6629:	89 bd e0 fa ff ff    	mov    %edi,-0x520(%rbp)
    662f:	78 17                	js     6648 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xde8>
    6631:	48 39 c7             	cmp    %rax,%rdi
    6634:	48 89 bd c8 fa ff ff 	mov    %rdi,-0x538(%rbp)
    663b:	41 0f 92 c4          	setb   %r12b
    663f:	e9 85 f7 ff ff       	jmpq   5dc9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x569>
    6644:	0f 1f 40 00          	nopl   0x0(%rax)
    6648:	be 20 00 00 00       	mov    $0x20,%esi
    664d:	48 89 df             	mov    %rbx,%rdi
    6650:	e8 fb b9 ff ff       	callq  2050 <operator delete(void*, unsigned long)@plt>
    6655:	e9 76 f5 ff ff       	jmpq   5bd0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x370>
    665a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    6660:	48 89 df             	mov    %rbx,%rdi
    6663:	e8 28 ba ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    6668:	48 8b 03             	mov    (%rbx),%rax
    666b:	48 8d 15 be d9 ff ff 	lea    -0x2642(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    6672:	be 0a 00 00 00       	mov    $0xa,%esi
    6677:	48 8b 40 30          	mov    0x30(%rax),%rax
    667b:	48 39 d0             	cmp    %rdx,%rax
    667e:	0f 84 09 f5 ff ff    	je     5b8d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x32d>
    6684:	48 89 df             	mov    %rbx,%rdi
    6687:	ff d0                	callq  *%rax
    6689:	0f be f0             	movsbl %al,%esi
    668c:	e9 fc f4 ff ff       	jmpq   5b8d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x32d>
    6691:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    6698:	48 8b 7a 08          	mov    0x8(%rdx),%rdi
    669c:	48 2b 3a             	sub    (%rdx),%rdi
    669f:	4c 63 85 d8 fa ff ff 	movslq -0x528(%rbp),%r8
    66a6:	48 c1 ff 02          	sar    $0x2,%rdi
    66aa:	49 39 f8             	cmp    %rdi,%r8
    66ad:	73 44                	jae    66f3 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xe93>
    66af:	48 8b bd c8 fa ff ff 	mov    -0x538(%rbp),%rdi
    66b6:	41 89 cc             	mov    %ecx,%r12d
    66b9:	48 8d 3c 7f          	lea    (%rdi,%rdi,2),%rdi
    66bd:	48 8b 3c fa          	mov    (%rdx,%rdi,8),%rdi
    66c1:	46 8b 0c 87          	mov    (%rdi,%r8,4),%r9d
    66c5:	45 85 c9             	test   %r9d,%r9d
    66c8:	0f 85 fb f6 ff ff    	jne    5dc9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x569>
    66ce:	48 39 85 e8 fa ff ff 	cmp    %rax,-0x518(%rbp)
    66d5:	0f 83 fd f7 ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    66db:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
    66e2:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
    66e6:	46 8b 04 80          	mov    (%rax,%r8,4),%r8d
    66ea:	45 85 c0             	test   %r8d,%r8d
    66ed:	0f 85 e5 f7 ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    66f3:	41 89 cc             	mov    %ecx,%r12d
    66f6:	e9 ce f6 ff ff       	jmpq   5dc9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x569>
    66fb:	48 89 df             	mov    %rbx,%rdi
    66fe:	e8 8d b9 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    6703:	48 8b 03             	mov    (%rbx),%rax
    6706:	48 8d 15 23 d9 ff ff 	lea    -0x26dd(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    670d:	be 0a 00 00 00       	mov    $0xa,%esi
    6712:	48 8b 40 30          	mov    0x30(%rax),%rax
    6716:	48 39 d0             	cmp    %rdx,%rax
    6719:	0f 84 84 fa ff ff    	je     61a3 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x943>
    671f:	48 89 df             	mov    %rbx,%rdi
    6722:	ff d0                	callq  *%rax
    6724:	0f be f0             	movsbl %al,%esi
    6727:	e9 77 fa ff ff       	jmpq   61a3 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x943>
    672c:	48 8b bd b8 fa ff ff 	mov    -0x548(%rbp),%rdi
    6733:	48 39 c7             	cmp    %rax,%rdi
    6736:	0f 83 9c f7 ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    673c:	44 8b 14 ba          	mov    (%rdx,%rdi,4),%r10d
    6740:	45 85 d2             	test   %r10d,%r10d
    6743:	0f 85 8f f7 ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6749:	e9 1a f6 ff ff       	jmpq   5d68 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x508>
    674e:	48 8b 95 80 fa ff ff 	mov    -0x580(%rbp),%rdx
    6755:	48 8b bd a8 fa ff ff 	mov    -0x558(%rbp),%rdi
    675c:	e8 bf e5 ff ff       	callq  4d20 <void std::vector<Node*, std::allocator<Node*> >::_M_realloc_insert<Node* const&>(__gnu_cxx::__normal_iterator<Node**, std::vector<Node*, std::allocator<Node*> > >, Node* const&)>
    6761:	48 8b 85 48 fb ff ff 	mov    -0x4b8(%rbp),%rax
    6768:	48 8b 78 f8          	mov    -0x8(%rax),%rdi
    676c:	e9 6b fa ff ff       	jmpq   61dc <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x97c>
    6771:	bf 20 00 00 00       	mov    $0x20,%edi
    6776:	e8 c5 b8 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    677b:	8b 95 e0 fa ff ff    	mov    -0x520(%rbp),%edx
    6781:	49 89 c4             	mov    %rax,%r12
    6784:	89 10                	mov    %edx,(%rax)
    6786:	8b 85 c4 fa ff ff    	mov    -0x53c(%rbp),%eax
    678c:	48 8b 95 f0 fa ff ff 	mov    -0x510(%rbp),%rdx
    6793:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
    679a:	00 00 
    679c:	41 c7 44 24 10 00 00 	movl   $0x0,0x10(%r12)
    67a3:	00 00 
    67a5:	49 c7 44 24 18 00 00 	movq   $0x0,0x18(%r12)
    67ac:	00 00 
    67ae:	41 89 44 24 04       	mov    %eax,0x4(%r12)
    67b3:	48 8b 12             	mov    (%rdx),%rdx
    67b6:	49 39 14 24          	cmp    %rdx,(%r12)
    67ba:	0f 84 80 fc ff ff    	je     6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    67c0:	80 bd c3 fa ff ff 00 	cmpb   $0x0,-0x53d(%rbp)
    67c7:	0f 84 bd 01 00 00    	je     698a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x112a>
    67cd:	8b 95 f8 fa ff ff    	mov    -0x508(%rbp),%edx
    67d3:	49 8b 0e             	mov    (%r14),%rcx
    67d6:	48 bf ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdi
    67dd:	aa aa aa 
    67e0:	01 c2                	add    %eax,%edx
    67e2:	49 8b 46 08          	mov    0x8(%r14),%rax
    67e6:	48 29 c8             	sub    %rcx,%rax
    67e9:	48 c1 f8 03          	sar    $0x3,%rax
    67ed:	48 0f af c7          	imul   %rdi,%rax
    67f1:	48 39 85 e8 fa ff ff 	cmp    %rax,-0x518(%rbp)
    67f8:	73 2f                	jae    6829 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xfc9>
    67fa:	85 d2                	test   %edx,%edx
    67fc:	78 2b                	js     6829 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xfc9>
    67fe:	48 8b 71 08          	mov    0x8(%rcx),%rsi
    6802:	48 2b 31             	sub    (%rcx),%rsi
    6805:	48 63 d2             	movslq %edx,%rdx
    6808:	48 c1 fe 02          	sar    $0x2,%rsi
    680c:	48 39 f2             	cmp    %rsi,%rdx
    680f:	73 18                	jae    6829 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xfc9>
    6811:	48 8b bd b0 fa ff ff 	mov    -0x550(%rbp),%rdi
    6818:	48 8b 3c f9          	mov    (%rcx,%rdi,8),%rdi
    681c:	44 8b 04 97          	mov    (%rdi,%rdx,4),%r8d
    6820:	45 85 c0             	test   %r8d,%r8d
    6823:	0f 84 d9 0f 00 00    	je     7802 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1fa2>
    6829:	8b 95 10 fb ff ff    	mov    -0x4f0(%rbp),%edx
    682f:	03 95 e0 fa ff ff    	add    -0x520(%rbp),%edx
    6835:	78 34                	js     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6837:	48 63 d2             	movslq %edx,%rdx
    683a:	48 39 d0             	cmp    %rdx,%rax
    683d:	76 2c                	jbe    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    683f:	48 8b 71 08          	mov    0x8(%rcx),%rsi
    6843:	48 2b 31             	sub    (%rcx),%rsi
    6846:	48 8b bd b8 fa ff ff 	mov    -0x548(%rbp),%rdi
    684d:	48 c1 fe 02          	sar    $0x2,%rsi
    6851:	48 39 f7             	cmp    %rsi,%rdi
    6854:	73 15                	jae    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6856:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
    685a:	48 8b 14 d1          	mov    (%rcx,%rdx,8),%rdx
    685e:	44 8b 1c ba          	mov    (%rdx,%rdi,4),%r11d
    6862:	45 85 db             	test   %r11d,%r11d
    6865:	0f 84 6d 0f 00 00    	je     77d8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f78>
    686b:	48 83 ec 08          	sub    $0x8,%rsp
    686f:	4c 8b 8d f0 fa ff ff 	mov    -0x510(%rbp),%r9
    6876:	44 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%r8d
    687d:	8b 8d 10 fb ff ff    	mov    -0x4f0(%rbp),%ecx
    6883:	8b 95 c4 fa ff ff    	mov    -0x53c(%rbp),%edx
    6889:	8b b5 e0 fa ff ff    	mov    -0x520(%rbp),%esi
    688f:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
    6896:	41 56                	push   %r14
    6898:	e8 33 d8 ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    689d:	48 85 c0             	test   %rax,%rax
    68a0:	41 58                	pop    %r8
    68a2:	41 59                	pop    %r9
    68a4:	0f 85 96 fb ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    68aa:	80 bd c3 fa ff ff 00 	cmpb   $0x0,-0x53d(%rbp)
    68b1:	74 72                	je     6925 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x10c5>
    68b3:	48 83 ec 08          	sub    $0x8,%rsp
    68b7:	4c 8b 8d f0 fa ff ff 	mov    -0x510(%rbp),%r9
    68be:	8b 8d 10 fb ff ff    	mov    -0x4f0(%rbp),%ecx
    68c4:	8b 95 c4 fa ff ff    	mov    -0x53c(%rbp),%edx
    68ca:	8b b5 e0 fa ff ff    	mov    -0x520(%rbp),%esi
    68d0:	45 31 c0             	xor    %r8d,%r8d
    68d3:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
    68da:	41 56                	push   %r14
    68dc:	e8 ef d7 ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    68e1:	48 85 c0             	test   %rax,%rax
    68e4:	5e                   	pop    %rsi
    68e5:	5f                   	pop    %rdi
    68e6:	0f 85 54 fb ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    68ec:	48 83 ec 08          	sub    $0x8,%rsp
    68f0:	4c 8b 8d f0 fa ff ff 	mov    -0x510(%rbp),%r9
    68f7:	44 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%r8d
    68fe:	8b 95 c4 fa ff ff    	mov    -0x53c(%rbp),%edx
    6904:	8b b5 e0 fa ff ff    	mov    -0x520(%rbp),%esi
    690a:	31 c9                	xor    %ecx,%ecx
    690c:	48 8b bd 90 fa ff ff 	mov    -0x570(%rbp),%rdi
    6913:	41 56                	push   %r14
    6915:	e8 b6 d7 ff ff       	callq  40d0 <JPS::jump(int, int, int, int, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)>
    691a:	48 85 c0             	test   %rax,%rax
    691d:	5a                   	pop    %rdx
    691e:	59                   	pop    %rcx
    691f:	0f 85 1b fb ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6925:	be 20 00 00 00       	mov    $0x20,%esi
    692a:	4c 89 e7             	mov    %r12,%rdi
    692d:	e8 1e b7 ff ff       	callq  2050 <operator delete(void*, unsigned long)@plt>
    6932:	e9 eb f4 ff ff       	jmpq   5e22 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x5c2>
    6937:	4c 8b 95 b8 fa ff ff 	mov    -0x548(%rbp),%r10
    693e:	4d 39 c2             	cmp    %r8,%r10
    6941:	0f 83 91 f5 ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6947:	46 8b 24 91          	mov    (%rcx,%r10,4),%r12d
    694b:	45 85 e4             	test   %r12d,%r12d
    694e:	0f 85 84 f5 ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6954:	e9 67 fc ff ff       	jmpq   65c0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xd60>
    6959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    6960:	48 39 85 e8 fa ff ff 	cmp    %rax,-0x518(%rbp)
    6967:	0f 83 6b f5 ff ff    	jae    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    696d:	48 8b 85 b0 fa ff ff 	mov    -0x550(%rbp),%rax
    6974:	48 8b 04 c2          	mov    (%rdx,%rax,8),%rax
    6978:	44 8b 1c b0          	mov    (%rax,%rsi,4),%r11d
    697c:	45 85 db             	test   %r11d,%r11d
    697f:	0f 85 53 f5 ff ff    	jne    5ed8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x678>
    6985:	e9 86 f9 ff ff       	jmpq   6310 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xab0>
    698a:	8b 85 10 fb ff ff    	mov    -0x4f0(%rbp),%eax
    6990:	85 c0                	test   %eax,%eax
    6992:	0f 84 9e 08 00 00    	je     7236 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19d6>
    6998:	03 85 e0 fa ff ff    	add    -0x520(%rbp),%eax
    699e:	48 63 c8             	movslq %eax,%rcx
    69a1:	0f 88 c4 fe ff ff    	js     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    69a7:	49 8b 36             	mov    (%r14),%rsi
    69aa:	49 8b 46 08          	mov    0x8(%r14),%rax
    69ae:	48 ba ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    69b5:	aa aa aa 
    69b8:	48 29 f0             	sub    %rsi,%rax
    69bb:	48 c1 f8 03          	sar    $0x3,%rax
    69bf:	48 0f af c2          	imul   %rdx,%rax
    69c3:	48 39 c1             	cmp    %rax,%rcx
    69c6:	0f 83 9f fe ff ff    	jae    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    69cc:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    69d0:	48 2b 16             	sub    (%rsi),%rdx
    69d3:	48 c1 fa 02          	sar    $0x2,%rdx
    69d7:	48 89 d7             	mov    %rdx,%rdi
    69da:	8b 95 c4 fa ff ff    	mov    -0x53c(%rbp),%edx
    69e0:	83 c2 01             	add    $0x1,%edx
    69e3:	48 63 d2             	movslq %edx,%rdx
    69e6:	48 39 fa             	cmp    %rdi,%rdx
    69e9:	73 3f                	jae    6a2a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x11ca>
    69eb:	48 8d 14 49          	lea    (%rcx,%rcx,2),%rdx
    69ef:	4c 8b 95 78 fa ff ff 	mov    -0x588(%rbp),%r10
    69f6:	48 8b 14 d6          	mov    (%rsi,%rdx,8),%rdx
    69fa:	46 8b 4c 12 04       	mov    0x4(%rdx,%r10,1),%r9d
    69ff:	45 85 c9             	test   %r9d,%r9d
    6a02:	75 26                	jne    6a2a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x11ca>
    6a04:	48 3b 85 c8 fa ff ff 	cmp    -0x538(%rbp),%rax
    6a0b:	0f 86 2f fa ff ff    	jbe    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6a11:	48 8b 95 d8 fa ff ff 	mov    -0x528(%rbp),%rdx
    6a18:	48 8b 14 d6          	mov    (%rsi,%rdx,8),%rdx
    6a1c:	46 8b 44 12 04       	mov    0x4(%rdx,%r10,1),%r8d
    6a21:	45 85 c0             	test   %r8d,%r8d
    6a24:	0f 85 16 fa ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6a2a:	8b 95 c4 fa ff ff    	mov    -0x53c(%rbp),%edx
    6a30:	83 ea 01             	sub    $0x1,%edx
    6a33:	83 fa ff             	cmp    $0xffffffff,%edx
    6a36:	0f 84 2f fe ff ff    	je     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6a3c:	48 63 d2             	movslq %edx,%rdx
    6a3f:	48 39 d7             	cmp    %rdx,%rdi
    6a42:	0f 86 23 fe ff ff    	jbe    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6a48:	48 8d 14 49          	lea    (%rcx,%rcx,2),%rdx
    6a4c:	48 8b bd 78 fa ff ff 	mov    -0x588(%rbp),%rdi
    6a53:	48 8b 14 d6          	mov    (%rsi,%rdx,8),%rdx
    6a57:	8b 54 3a fc          	mov    -0x4(%rdx,%rdi,1),%edx
    6a5b:	85 d2                	test   %edx,%edx
    6a5d:	0f 85 08 fe ff ff    	jne    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6a63:	48 3b 85 c8 fa ff ff 	cmp    -0x538(%rbp),%rax
    6a6a:	0f 86 d0 f9 ff ff    	jbe    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6a70:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
    6a77:	48 8b 04 c6          	mov    (%rsi,%rax,8),%rax
    6a7b:	8b 44 38 fc          	mov    -0x4(%rax,%rdi,1),%eax
    6a7f:	85 c0                	test   %eax,%eax
    6a81:	0f 85 b9 f9 ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    6a87:	e9 df fd ff ff       	jmpq   686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    6a8c:	0f 1f 40 00          	nopl   0x0(%rax)
    6a90:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    6a97:	66 0f ef ff          	pxor   %xmm7,%xmm7
    6a9b:	66 0f ef c0          	pxor   %xmm0,%xmm0
    6a9f:	48 c7 85 30 fb ff ff 	movq   $0x0,-0x4d0(%rbp)
    6aa6:	00 00 00 00 
    6aaa:	31 f6                	xor    %esi,%esi
    6aac:	31 c9                	xor    %ecx,%ecx
    6aae:	48 8d 9d 20 fb ff ff 	lea    -0x4e0(%rbp),%rbx
    6ab5:	f3 0f 5a 78 10       	cvtss2sd 0x10(%rax),%xmm7
    6aba:	0f 29 85 20 fb ff ff 	movaps %xmm0,-0x4e0(%rbp)
    6ac1:	f2 0f 11 bd e0 fa ff 	movsd  %xmm7,-0x520(%rbp)
    6ac8:	ff 
    6ac9:	eb 3f                	jmp    6b0a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x12aa>
    6acb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    6ad0:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    6ad7:	48 83 c1 20          	add    $0x20,%rcx
    6adb:	f3 0f 6f 00          	movdqu (%rax),%xmm0
    6adf:	0f 11 41 e0          	movups %xmm0,-0x20(%rcx)
    6ae3:	f3 0f 6f 40 10       	movdqu 0x10(%rax),%xmm0
    6ae8:	0f 11 41 f0          	movups %xmm0,-0x10(%rcx)
    6aec:	48 8b 40 18          	mov    0x18(%rax),%rax
    6af0:	48 89 8d 28 fb ff ff 	mov    %rcx,-0x4d8(%rbp)
    6af7:	48 85 c0             	test   %rax,%rax
    6afa:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
    6b01:	74 39                	je     6b3c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x12dc>
    6b03:	48 8b b5 30 fb ff ff 	mov    -0x4d0(%rbp),%rsi
    6b0a:	48 39 ce             	cmp    %rcx,%rsi
    6b0d:	75 c1                	jne    6ad0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1270>
    6b0f:	48 8b 95 18 fb ff ff 	mov    -0x4e8(%rbp),%rdx
    6b16:	48 89 df             	mov    %rbx,%rdi
    6b19:	e8 62 db ff ff       	callq  4680 <void std::vector<Node, std::allocator<Node> >::_M_realloc_insert<Node const&>(__gnu_cxx::__normal_iterator<Node*, std::vector<Node, std::allocator<Node> > >, Node const&)>
    6b1e:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    6b25:	48 8b 8d 28 fb ff ff 	mov    -0x4d8(%rbp),%rcx
    6b2c:	48 8b 40 18          	mov    0x18(%rax),%rax
    6b30:	48 85 c0             	test   %rax,%rax
    6b33:	48 89 85 18 fb ff ff 	mov    %rax,-0x4e8(%rbp)
    6b3a:	75 c7                	jne    6b03 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x12a3>
    6b3c:	48 8b b5 20 fb ff ff 	mov    -0x4e0(%rbp),%rsi
    6b43:	48 39 ce             	cmp    %rcx,%rsi
    6b46:	74 64                	je     6bac <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x134c>
    6b48:	48 8d 41 e0          	lea    -0x20(%rcx),%rax
    6b4c:	48 39 c6             	cmp    %rax,%rsi
    6b4f:	73 5b                	jae    6bac <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x134c>
    6b51:	48 89 f2             	mov    %rsi,%rdx
    6b54:	0f 1f 40 00          	nopl   0x0(%rax)
    6b58:	f3 0f 6f 18          	movdqu (%rax),%xmm3
    6b5c:	48 83 c2 20          	add    $0x20,%rdx
    6b60:	48 83 e8 20          	sub    $0x20,%rax
    6b64:	44 8b 4a e0          	mov    -0x20(%rdx),%r9d
    6b68:	44 8b 42 e4          	mov    -0x1c(%rdx),%r8d
    6b6c:	f3 0f 10 52 e8       	movss  -0x18(%rdx),%xmm2
    6b71:	48 8b 7a f8          	mov    -0x8(%rdx),%rdi
    6b75:	f3 0f 10 4a ec       	movss  -0x14(%rdx),%xmm1
    6b7a:	0f 11 5a e0          	movups %xmm3,-0x20(%rdx)
    6b7e:	f3 0f 6f 58 30       	movdqu 0x30(%rax),%xmm3
    6b83:	f3 0f 10 42 f0       	movss  -0x10(%rdx),%xmm0
    6b88:	0f 11 5a f0          	movups %xmm3,-0x10(%rdx)
    6b8c:	44 89 48 20          	mov    %r9d,0x20(%rax)
    6b90:	44 89 40 24          	mov    %r8d,0x24(%rax)
    6b94:	f3 0f 11 50 28       	movss  %xmm2,0x28(%rax)
    6b99:	f3 0f 11 48 2c       	movss  %xmm1,0x2c(%rax)
    6b9e:	f3 0f 11 40 30       	movss  %xmm0,0x30(%rax)
    6ba3:	48 89 78 38          	mov    %rdi,0x38(%rax)
    6ba7:	48 39 c2             	cmp    %rax,%rdx
    6baa:	72 ac                	jb     6b58 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x12f8>
    6bac:	48 89 cb             	mov    %rcx,%rbx
    6baf:	45 31 e4             	xor    %r12d,%r12d
    6bb2:	48 29 f3             	sub    %rsi,%rbx
    6bb5:	48 89 d8             	mov    %rbx,%rax
    6bb8:	48 c1 f8 05          	sar    $0x5,%rax
    6bbc:	48 85 c0             	test   %rax,%rax
    6bbf:	74 2c                	je     6bed <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x138d>
    6bc1:	48 ba ff ff ff ff ff 	movabs $0x7ffffffffffffff,%rdx
    6bc8:	ff ff 07 
    6bcb:	48 39 d0             	cmp    %rdx,%rax
    6bce:	0f 87 7c 11 00 00    	ja     7d50 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24f0>
    6bd4:	48 89 df             	mov    %rbx,%rdi
    6bd7:	e8 64 b4 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    6bdc:	48 8b 8d 28 fb ff ff 	mov    -0x4d8(%rbp),%rcx
    6be3:	48 8b b5 20 fb ff ff 	mov    -0x4e0(%rbp),%rsi
    6bea:	49 89 c4             	mov    %rax,%r12
    6bed:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
    6bf1:	48 39 ce             	cmp    %rcx,%rsi
    6bf4:	48 89 85 d8 fa ff ff 	mov    %rax,-0x528(%rbp)
    6bfb:	0f 84 93 0c 00 00    	je     7894 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2034>
    6c01:	48 8d 46 20          	lea    0x20(%rsi),%rax
    6c05:	48 29 c1             	sub    %rax,%rcx
    6c08:	31 c0                	xor    %eax,%eax
    6c0a:	48 83 e1 e0          	and    $0xffffffffffffffe0,%rcx
    6c0e:	48 8d 51 20          	lea    0x20(%rcx),%rdx
    6c12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    6c18:	f3 0f 6f 04 06       	movdqu (%rsi,%rax,1),%xmm0
    6c1d:	41 0f 11 04 04       	movups %xmm0,(%r12,%rax,1)
    6c22:	f3 0f 6f 44 06 10    	movdqu 0x10(%rsi,%rax,1),%xmm0
    6c28:	41 0f 11 44 04 10    	movups %xmm0,0x10(%r12,%rax,1)
    6c2e:	48 83 c0 20          	add    $0x20,%rax
    6c32:	48 39 c2             	cmp    %rax,%rdx
    6c35:	75 e1                	jne    6c18 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x13b8>
    6c37:	49 8d 04 14          	lea    (%r12,%rdx,1),%rax
    6c3b:	48 89 85 10 fb ff ff 	mov    %rax,-0x4f0(%rbp)
    6c42:	48 8d bd 20 fb ff ff 	lea    -0x4e0(%rbp),%rdi
    6c49:	48 89 b5 28 fb ff ff 	mov    %rsi,-0x4d8(%rbp)
    6c50:	e8 9b db ff ff       	callq  47f0 <std::vector<Node, std::allocator<Node> >::_M_shrink_to_fit()>
    6c55:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
    6c5c:	48 85 ff             	test   %rdi,%rdi
    6c5f:	74 05                	je     6c66 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1406>
    6c61:	e8 ca b3 ff ff       	callq  2030 <operator delete(void*)@plt>
    6c66:	48 8d 85 a0 fb ff ff 	lea    -0x460(%rbp),%rax
    6c6d:	bf 19 00 00 00       	mov    $0x19,%edi
    6c72:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
    6c79:	48 83 c0 10          	add    $0x10,%rax
    6c7d:	48 89 85 a0 fb ff ff 	mov    %rax,-0x460(%rbp)
    6c84:	e8 b7 b3 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    6c89:	66 0f 6f 05 8f 13 00 	movdqa 0x138f(%rip),%xmm0        # 8020 <._96+0x40>
    6c90:	00 
    6c91:	48 bb 5f 6c 6f 67 2e 	movabs $0x7478742e676f6c5f,%rbx
    6c98:	74 78 74 
    6c9b:	48 89 58 10          	mov    %rbx,0x10(%rax)
    6c9f:	48 8d 9d b0 fd ff ff 	lea    -0x250(%rbp),%rbx
    6ca6:	c6 40 18 00          	movb   $0x0,0x18(%rax)
    6caa:	0f 11 00             	movups %xmm0,(%rax)
    6cad:	48 8d bb 08 01 00 00 	lea    0x108(%rbx),%rdi
    6cb4:	48 89 85 a0 fb ff ff 	mov    %rax,-0x460(%rbp)
    6cbb:	48 89 9d 18 fb ff ff 	mov    %rbx,-0x4e8(%rbp)
    6cc2:	48 c7 85 b0 fb ff ff 	movq   $0x18,-0x450(%rbp)
    6cc9:	18 00 00 00 
    6ccd:	48 c7 85 a8 fb ff ff 	movq   $0x18,-0x458(%rbp)
    6cd4:	18 00 00 00 
    6cd8:	e8 23 b2 ff ff       	callq  1f00 <std::ios_base::ios_base()@plt>
    6cdd:	48 8d 05 4c 2b 20 00 	lea    0x202b4c(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    6ce4:	66 0f ef c0          	pxor   %xmm0,%xmm0
    6ce8:	c6 45 98 00          	movb   $0x0,-0x68(%rbp)
    6cec:	48 8b 15 05 2d 20 00 	mov    0x202d05(%rip),%rdx        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    6cf3:	31 f6                	xor    %esi,%esi
    6cf5:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    6cfc:	48 8b 05 ed 2c 20 00 	mov    0x202ced(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    6d03:	0f 29 45 a0          	movaps %xmm0,-0x60(%rbp)
    6d07:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
    6d0e:	00 
    6d0f:	c6 45 99 00          	movb   $0x0,-0x67(%rbp)
    6d13:	0f 29 45 b0          	movaps %xmm0,-0x50(%rbp)
    6d17:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    6d1e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6d22:	48 89 94 05 b0 fd ff 	mov    %rdx,-0x250(%rbp,%rax,1)
    6d29:	ff 
    6d2a:	48 8b 05 bf 2c 20 00 	mov    0x202cbf(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    6d31:	48 c7 85 b8 fd ff ff 	movq   $0x0,-0x248(%rbp)
    6d38:	00 00 00 00 
    6d3c:	48 03 58 e8          	add    -0x18(%rax),%rbx
    6d40:	48 89 df             	mov    %rbx,%rdi
    6d43:	e8 88 b3 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6d48:	48 8b 05 b1 2c 20 00 	mov    0x202cb1(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    6d4f:	48 8b 9d 18 fb ff ff 	mov    -0x4e8(%rbp),%rbx
    6d56:	31 f6                	xor    %esi,%esi
    6d58:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    6d5f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6d63:	48 8d 7c 03 10       	lea    0x10(%rbx,%rax,1),%rdi
    6d68:	48 8b 05 99 2c 20 00 	mov    0x202c99(%rip),%rax        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    6d6f:	48 89 07             	mov    %rax,(%rdi)
    6d72:	e8 59 b3 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6d77:	48 8b 05 6a 2c 20 00 	mov    0x202c6a(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    6d7e:	48 8b 15 8b 2c 20 00 	mov    0x202c8b(%rip),%rdx        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    6d85:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    6d89:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6d8d:	48 89 94 05 b0 fd ff 	mov    %rdx,-0x250(%rbp,%rax,1)
    6d94:	ff 
    6d95:	48 8d 05 5c 2b 20 00 	lea    0x202b5c(%rip),%rax        # 2098f8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    6d9c:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    6da3:	48 83 c0 50          	add    $0x50,%rax
    6da7:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    6dae:	48 83 e8 28          	sub    $0x28,%rax
    6db2:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    6db9:	e8 a2 b2 ff ff       	callq  2060 <std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@plt>
    6dbe:	48 8b 9d 18 fb ff ff 	mov    -0x4e8(%rbp),%rbx
    6dc5:	48 8d 73 18          	lea    0x18(%rbx),%rsi
    6dc9:	48 8d bb 08 01 00 00 	lea    0x108(%rbx),%rdi
    6dd0:	e8 fb b2 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6dd5:	48 8b b5 a0 fb ff ff 	mov    -0x460(%rbp),%rsi
    6ddc:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    6de0:	ba 11 00 00 00       	mov    $0x11,%edx
    6de5:	e8 36 b2 ff ff       	callq  2020 <std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@plt>
    6dea:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
    6df1:	48 03 5a e8          	add    -0x18(%rdx),%rbx
    6df5:	48 85 c0             	test   %rax,%rax
    6df8:	48 89 df             	mov    %rbx,%rdi
    6dfb:	0f 84 61 0a 00 00    	je     7862 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2002>
    6e01:	31 f6                	xor    %esi,%esi
    6e03:	e8 68 b3 ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    6e08:	48 8d 9d 20 fc ff ff 	lea    -0x3e0(%rbp),%rbx
    6e0f:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    6e16:	e8 e5 b0 ff ff       	callq  1f00 <std::ios_base::ios_base()@plt>
    6e1b:	4c 8b 3d 7e 2a 20 00 	mov    0x202a7e(%rip),%r15        # 2098a0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    6e22:	48 8d 05 07 2a 20 00 	lea    0x202a07(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    6e29:	c6 85 80 fd ff ff 00 	movb   $0x0,-0x280(%rbp)
    6e30:	48 8b 15 71 2a 20 00 	mov    0x202a71(%rip),%rdx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    6e37:	48 c7 85 78 fd ff ff 	movq   $0x0,-0x288(%rbp)
    6e3e:	00 00 00 00 
    6e42:	31 f6                	xor    %esi,%esi
    6e44:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    6e4b:	c6 85 81 fd ff ff 00 	movb   $0x0,-0x27f(%rbp)
    6e52:	49 8b 47 e8          	mov    -0x18(%r15),%rax
    6e56:	48 c7 85 88 fd ff ff 	movq   $0x0,-0x278(%rbp)
    6e5d:	00 00 00 00 
    6e61:	48 c7 85 90 fd ff ff 	movq   $0x0,-0x270(%rbp)
    6e68:	00 00 00 00 
    6e6c:	48 c7 85 98 fd ff ff 	movq   $0x0,-0x268(%rbp)
    6e73:	00 00 00 00 
    6e77:	48 c7 85 a0 fd ff ff 	movq   $0x0,-0x260(%rbp)
    6e7e:	00 00 00 00 
    6e82:	4c 89 bd 20 fc ff ff 	mov    %r15,-0x3e0(%rbp)
    6e89:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    6e90:	ff 
    6e91:	48 c7 85 28 fc ff ff 	movq   $0x0,-0x3d8(%rbp)
    6e98:	00 00 00 00 
    6e9c:	49 8b 7f e8          	mov    -0x18(%r15),%rdi
    6ea0:	48 01 df             	add    %rbx,%rdi
    6ea3:	e8 28 b2 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6ea8:	48 8b 05 01 2a 20 00 	mov    0x202a01(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    6eaf:	31 f6                	xor    %esi,%esi
    6eb1:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
    6eb8:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6ebc:	48 8d 7c 03 10       	lea    0x10(%rbx,%rax,1),%rdi
    6ec1:	48 8b 05 f0 29 20 00 	mov    0x2029f0(%rip),%rax        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    6ec8:	48 89 07             	mov    %rax,(%rdi)
    6ecb:	e8 00 b2 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6ed0:	48 8b 05 c1 29 20 00 	mov    0x2029c1(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    6ed7:	48 8b 15 e2 29 20 00 	mov    0x2029e2(%rip),%rdx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    6ede:	48 8d 7b 50          	lea    0x50(%rbx),%rdi
    6ee2:	66 0f ef c0          	pxor   %xmm0,%xmm0
    6ee6:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    6eea:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    6ef1:	ff 
    6ef2:	48 8d 05 7f 2b 20 00 	lea    0x202b7f(%rip),%rax        # 209a78 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    6ef9:	0f 29 85 40 fc ff ff 	movaps %xmm0,-0x3c0(%rbp)
    6f00:	48 89 85 20 fc ff ff 	mov    %rax,-0x3e0(%rbp)
    6f07:	48 83 c0 50          	add    $0x50,%rax
    6f0b:	0f 29 85 50 fc ff ff 	movaps %xmm0,-0x3b0(%rbp)
    6f12:	0f 29 85 60 fc ff ff 	movaps %xmm0,-0x3a0(%rbp)
    6f19:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    6f20:	48 83 e8 28          	sub    $0x28,%rax
    6f24:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
    6f2b:	48 8d 05 36 2a 20 00 	lea    0x202a36(%rip),%rax        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    6f32:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
    6f39:	e8 82 b2 ff ff       	callq  21c0 <std::locale::locale()@plt>
    6f3e:	48 8d 05 23 2c 20 00 	lea    0x202c23(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    6f45:	48 8d 73 18          	lea    0x18(%rbx),%rsi
    6f49:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    6f50:	c7 85 78 fc ff ff 18 	movl   $0x18,-0x388(%rbp)
    6f57:	00 00 00 
    6f5a:	48 c7 85 88 fc ff ff 	movq   $0x0,-0x378(%rbp)
    6f61:	00 00 00 00 
    6f65:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
    6f6c:	48 8d 43 70          	lea    0x70(%rbx),%rax
    6f70:	c6 85 90 fc ff ff 00 	movb   $0x0,-0x370(%rbp)
    6f77:	48 89 85 80 fc ff ff 	mov    %rax,-0x380(%rbp)
    6f7e:	e8 4d b1 ff ff       	callq  20d0 <std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@plt>
    6f83:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    6f87:	48 8d 35 c9 0f 00 00 	lea    0xfc9(%rip),%rsi        # 7f57 <_IO_stdin_used+0xf7>
    6f8e:	ba 1b 00 00 00       	mov    $0x1b,%edx
    6f93:	e8 e8 b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6f98:	4c 8b b5 88 fa ff ff 	mov    -0x578(%rbp),%r14
    6f9f:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    6fa3:	41 8b 36             	mov    (%r14),%esi
    6fa6:	e8 d5 b1 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    6fab:	48 8d 35 87 0f 00 00 	lea    0xf87(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    6fb2:	ba 02 00 00 00       	mov    $0x2,%edx
    6fb7:	48 89 c7             	mov    %rax,%rdi
    6fba:	49 89 c5             	mov    %rax,%r13
    6fbd:	e8 be b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6fc2:	41 8b 76 04          	mov    0x4(%r14),%esi
    6fc6:	4c 89 ef             	mov    %r13,%rdi
    6fc9:	e8 b2 b1 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    6fce:	48 8d 35 9e 0f 00 00 	lea    0xf9e(%rip),%rsi        # 7f73 <_IO_stdin_used+0x113>
    6fd5:	ba 03 00 00 00       	mov    $0x3,%edx
    6fda:	48 89 c7             	mov    %rax,%rdi
    6fdd:	49 89 c5             	mov    %rax,%r13
    6fe0:	e8 9b b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    6fe5:	4c 8b b5 f0 fa ff ff 	mov    -0x510(%rbp),%r14
    6fec:	4c 89 ef             	mov    %r13,%rdi
    6fef:	41 8b 36             	mov    (%r14),%esi
    6ff2:	e8 89 b1 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    6ff7:	48 8d 35 3b 0f 00 00 	lea    0xf3b(%rip),%rsi        # 7f39 <_IO_stdin_used+0xd9>
    6ffe:	ba 02 00 00 00       	mov    $0x2,%edx
    7003:	48 89 c7             	mov    %rax,%rdi
    7006:	49 89 c5             	mov    %rax,%r13
    7009:	e8 72 b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    700e:	41 8b 76 04          	mov    0x4(%r14),%esi
    7012:	4c 89 ef             	mov    %r13,%rdi
    7015:	e8 66 b1 ff ff       	callq  2180 <std::ostream::operator<<(int)@plt>
    701a:	48 8d 35 56 0f 00 00 	lea    0xf56(%rip),%rsi        # 7f77 <_IO_stdin_used+0x117>
    7021:	ba 01 00 00 00       	mov    $0x1,%edx
    7026:	48 89 c7             	mov    %rax,%rdi
    7029:	49 89 c5             	mov    %rax,%r13
    702c:	e8 4f b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    7031:	48 8d 35 e9 0e 00 00 	lea    0xee9(%rip),%rsi        # 7f21 <_IO_stdin_used+0xc1>
    7038:	ba 01 00 00 00       	mov    $0x1,%edx
    703d:	4c 89 ef             	mov    %r13,%rdi
    7040:	e8 3b b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    7045:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    7049:	48 8d 35 29 0f 00 00 	lea    0xf29(%rip),%rsi        # 7f79 <_IO_stdin_used+0x119>
    7050:	ba 10 00 00 00       	mov    $0x10,%edx
    7055:	e8 26 b0 ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    705a:	48 8b b5 48 fb ff ff 	mov    -0x4b8(%rbp),%rsi
    7061:	48 2b b5 40 fb ff ff 	sub    -0x4c0(%rbp),%rsi
    7068:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    706c:	48 c1 fe 03          	sar    $0x3,%rsi
    7070:	e8 2b af ff ff       	callq  1fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    7075:	48 8d 35 0e 0f 00 00 	lea    0xf0e(%rip),%rsi        # 7f8a <_IO_stdin_used+0x12a>
    707c:	ba 13 00 00 00       	mov    $0x13,%edx
    7081:	48 89 c7             	mov    %rax,%rdi
    7084:	49 89 c5             	mov    %rax,%r13
    7087:	e8 f4 af ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    708c:	48 8b b5 78 fb ff ff 	mov    -0x488(%rbp),%rsi
    7093:	4c 89 ef             	mov    %r13,%rdi
    7096:	e8 05 af ff ff       	callq  1fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    709b:	48 8d 35 7f 0e 00 00 	lea    0xe7f(%rip),%rsi        # 7f21 <_IO_stdin_used+0xc1>
    70a2:	ba 01 00 00 00       	mov    $0x1,%edx
    70a7:	48 89 c7             	mov    %rax,%rdi
    70aa:	e8 d1 af ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    70af:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    70b3:	48 8d 35 e4 0e 00 00 	lea    0xee4(%rip),%rsi        # 7f9e <_IO_stdin_used+0x13e>
    70ba:	ba 0b 00 00 00       	mov    $0xb,%edx
    70bf:	e8 bc af ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    70c4:	48 8b b5 10 fb ff ff 	mov    -0x4f0(%rbp),%rsi
    70cb:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
    70cf:	4c 29 e6             	sub    %r12,%rsi
    70d2:	48 c1 fe 05          	sar    $0x5,%rsi
    70d6:	e8 c5 ae ff ff       	callq  1fa0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
    70db:	48 8d 35 3f 0e 00 00 	lea    0xe3f(%rip),%rsi        # 7f21 <_IO_stdin_used+0xc1>
    70e2:	ba 01 00 00 00       	mov    $0x1,%edx
    70e7:	48 89 c7             	mov    %rax,%rdi
    70ea:	e8 91 af ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    70ef:	48 8b 95 60 fc ff ff 	mov    -0x3a0(%rbp),%rdx
    70f6:	48 8d 85 c0 fb ff ff 	lea    -0x440(%rbp),%rax
    70fd:	48 c7 85 c8 fb ff ff 	movq   $0x0,-0x438(%rbp)
    7104:	00 00 00 00 
    7108:	c6 85 d0 fb ff ff 00 	movb   $0x0,-0x430(%rbp)
    710f:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
    7116:	48 83 c0 10          	add    $0x10,%rax
    711a:	48 85 d2             	test   %rdx,%rdx
    711d:	48 89 85 c0 fb ff ff 	mov    %rax,-0x440(%rbp)
    7124:	0f 84 76 07 00 00    	je     78a0 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2040>
    712a:	4c 8b ad 50 fc ff ff 	mov    -0x3b0(%rbp),%r13
    7131:	4c 8b b5 58 fc ff ff 	mov    -0x3a8(%rbp),%r14
    7138:	4c 39 ea             	cmp    %r13,%rdx
    713b:	0f 86 ef 01 00 00    	jbe    7330 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1ad0>
    7141:	4c 8d ad 00 fc ff ff 	lea    -0x400(%rbp),%r13
    7148:	4d 85 f6             	test   %r14,%r14
    714b:	49 8d 45 10          	lea    0x10(%r13),%rax
    714f:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
    7156:	0f 84 8c 08 00 00    	je     79e8 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2188>
    715c:	4c 29 f2             	sub    %r14,%rdx
    715f:	48 83 fa 0f          	cmp    $0xf,%rdx
    7163:	48 89 95 f8 fa ff ff 	mov    %rdx,-0x508(%rbp)
    716a:	0f 87 23 06 00 00    	ja     7793 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f33>
    7170:	48 83 bd f8 fa ff ff 	cmpq   $0x1,-0x508(%rbp)
    7177:	01 
    7178:	0f 84 a5 07 00 00    	je     7923 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20c3>
    717e:	48 83 bd f8 fa ff ff 	cmpq   $0x0,-0x508(%rbp)
    7185:	00 
    7186:	0f 85 2e 06 00 00    	jne    77ba <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f5a>
    718c:	48 89 95 08 fc ff ff 	mov    %rdx,-0x3f8(%rbp)
    7193:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
    7197:	49 8d 45 10          	lea    0x10(%r13),%rax
    719b:	48 8b b5 00 fc ff ff 	mov    -0x400(%rbp),%rsi
    71a2:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    71a9:	48 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%rdx
    71b0:	48 39 c6             	cmp    %rax,%rsi
    71b3:	0f 84 2d 07 00 00    	je     78e6 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2086>
    71b9:	48 8b 8d 00 fb ff ff 	mov    -0x500(%rbp),%rcx
    71c0:	48 8b 85 10 fc ff ff 	mov    -0x3f0(%rbp),%rax
    71c7:	48 83 c1 10          	add    $0x10,%rcx
    71cb:	48 39 cf             	cmp    %rcx,%rdi
    71ce:	0f 84 c3 07 00 00    	je     7997 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2137>
    71d4:	48 85 ff             	test   %rdi,%rdi
    71d7:	48 8b 8d d0 fb ff ff 	mov    -0x430(%rbp),%rcx
    71de:	48 89 b5 c0 fb ff ff 	mov    %rsi,-0x440(%rbp)
    71e5:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    71ec:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
    71f3:	0f 84 b3 07 00 00    	je     79ac <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x214c>
    71f9:	48 89 bd 00 fc ff ff 	mov    %rdi,-0x400(%rbp)
    7200:	48 89 8d 10 fc ff ff 	mov    %rcx,-0x3f0(%rbp)
    7207:	48 c7 85 08 fc ff ff 	movq   $0x0,-0x3f8(%rbp)
    720e:	00 00 00 00 
    7212:	c6 07 00             	movb   $0x0,(%rdi)
    7215:	49 83 c5 10          	add    $0x10,%r13
    7219:	48 8b bd 00 fc ff ff 	mov    -0x400(%rbp),%rdi
    7220:	4c 39 ef             	cmp    %r13,%rdi
    7223:	0f 85 01 02 00 00    	jne    742a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bca>
    7229:	e9 01 02 00 00       	jmpq   742f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bcf>
    722e:	4c 89 c1             	mov    %r8,%rcx
    7231:	e9 2f f0 ff ff       	jmpq   6265 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xa05>
    7236:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
    723c:	85 c0                	test   %eax,%eax
    723e:	0f 84 27 f6 ff ff    	je     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    7244:	8b b5 c4 fa ff ff    	mov    -0x53c(%rbp),%esi
    724a:	4d 8b 0e             	mov    (%r14),%r9
    724d:	4d 8b 46 08          	mov    0x8(%r14),%r8
    7251:	01 f0                	add    %esi,%eax
    7253:	4c 63 d0             	movslq %eax,%r10
    7256:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
    725c:	4d 29 c8             	sub    %r9,%r8
    725f:	49 c1 f8 03          	sar    $0x3,%r8
    7263:	45 89 d3             	mov    %r10d,%r11d
    7266:	41 f7 d3             	not    %r11d
    7269:	8d 78 01             	lea    0x1(%rax),%edi
    726c:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    7273:	aa aa aa 
    7276:	41 c1 eb 1f          	shr    $0x1f,%r11d
    727a:	4c 0f af c0          	imul   %rax,%r8
    727e:	48 63 d7             	movslq %edi,%rdx
    7281:	4c 39 c2             	cmp    %r8,%rdx
    7284:	73 37                	jae    72bd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1a5d>
    7286:	45 84 db             	test   %r11b,%r11b
    7289:	74 32                	je     72bd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1a5d>
    728b:	49 8b 41 08          	mov    0x8(%r9),%rax
    728f:	49 2b 01             	sub    (%r9),%rax
    7292:	49 63 ca             	movslq %r10d,%rcx
    7295:	48 c1 f8 02          	sar    $0x2,%rax
    7299:	48 39 c1             	cmp    %rax,%rcx
    729c:	73 1f                	jae    72bd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1a5d>
    729e:	48 8d 04 52          	lea    (%rdx,%rdx,2),%rax
    72a2:	49 8b 04 c1          	mov    (%r9,%rax,8),%rax
    72a6:	8b 04 88             	mov    (%rax,%rcx,4),%eax
    72a9:	85 c0                	test   %eax,%eax
    72ab:	75 10                	jne    72bd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1a5d>
    72ad:	4c 89 f2             	mov    %r14,%rdx
    72b0:	e8 ab cd ff ff       	callq  4060 <JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]>
    72b5:	84 c0                	test   %al,%al
    72b7:	0f 84 83 f1 ff ff    	je     6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    72bd:	8b 85 e0 fa ff ff    	mov    -0x520(%rbp),%eax
    72c3:	8d 78 ff             	lea    -0x1(%rax),%edi
    72c6:	83 ff ff             	cmp    $0xffffffff,%edi
    72c9:	0f 84 9c f5 ff ff    	je     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    72cf:	48 63 d7             	movslq %edi,%rdx
    72d2:	49 39 d0             	cmp    %rdx,%r8
    72d5:	0f 86 90 f5 ff ff    	jbe    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    72db:	45 84 db             	test   %r11b,%r11b
    72de:	0f 84 87 f5 ff ff    	je     686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    72e4:	49 8b 41 08          	mov    0x8(%r9),%rax
    72e8:	49 2b 01             	sub    (%r9),%rax
    72eb:	48 c1 f8 02          	sar    $0x2,%rax
    72ef:	49 39 c2             	cmp    %rax,%r10
    72f2:	0f 83 73 f5 ff ff    	jae    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    72f8:	48 8d 04 52          	lea    (%rdx,%rdx,2),%rax
    72fc:	49 8b 04 c1          	mov    (%r9,%rax,8),%rax
    7300:	46 8b 14 90          	mov    (%rax,%r10,4),%r10d
    7304:	45 85 d2             	test   %r10d,%r10d
    7307:	0f 85 5e f5 ff ff    	jne    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    730d:	8b b5 c4 fa ff ff    	mov    -0x53c(%rbp),%esi
    7313:	4c 89 f2             	mov    %r14,%rdx
    7316:	e8 45 cd ff ff       	callq  4060 <JPS::isValid(int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) [clone .isra.29] [clone .part.30]>
    731b:	84 c0                	test   %al,%al
    731d:	0f 85 48 f5 ff ff    	jne    686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    7323:	e9 18 f1 ff ff       	jmpq   6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    7328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    732f:	00 
    7330:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
    7337:	48 89 85 f8 fa ff ff 	mov    %rax,-0x508(%rbp)
    733e:	48 83 c0 10          	add    $0x10,%rax
    7342:	4d 85 ed             	test   %r13,%r13
    7345:	48 89 85 e0 fb ff ff 	mov    %rax,-0x420(%rbp)
    734c:	74 09                	je     7357 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1af7>
    734e:	4d 85 f6             	test   %r14,%r14
    7351:	0f 84 5e 0a 00 00    	je     7db5 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2555>
    7357:	4d 29 f5             	sub    %r14,%r13
    735a:	49 83 fd 0f          	cmp    $0xf,%r13
    735e:	0f 87 f5 03 00 00    	ja     7759 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1ef9>
    7364:	49 83 fd 01          	cmp    $0x1,%r13
    7368:	0f 84 0f 06 00 00    	je     797d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x211d>
    736e:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    7375:	48 83 c0 10          	add    $0x10,%rax
    7379:	4d 85 ed             	test   %r13,%r13
    737c:	0f 85 f7 03 00 00    	jne    7779 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1f19>
    7382:	4c 89 ad e8 fb ff ff 	mov    %r13,-0x418(%rbp)
    7389:	42 c6 04 28 00       	movb   $0x0,(%rax,%r13,1)
    738e:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    7395:	48 8b b5 e0 fb ff ff 	mov    -0x420(%rbp),%rsi
    739c:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    73a3:	48 8b 95 e8 fb ff ff 	mov    -0x418(%rbp),%rdx
    73aa:	48 83 c0 10          	add    $0x10,%rax
    73ae:	48 39 c6             	cmp    %rax,%rsi
    73b1:	0f 84 82 05 00 00    	je     7939 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20d9>
    73b7:	48 8b 8d 00 fb ff ff 	mov    -0x500(%rbp),%rcx
    73be:	48 8b 85 f0 fb ff ff 	mov    -0x410(%rbp),%rax
    73c5:	48 83 c1 10          	add    $0x10,%rcx
    73c9:	48 39 cf             	cmp    %rcx,%rdi
    73cc:	0f 84 ea 05 00 00    	je     79bc <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x215c>
    73d2:	48 85 ff             	test   %rdi,%rdi
    73d5:	48 8b 8d d0 fb ff ff 	mov    -0x430(%rbp),%rcx
    73dc:	48 89 b5 c0 fb ff ff 	mov    %rsi,-0x440(%rbp)
    73e3:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    73ea:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
    73f1:	0f 84 da 05 00 00    	je     79d1 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2171>
    73f7:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    73fe:	48 89 bd e0 fb ff ff 	mov    %rdi,-0x420(%rbp)
    7405:	48 89 8d f0 fb ff ff 	mov    %rcx,-0x410(%rbp)
    740c:	48 c7 85 e8 fb ff ff 	movq   $0x0,-0x418(%rbp)
    7413:	00 00 00 00 
    7417:	c6 07 00             	movb   $0x0,(%rdi)
    741a:	48 83 c0 10          	add    $0x10,%rax
    741e:	48 8b bd e0 fb ff ff 	mov    -0x420(%rbp),%rdi
    7425:	48 39 c7             	cmp    %rax,%rdi
    7428:	74 05                	je     742f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bcf>
    742a:	e8 01 ac ff ff       	callq  2030 <operator delete(void*)@plt>
    742f:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    7436:	48 8b 95 c8 fb ff ff 	mov    -0x438(%rbp),%rdx
    743d:	48 8b b5 c0 fb ff ff 	mov    -0x440(%rbp),%rsi
    7444:	48 8d 78 10          	lea    0x10(%rax),%rdi
    7448:	e8 33 ac ff ff       	callq  2080 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    744d:	49 89 c6             	mov    %rax,%r14
    7450:	48 8b 00             	mov    (%rax),%rax
    7453:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7457:	4d 8b ac 06 f0 00 00 	mov    0xf0(%r14,%rax,1),%r13
    745e:	00 
    745f:	4d 85 ed             	test   %r13,%r13
    7462:	0f 84 3a 09 00 00    	je     7da2 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2542>
    7468:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
    746d:	0f 84 b5 03 00 00    	je     7828 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1fc8>
    7473:	41 0f be 75 43       	movsbl 0x43(%r13),%esi
    7478:	4c 89 f7             	mov    %r14,%rdi
    747b:	e8 30 aa ff ff       	callq  1eb0 <std::ostream::put(char)@plt>
    7480:	48 89 c7             	mov    %rax,%rdi
    7483:	e8 28 ab ff ff       	callq  1fb0 <std::ostream::flush()@plt>
    7488:	48 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%rax
    748f:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    7496:	48 83 c0 10          	add    $0x10,%rax
    749a:	48 39 c7             	cmp    %rax,%rdi
    749d:	74 05                	je     74a4 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1c44>
    749f:	e8 8c ab ff ff       	callq  2030 <operator delete(void*)@plt>
    74a4:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    74ab:	31 f6                	xor    %esi,%esi
    74ad:	e8 be ac ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    74b2:	4c 8d ad 00 fc ff ff 	lea    -0x400(%rbp),%r13
    74b9:	48 8b 95 88 fc ff ff 	mov    -0x378(%rbp),%rdx
    74c0:	48 8d 7b 60          	lea    0x60(%rbx),%rdi
    74c4:	45 31 c0             	xor    %r8d,%r8d
    74c7:	31 f6                	xor    %esi,%esi
    74c9:	48 c7 85 08 fc ff ff 	movq   $0x0,-0x3f8(%rbp)
    74d0:	00 00 00 00 
    74d4:	49 8d 4d 10          	lea    0x10(%r13),%rcx
    74d8:	c6 85 10 fc ff ff 00 	movb   $0x0,-0x3f0(%rbp)
    74df:	48 89 8d 00 fc ff ff 	mov    %rcx,-0x400(%rbp)
    74e6:	e8 65 d9 ff ff       	callq  4e50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
    74eb:	31 c9                	xor    %ecx,%ecx
    74ed:	f6 85 78 fc ff ff 03 	testb  $0x3,-0x388(%rbp)
    74f4:	74 07                	je     74fd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1c9d>
    74f6:	48 8b 8d 88 fc ff ff 	mov    -0x378(%rbp),%rcx
    74fd:	48 8b b5 80 fc ff ff 	mov    -0x380(%rbp),%rsi
    7504:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    7508:	31 d2                	xor    %edx,%edx
    750a:	e8 a1 ab ff ff       	callq  20b0 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@plt>
    750f:	48 8b bd 00 fc ff ff 	mov    -0x400(%rbp),%rdi
    7516:	49 83 c5 10          	add    $0x10,%r13
    751a:	4c 39 ef             	cmp    %r13,%rdi
    751d:	74 05                	je     7524 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1cc4>
    751f:	e8 0c ab ff ff       	callq  2030 <operator delete(void*)@plt>
    7524:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    752b:	48 8d 78 18          	lea    0x18(%rax),%rdi
    752f:	e8 ac a9 ff ff       	callq  1ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>
    7534:	48 85 c0             	test   %rax,%rax
    7537:	0f 84 35 03 00 00    	je     7872 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2012>
    753d:	48 8b 85 98 fa ff ff 	mov    -0x568(%rbp),%rax
    7544:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
    754b:	f2 0f 10 bd e0 fa ff 	movsd  -0x520(%rbp),%xmm7
    7552:	ff 
    7553:	48 8b bd 80 fc ff ff 	mov    -0x380(%rbp),%rdi
    755a:	48 89 50 08          	mov    %rdx,0x8(%rax)
    755e:	48 8b 95 d8 fa ff ff 	mov    -0x528(%rbp),%rdx
    7565:	f2 0f 11 78 18       	movsd  %xmm7,0x18(%rax)
    756a:	4c 89 20             	mov    %r12,(%rax)
    756d:	48 89 50 10          	mov    %rdx,0x10(%rax)
    7571:	48 8d 05 00 25 20 00 	lea    0x202500(%rip),%rax        # 209a78 <vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    7578:	48 89 85 20 fc ff ff 	mov    %rax,-0x3e0(%rbp)
    757f:	48 83 c0 50          	add    $0x50,%rax
    7583:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    758a:	48 83 e8 28          	sub    $0x28,%rax
    758e:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
    7595:	48 8d 05 cc 25 20 00 	lea    0x2025cc(%rip),%rax        # 209b68 <vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x10>
    759c:	48 89 85 38 fc ff ff 	mov    %rax,-0x3c8(%rbp)
    75a3:	48 8d 43 70          	lea    0x70(%rbx),%rax
    75a7:	48 39 c7             	cmp    %rax,%rdi
    75aa:	74 05                	je     75b1 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1d51>
    75ac:	e8 7f aa ff ff       	callq  2030 <operator delete(void*)@plt>
    75b1:	48 8d 05 30 25 20 00 	lea    0x202530(%rip),%rax        # 209ae8 <vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    75b8:	f3 0f 7e 05 18 26 20 	movq   0x202618(%rip),%xmm0        # 209bd8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x2f8>
    75bf:	00 
    75c0:	48 8d 7b 50          	lea    0x50(%rbx),%rdi
    75c4:	4c 8d 35 9d 23 20 00 	lea    0x20239d(%rip),%r14        # 209968 <vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    75cb:	48 89 85 00 fb ff ff 	mov    %rax,-0x500(%rbp)
    75d2:	0f 16 85 00 fb ff ff 	movhps -0x500(%rbp),%xmm0
    75d9:	4c 89 b5 38 fc ff ff 	mov    %r14,-0x3c8(%rbp)
    75e0:	0f 29 85 00 fb ff ff 	movaps %xmm0,-0x500(%rbp)
    75e7:	e8 f4 aa ff ff       	callq  20e0 <std::locale::~locale()@plt>
    75ec:	48 8b 05 a5 22 20 00 	mov    0x2022a5(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    75f3:	48 8b 15 c6 22 20 00 	mov    0x2022c6(%rip),%rdx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    75fa:	48 8b 3d b7 22 20 00 	mov    0x2022b7(%rip),%rdi        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    7601:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7605:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    760c:	ff 
    760d:	48 8b 05 9c 22 20 00 	mov    0x20229c(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    7614:	48 8b 15 8d 22 20 00 	mov    0x20228d(%rip),%rdx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    761b:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
    7622:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7626:	48 89 bc 05 30 fc ff 	mov    %rdi,-0x3d0(%rbp,%rax,1)
    762d:	ff 
    762e:	49 8b 47 e8          	mov    -0x18(%r15),%rax
    7632:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    7639:	4c 89 bd 20 fc ff ff 	mov    %r15,-0x3e0(%rbp)
    7640:	4c 8d 3d e9 21 20 00 	lea    0x2021e9(%rip),%r15        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7647:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    764e:	ff 
    764f:	48 c7 85 28 fc ff ff 	movq   $0x0,-0x3d8(%rbp)
    7656:	00 00 00 00 
    765a:	4c 89 bd a0 fc ff ff 	mov    %r15,-0x360(%rbp)
    7661:	e8 aa a8 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    7666:	48 8b 9d 18 fb ff ff 	mov    -0x4e8(%rbp),%rbx
    766d:	48 8d 05 84 22 20 00 	lea    0x202284(%rip),%rax        # 2098f8 <vtable for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    7674:	66 0f 6f 85 00 fb ff 	movdqa -0x500(%rbp),%xmm0
    767b:	ff 
    767c:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    7683:	48 83 c0 50          	add    $0x50,%rax
    7687:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    768b:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    7692:	0f 29 85 c0 fd ff ff 	movaps %xmm0,-0x240(%rbp)
    7699:	e8 42 a8 ff ff       	callq  1ee0 <std::basic_filebuf<char, std::char_traits<char> >::close()@plt>
    769e:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    76a5:	e8 06 ab ff ff       	callq  21b0 <std::__basic_file<char>::~__basic_file()@plt>
    76aa:	48 8d 7b 50          	lea    0x50(%rbx),%rdi
    76ae:	4c 89 b5 c8 fd ff ff 	mov    %r14,-0x238(%rbp)
    76b5:	e8 26 aa ff ff       	callq  20e0 <std::locale::~locale()@plt>
    76ba:	48 8b 05 27 23 20 00 	mov    0x202327(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    76c1:	48 8b 3d 48 23 20 00 	mov    0x202348(%rip),%rdi        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    76c8:	48 8b 15 39 23 20 00 	mov    0x202339(%rip),%rdx        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    76cf:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    76d3:	48 89 bc 05 b0 fd ff 	mov    %rdi,-0x250(%rbp,%rax,1)
    76da:	ff 
    76db:	48 8b 05 1e 23 20 00 	mov    0x20231e(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    76e2:	48 8b 3d 0f 23 20 00 	mov    0x20230f(%rip),%rdi        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    76e9:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    76f0:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    76f4:	48 89 94 05 c0 fd ff 	mov    %rdx,-0x240(%rbp,%rax,1)
    76fb:	ff 
    76fc:	48 8b 05 ed 22 20 00 	mov    0x2022ed(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7703:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    770a:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    770e:	48 89 bc 05 b0 fd ff 	mov    %rdi,-0x250(%rbp,%rax,1)
    7715:	ff 
    7716:	48 8d bb 08 01 00 00 	lea    0x108(%rbx),%rdi
    771d:	48 c7 85 b8 fd ff ff 	movq   $0x0,-0x248(%rbp)
    7724:	00 00 00 00 
    7728:	4c 89 bd b8 fe ff ff 	mov    %r15,-0x148(%rbp)
    772f:	e8 dc a7 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    7734:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
    773b:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
    7742:	48 83 c0 10          	add    $0x10,%rax
    7746:	48 39 c7             	cmp    %rax,%rdi
    7749:	0f 84 5e e8 ff ff    	je     5fad <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x74d>
    774f:	e8 dc a8 ff ff       	callq  2030 <operator delete(void*)@plt>
    7754:	e9 54 e8 ff ff       	jmpq   5fad <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x74d>
    7759:	4d 85 ed             	test   %r13,%r13
    775c:	0f 88 47 06 00 00    	js     7da9 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2549>
    7762:	49 8d 7d 01          	lea    0x1(%r13),%rdi
    7766:	e8 d5 a8 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    776b:	48 89 85 e0 fb ff ff 	mov    %rax,-0x420(%rbp)
    7772:	4c 89 ad f0 fb ff ff 	mov    %r13,-0x410(%rbp)
    7779:	4c 89 ea             	mov    %r13,%rdx
    777c:	4c 89 f6             	mov    %r14,%rsi
    777f:	48 89 c7             	mov    %rax,%rdi
    7782:	e8 79 a8 ff ff       	callq  2000 <memcpy@plt>
    7787:	48 8b 85 e0 fb ff ff 	mov    -0x420(%rbp),%rax
    778e:	e9 ef fb ff ff       	jmpq   7382 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1b22>
    7793:	48 85 d2             	test   %rdx,%rdx
    7796:	0f 88 b9 05 00 00    	js     7d55 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24f5>
    779c:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
    77a0:	e8 9b a8 ff ff       	callq  2040 <operator new(unsigned long)@plt>
    77a5:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
    77ac:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
    77b3:	48 89 95 10 fc ff ff 	mov    %rdx,-0x3f0(%rbp)
    77ba:	4c 89 f6             	mov    %r14,%rsi
    77bd:	48 89 c7             	mov    %rax,%rdi
    77c0:	e8 3b a8 ff ff       	callq  2000 <memcpy@plt>
    77c5:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
    77cc:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
    77d3:	e9 b4 f9 ff ff       	jmpq   718c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x192c>
    77d8:	48 3b 85 c8 fa ff ff 	cmp    -0x538(%rbp),%rax
    77df:	0f 86 5b ec ff ff    	jbe    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    77e5:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
    77ec:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
    77f0:	44 8b 14 b8          	mov    (%rax,%rdi,4),%r10d
    77f4:	45 85 d2             	test   %r10d,%r10d
    77f7:	0f 85 43 ec ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    77fd:	e9 69 f0 ff ff       	jmpq   686b <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x100b>
    7802:	48 8b 95 70 fa ff ff 	mov    -0x590(%rbp),%rdx
    7809:	48 39 f2             	cmp    %rsi,%rdx
    780c:	0f 83 2e ec ff ff    	jae    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    7812:	8b 14 97             	mov    (%rdi,%rdx,4),%edx
    7815:	85 d2                	test   %edx,%edx
    7817:	0f 85 23 ec ff ff    	jne    6440 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xbe0>
    781d:	e9 07 f0 ff ff       	jmpq   6829 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0xfc9>
    7822:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    7828:	4c 89 ef             	mov    %r13,%rdi
    782b:	e8 60 a8 ff ff       	callq  2090 <std::ctype<char>::_M_widen_init() const@plt>
    7830:	49 8b 45 00          	mov    0x0(%r13),%rax
    7834:	48 8d 15 f5 c7 ff ff 	lea    -0x380b(%rip),%rdx        # 4030 <std::ctype<char>::do_widen(char) const>
    783b:	be 0a 00 00 00       	mov    $0xa,%esi
    7840:	48 8b 40 30          	mov    0x30(%rax),%rax
    7844:	48 39 d0             	cmp    %rdx,%rax
    7847:	0f 84 2b fc ff ff    	je     7478 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1c18>
    784d:	4c 89 ef             	mov    %r13,%rdi
    7850:	ff d0                	callq  *%rax
    7852:	0f be f0             	movsbl %al,%esi
    7855:	e9 1e fc ff ff       	jmpq   7478 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1c18>
    785a:	4c 89 c9             	mov    %r9,%rcx
    785d:	e9 9c e1 ff ff       	jmpq   59fe <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19e>
    7862:	8b 73 20             	mov    0x20(%rbx),%esi
    7865:	83 ce 04             	or     $0x4,%esi
    7868:	e8 03 a9 ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    786d:	e9 96 f5 ff ff       	jmpq   6e08 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x15a8>
    7872:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
    7879:	48 8b bd 18 fb ff ff 	mov    -0x4e8(%rbp),%rdi
    7880:	48 03 78 e8          	add    -0x18(%rax),%rdi
    7884:	8b 77 20             	mov    0x20(%rdi),%esi
    7887:	83 ce 04             	or     $0x4,%esi
    788a:	e8 e1 a8 ff ff       	callq  2170 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    788f:	e9 a9 fc ff ff       	jmpq   753d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1cdd>
    7894:	4c 89 a5 10 fb ff ff 	mov    %r12,-0x4f0(%rbp)
    789b:	e9 a2 f3 ff ff       	jmpq   6c42 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x13e2>
    78a0:	48 8b bd 00 fb ff ff 	mov    -0x500(%rbp),%rdi
    78a7:	48 8d 73 60          	lea    0x60(%rbx),%rsi
    78ab:	e8 70 dc ff ff       	callq  5520 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
    78b0:	e9 7a fb ff ff       	jmpq   742f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bcf>
    78b5:	f2 0f 11 8d 10 fb ff 	movsd  %xmm1,-0x4f0(%rbp)
    78bc:	ff 
    78bd:	f3 0f 11 95 00 fb ff 	movss  %xmm2,-0x500(%rbp)
    78c4:	ff 
    78c5:	e8 26 a7 ff ff       	callq  1ff0 <sqrt@plt>
    78ca:	48 8b 9d 20 fb ff ff 	mov    -0x4e0(%rbp),%rbx
    78d1:	f2 0f 10 8d 10 fb ff 	movsd  -0x4f0(%rbp),%xmm1
    78d8:	ff 
    78d9:	f3 0f 10 95 00 fb ff 	movss  -0x500(%rbp),%xmm2
    78e0:	ff 
    78e1:	e9 bf e7 ff ff       	jmpq   60a5 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x845>
    78e6:	48 85 d2             	test   %rdx,%rdx
    78e9:	74 21                	je     790c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20ac>
    78eb:	48 83 fa 01          	cmp    $0x1,%rdx
    78ef:	0f 85 a0 01 00 00    	jne    7a95 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2235>
    78f5:	0f b6 85 10 fc ff ff 	movzbl -0x3f0(%rbp),%eax
    78fc:	88 07                	mov    %al,(%rdi)
    78fe:	48 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%rdx
    7905:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    790c:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    7913:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
    7917:	48 8b bd 00 fc ff ff 	mov    -0x400(%rbp),%rdi
    791e:	e9 e4 f8 ff ff       	jmpq   7207 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19a7>
    7923:	41 0f b6 16          	movzbl (%r14),%edx
    7927:	88 95 10 fc ff ff    	mov    %dl,-0x3f0(%rbp)
    792d:	48 8b 95 f8 fa ff ff 	mov    -0x508(%rbp),%rdx
    7934:	e9 53 f8 ff ff       	jmpq   718c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x192c>
    7939:	48 85 d2             	test   %rdx,%rdx
    793c:	74 21                	je     795f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20ff>
    793e:	48 83 fa 01          	cmp    $0x1,%rdx
    7942:	0f 85 35 01 00 00    	jne    7a7d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x221d>
    7948:	0f b6 85 f0 fb ff ff 	movzbl -0x410(%rbp),%eax
    794f:	88 07                	mov    %al,(%rdi)
    7951:	48 8b 95 e8 fb ff ff 	mov    -0x418(%rbp),%rdx
    7958:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    795f:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    7966:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    796d:	c6 04 17 00          	movb   $0x0,(%rdi,%rdx,1)
    7971:	48 8b bd e0 fb ff ff 	mov    -0x420(%rbp),%rdi
    7978:	e9 8f fa ff ff       	jmpq   740c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bac>
    797d:	41 0f b6 06          	movzbl (%r14),%eax
    7981:	88 85 f0 fb ff ff    	mov    %al,-0x410(%rbp)
    7987:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    798e:	48 83 c0 10          	add    $0x10,%rax
    7992:	e9 eb f9 ff ff       	jmpq   7382 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1b22>
    7997:	48 89 b5 c0 fb ff ff 	mov    %rsi,-0x440(%rbp)
    799e:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    79a5:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
    79ac:	49 8d 7d 10          	lea    0x10(%r13),%rdi
    79b0:	48 89 bd 00 fc ff ff 	mov    %rdi,-0x400(%rbp)
    79b7:	e9 4b f8 ff ff       	jmpq   7207 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x19a7>
    79bc:	48 89 b5 c0 fb ff ff 	mov    %rsi,-0x440(%rbp)
    79c3:	48 89 95 c8 fb ff ff 	mov    %rdx,-0x438(%rbp)
    79ca:	48 89 85 d0 fb ff ff 	mov    %rax,-0x430(%rbp)
    79d1:	48 8b 85 f8 fa ff ff 	mov    -0x508(%rbp),%rax
    79d8:	48 8d 78 10          	lea    0x10(%rax),%rdi
    79dc:	48 89 bd e0 fb ff ff 	mov    %rdi,-0x420(%rbp)
    79e3:	e9 24 fa ff ff       	jmpq   740c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x1bac>
    79e8:	48 8d 3d a9 04 00 00 	lea    0x4a9(%rip),%rdi        # 7e98 <_IO_stdin_used+0x38>
    79ef:	e8 cc a5 ff ff       	callq  1fc0 <std::__throw_logic_error(char const*)@plt>
    79f4:	0f 1f 40 00          	nopl   0x0(%rax)
    79f8:	f2 0f 11 8d 00 fb ff 	movsd  %xmm1,-0x500(%rbp)
    79ff:	ff 
    7a00:	e8 eb a5 ff ff       	callq  1ff0 <sqrt@plt>
    7a05:	48 8b 85 20 fb ff ff 	mov    -0x4e0(%rbp),%rax
    7a0c:	f2 0f 10 8d 00 fb ff 	movsd  -0x500(%rbp),%xmm1
    7a13:	ff 
    7a14:	e9 ef e6 ff ff       	jmpq   6108 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x8a8>
    7a19:	f2 0f 11 8d 18 fb ff 	movsd  %xmm1,-0x4e8(%rbp)
    7a20:	ff 
    7a21:	e8 ca a5 ff ff       	callq  1ff0 <sqrt@plt>
    7a26:	66 0f ef c0          	pxor   %xmm0,%xmm0
    7a2a:	4c 8b 85 88 fa ff ff 	mov    -0x578(%rbp),%r8
    7a31:	f2 0f 10 8d 18 fb ff 	movsd  -0x4e8(%rbp),%xmm1
    7a38:	ff 
    7a39:	48 8b b5 48 fb ff ff 	mov    -0x4b8(%rbp),%rsi
    7a40:	48 39 b5 50 fb ff ff 	cmp    %rsi,-0x4b0(%rbp)
    7a47:	f2 0f 5a c1          	cvtsd2ss %xmm1,%xmm0
    7a4b:	4c 89 85 20 fb ff ff 	mov    %r8,-0x4e0(%rbp)
    7a52:	f3 41 0f 11 40 0c    	movss  %xmm0,0xc(%r8)
    7a58:	f3 41 0f 58 40 08    	addss  0x8(%r8),%xmm0
    7a5e:	f3 41 0f 11 40 10    	movss  %xmm0,0x10(%r8)
    7a64:	0f 84 f7 de ff ff    	je     5961 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x101>
    7a6a:	4c 89 06             	mov    %r8,(%rsi)
    7a6d:	48 83 c6 08          	add    $0x8,%rsi
    7a71:	48 89 b5 48 fb ff ff 	mov    %rsi,-0x4b8(%rbp)
    7a78:	e9 02 df ff ff       	jmpq   597f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x11f>
    7a7d:	e8 7e a5 ff ff       	callq  2000 <memcpy@plt>
    7a82:	48 8b 95 e8 fb ff ff 	mov    -0x418(%rbp),%rdx
    7a89:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    7a90:	e9 ca fe ff ff       	jmpq   795f <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20ff>
    7a95:	e8 66 a5 ff ff       	callq  2000 <memcpy@plt>
    7a9a:	48 8b 95 08 fc ff ff 	mov    -0x3f8(%rbp),%rdx
    7aa1:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    7aa8:	e9 5f fe ff ff       	jmpq   790c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x20ac>
    7aad:	48 8b 1d 3c 1f 20 00 	mov    0x201f3c(%rip),%rbx        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7ab4:	48 8b 53 e8          	mov    -0x18(%rbx),%rdx
    7ab8:	48 89 9d b0 fd ff ff 	mov    %rbx,-0x250(%rbp)
    7abf:	48 8b 1d 32 1f 20 00 	mov    0x201f32(%rip),%rbx        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    7ac6:	48 89 9c 15 b0 fd ff 	mov    %rbx,-0x250(%rbp,%rdx,1)
    7acd:	ff 
    7ace:	48 c7 85 b8 fd ff ff 	movq   $0x0,-0x248(%rbp)
    7ad5:	00 00 00 00 
    7ad9:	48 89 c3             	mov    %rax,%rbx
    7adc:	48 8b bd 18 fb ff ff 	mov    -0x4e8(%rbp),%rdi
    7ae3:	48 8d 05 46 1d 20 00 	lea    0x201d46(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7aea:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    7af1:	48 81 c7 08 01 00 00 	add    $0x108,%rdi
    7af8:	e8 13 a4 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    7afd:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
    7b04:	48 8b bd a0 fb ff ff 	mov    -0x460(%rbp),%rdi
    7b0b:	48 83 c0 10          	add    $0x10,%rax
    7b0f:	48 39 c7             	cmp    %rax,%rdi
    7b12:	74 05                	je     7b19 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22b9>
    7b14:	e8 17 a5 ff ff       	callq  2030 <operator delete(void*)@plt>
    7b19:	4d 85 e4             	test   %r12,%r12
    7b1c:	74 08                	je     7b26 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22c6>
    7b1e:	4c 89 e7             	mov    %r12,%rdi
    7b21:	e8 0a a5 ff ff       	callq  2030 <operator delete(void*)@plt>
    7b26:	48 8b bd 70 fb ff ff 	mov    -0x490(%rbp),%rdi
    7b2d:	48 85 ff             	test   %rdi,%rdi
    7b30:	0f 84 97 00 00 00    	je     7bcd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x236d>
    7b36:	48 8b 07             	mov    (%rdi),%rax
    7b39:	49 89 c6             	mov    %rax,%r14
    7b3c:	e8 ef a4 ff ff       	callq  2030 <operator delete(void*)@plt>
    7b41:	4c 89 f7             	mov    %r14,%rdi
    7b44:	eb e7                	jmp    7b2d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22cd>
    7b46:	48 89 c3             	mov    %rax,%rbx
    7b49:	48 8b 05 98 1e 20 00 	mov    0x201e98(%rip),%rax        # 2099e8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x8>
    7b50:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    7b54:	48 8b 05 b5 1e 20 00 	mov    0x201eb5(%rip),%rax        # 209a10 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x30>
    7b5b:	48 89 84 15 b0 fd ff 	mov    %rax,-0x250(%rbp,%rdx,1)
    7b62:	ff 
    7b63:	48 8b 05 96 1e 20 00 	mov    0x201e96(%rip),%rax        # 209a00 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x20>
    7b6a:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    7b6e:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
    7b75:	48 8b 05 8c 1e 20 00 	mov    0x201e8c(%rip),%rax        # 209a08 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x28>
    7b7c:	48 89 84 15 c0 fd ff 	mov    %rax,-0x240(%rbp,%rdx,1)
    7b83:	ff 
    7b84:	48 8b 05 65 1e 20 00 	mov    0x201e65(%rip),%rax        # 2099f0 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7b8b:	48 8b 50 e8          	mov    -0x18(%rax),%rdx
    7b8f:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)
    7b96:	48 8b 05 5b 1e 20 00 	mov    0x201e5b(%rip),%rax        # 2099f8 <VTT for std::basic_fstream<char, std::char_traits<char> >@@GLIBCXX_3.4+0x18>
    7b9d:	48 89 84 15 b0 fd ff 	mov    %rax,-0x250(%rbp,%rdx,1)
    7ba4:	ff 
    7ba5:	48 c7 85 b8 fd ff ff 	movq   $0x0,-0x248(%rbp)
    7bac:	00 00 00 00 
    7bb0:	e9 27 ff ff ff       	jmpq   7adc <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x227c>
    7bb5:	48 89 c3             	mov    %rax,%rbx
    7bb8:	48 8b 85 18 fb ff ff 	mov    -0x4e8(%rbp),%rax
    7bbf:	48 8d 78 18          	lea    0x18(%rax),%rdi
    7bc3:	e8 48 a5 ff ff       	callq  2110 <std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@plt>
    7bc8:	e9 7c ff ff ff       	jmpq   7b49 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22e9>
    7bcd:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
    7bd4:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
    7bdb:	31 f6                	xor    %esi,%esi
    7bdd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    7be4:	00 
    7be5:	e8 96 a3 ff ff       	callq  1f80 <memset@plt>
    7bea:	48 8b 85 a0 fa ff ff 	mov    -0x560(%rbp),%rax
    7bf1:	48 8b bd 60 fb ff ff 	mov    -0x4a0(%rbp),%rdi
    7bf8:	48 c7 85 78 fb ff ff 	movq   $0x0,-0x488(%rbp)
    7bff:	00 00 00 00 
    7c03:	48 c7 85 70 fb ff ff 	movq   $0x0,-0x490(%rbp)
    7c0a:	00 00 00 00 
    7c0e:	48 83 c0 30          	add    $0x30,%rax
    7c12:	48 39 c7             	cmp    %rax,%rdi
    7c15:	74 05                	je     7c1c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x23bc>
    7c17:	e8 14 a4 ff ff       	callq  2030 <operator delete(void*)@plt>
    7c1c:	48 8b bd 40 fb ff ff 	mov    -0x4c0(%rbp),%rdi
    7c23:	48 85 ff             	test   %rdi,%rdi
    7c26:	74 05                	je     7c2d <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x23cd>
    7c28:	e8 03 a4 ff ff       	callq  2030 <operator delete(void*)@plt>
    7c2d:	48 89 df             	mov    %rbx,%rdi
    7c30:	e8 5b a5 ff ff       	callq  2190 <_Unwind_Resume@plt>
    7c35:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
    7c3c:	48 89 c3             	mov    %rax,%rbx
    7c3f:	48 85 ff             	test   %rdi,%rdi
    7c42:	0f 85 d9 fe ff ff    	jne    7b21 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22c1>
    7c48:	e9 d9 fe ff ff       	jmpq   7b26 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22c6>
    7c4d:	49 89 c5             	mov    %rax,%r13
    7c50:	48 8d 05 d9 1b 20 00 	lea    0x201bd9(%rip),%rax        # 209830 <vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4+0x10>
    7c57:	48 8d bb 80 00 00 00 	lea    0x80(%rbx),%rdi
    7c5e:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    7c65:	e8 a6 a2 ff ff       	callq  1f10 <std::ios_base::~ios_base()@plt>
    7c6a:	48 8b bd 18 fb ff ff 	mov    -0x4e8(%rbp),%rdi
    7c71:	4c 89 eb             	mov    %r13,%rbx
    7c74:	e8 57 a2 ff ff       	callq  1ed0 <std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()@plt>
    7c79:	e9 7f fe ff ff       	jmpq   7afd <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x229d>
    7c7e:	49 8b 57 e8          	mov    -0x18(%r15),%rdx
    7c82:	48 8b 35 1f 1c 20 00 	mov    0x201c1f(%rip),%rsi        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    7c89:	49 89 c5             	mov    %rax,%r13
    7c8c:	4c 89 bd 20 fc ff ff 	mov    %r15,-0x3e0(%rbp)
    7c93:	48 89 b4 15 20 fc ff 	mov    %rsi,-0x3e0(%rbp,%rdx,1)
    7c9a:	ff 
    7c9b:	48 c7 85 28 fc ff ff 	movq   $0x0,-0x3d8(%rbp)
    7ca2:	00 00 00 00 
    7ca6:	eb a8                	jmp    7c50 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x23f0>
    7ca8:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
    7cac:	49 89 c5             	mov    %rax,%r13
    7caf:	e8 bc c8 ff ff       	callq  4570 <std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()>
    7cb4:	48 8b 05 dd 1b 20 00 	mov    0x201bdd(%rip),%rax        # 209898 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x8>
    7cbb:	48 8b 15 fe 1b 20 00 	mov    0x201bfe(%rip),%rdx        # 2098c0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x30>
    7cc2:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7cc6:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    7ccd:	ff 
    7cce:	48 8b 05 db 1b 20 00 	mov    0x201bdb(%rip),%rax        # 2098b0 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x20>
    7cd5:	48 8b 15 dc 1b 20 00 	mov    0x201bdc(%rip),%rdx        # 2098b8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x28>
    7cdc:	48 89 85 30 fc ff ff 	mov    %rax,-0x3d0(%rbp)
    7ce3:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    7ce7:	48 89 94 05 30 fc ff 	mov    %rdx,-0x3d0(%rbp,%rax,1)
    7cee:	ff 
    7cef:	49 8b 47 e8          	mov    -0x18(%r15),%rax
    7cf3:	48 8b 15 ae 1b 20 00 	mov    0x201bae(%rip),%rdx        # 2098a8 <VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21+0x18>
    7cfa:	4c 89 bd 20 fc ff ff 	mov    %r15,-0x3e0(%rbp)
    7d01:	48 89 94 05 20 fc ff 	mov    %rdx,-0x3e0(%rbp,%rax,1)
    7d08:	ff 
    7d09:	48 c7 85 28 fc ff ff 	movq   $0x0,-0x3d8(%rbp)
    7d10:	00 00 00 00 
    7d14:	e9 37 ff ff ff       	jmpq   7c50 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x23f0>
    7d19:	49 89 c5             	mov    %rax,%r13
    7d1c:	48 89 df             	mov    %rbx,%rdi
    7d1f:	e8 ac a2 ff ff       	callq  1fd0 <std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()@plt>
    7d24:	e9 41 ff ff ff       	jmpq   7c6a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x240a>
    7d29:	e8 72 a3 ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    7d2e:	e8 3d a3 ff ff       	callq  2070 <__stack_chk_fail@plt>
    7d33:	48 89 c3             	mov    %rax,%rbx
    7d36:	e9 eb fd ff ff       	jmpq   7b26 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22c6>
    7d3b:	e8 60 a3 ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    7d40:	48 89 c3             	mov    %rax,%rbx
    7d43:	e9 d1 fd ff ff       	jmpq   7b19 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x22b9>
    7d48:	48 89 c3             	mov    %rax,%rbx
    7d4b:	e9 8c fd ff ff       	jmpq   7adc <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x227c>
    7d50:	e8 cb a1 ff ff       	callq  1f20 <std::__throw_bad_alloc()@plt>
    7d55:	48 8d 3d 6c 01 00 00 	lea    0x16c(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    7d5c:	e8 0f a2 ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    7d61:	49 89 c5             	mov    %rax,%r13
    7d64:	48 8b 85 00 fb ff ff 	mov    -0x500(%rbp),%rax
    7d6b:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
    7d72:	48 83 c0 10          	add    $0x10,%rax
    7d76:	48 39 c7             	cmp    %rax,%rdi
    7d79:	74 a1                	je     7d1c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24bc>
    7d7b:	e8 b0 a2 ff ff       	callq  2030 <operator delete(void*)@plt>
    7d80:	eb 9a                	jmp    7d1c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24bc>
    7d82:	48 8b bd 00 fc ff ff 	mov    -0x400(%rbp),%rdi
    7d89:	49 83 c5 10          	add    $0x10,%r13
    7d8d:	49 89 c6             	mov    %rax,%r14
    7d90:	4c 39 ef             	cmp    %r13,%rdi
    7d93:	74 05                	je     7d9a <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x253a>
    7d95:	e8 96 a2 ff ff       	callq  2030 <operator delete(void*)@plt>
    7d9a:	4d 89 f5             	mov    %r14,%r13
    7d9d:	e9 7a ff ff ff       	jmpq   7d1c <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x24bc>
    7da2:	e8 f9 a2 ff ff       	callq  20a0 <std::__throw_bad_cast()@plt>
    7da7:	eb b8                	jmp    7d61 <JPS::findPath(Node&, Node&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&)+0x2501>
    7da9:	48 8d 3d 18 01 00 00 	lea    0x118(%rip),%rdi        # 7ec8 <_IO_stdin_used+0x68>
    7db0:	e8 bb a1 ff ff       	callq  1f70 <std::__throw_length_error(char const*)@plt>
    7db5:	48 8d 3d dc 00 00 00 	lea    0xdc(%rip),%rdi        # 7e98 <_IO_stdin_used+0x38>
    7dbc:	e8 ff a1 ff ff       	callq  1fc0 <std::__throw_logic_error(char const*)@plt>
    7dc1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    7dc8:	00 00 00 
    7dcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000007dd0 <__libc_csu_init>:
    7dd0:	41 57                	push   %r15
    7dd2:	41 56                	push   %r14
    7dd4:	49 89 d7             	mov    %rdx,%r15
    7dd7:	41 55                	push   %r13
    7dd9:	41 54                	push   %r12
    7ddb:	4c 8d 25 26 1a 20 00 	lea    0x201a26(%rip),%r12        # 209808 <__frame_dummy_init_array_entry>
    7de2:	55                   	push   %rbp
    7de3:	48 8d 2d 2e 1a 20 00 	lea    0x201a2e(%rip),%rbp        # 209818 <__init_array_end>
    7dea:	53                   	push   %rbx
    7deb:	41 89 fd             	mov    %edi,%r13d
    7dee:	49 89 f6             	mov    %rsi,%r14
    7df1:	4c 29 e5             	sub    %r12,%rbp
    7df4:	48 83 ec 08          	sub    $0x8,%rsp
    7df8:	48 c1 fd 03          	sar    $0x3,%rbp
    7dfc:	e8 7f a0 ff ff       	callq  1e80 <_init>
    7e01:	48 85 ed             	test   %rbp,%rbp
    7e04:	74 20                	je     7e26 <__libc_csu_init+0x56>
    7e06:	31 db                	xor    %ebx,%ebx
    7e08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    7e0f:	00 
    7e10:	4c 89 fa             	mov    %r15,%rdx
    7e13:	4c 89 f6             	mov    %r14,%rsi
    7e16:	44 89 ef             	mov    %r13d,%edi
    7e19:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
    7e1d:	48 83 c3 01          	add    $0x1,%rbx
    7e21:	48 39 dd             	cmp    %rbx,%rbp
    7e24:	75 ea                	jne    7e10 <__libc_csu_init+0x40>
    7e26:	48 83 c4 08          	add    $0x8,%rsp
    7e2a:	5b                   	pop    %rbx
    7e2b:	5d                   	pop    %rbp
    7e2c:	41 5c                	pop    %r12
    7e2e:	41 5d                	pop    %r13
    7e30:	41 5e                	pop    %r14
    7e32:	41 5f                	pop    %r15
    7e34:	c3                   	retq   
    7e35:	90                   	nop
    7e36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    7e3d:	00 00 00 

0000000000007e40 <__libc_csu_fini>:
    7e40:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000007e44 <_fini>:
    7e44:	48 83 ec 08          	sub    $0x8,%rsp
    7e48:	48 83 c4 08          	add    $0x8,%rsp
    7e4c:	c3                   	retq   
